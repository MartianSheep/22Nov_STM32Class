
POV_BLDC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c88  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08006e38  08006e38  00016e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e58  08006e58  000211a8  2**0
                  CONTENTS
  4 .ARM          00000008  08006e58  08006e58  00016e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e60  08006e60  000211a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e60  08006e60  00016e60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e64  08006e64  00016e64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000011a8  20000000  08006e68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000211a8  2**0
                  CONTENTS
 10 .bss          000018f8  200011a8  200011a8  000211a8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002aa0  20002aa0  000211a8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000211a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015287  00000000  00000000  000211d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002484  00000000  00000000  0003645f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001160  00000000  00000000  000388e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001098  00000000  00000000  00039a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025516  00000000  00000000  0003aae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012bc7  00000000  00000000  0005fff6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e4654  00000000  00000000  00072bbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00157211  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004c80  00000000  00000000  00157264  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200011a8 	.word	0x200011a8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006e20 	.word	0x08006e20

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200011ac 	.word	0x200011ac
 80001ec:	08006e20 	.word	0x08006e20

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	3c01      	subs	r4, #1
 800032c:	bf28      	it	cs
 800032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000332:	d2e9      	bcs.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__aeabi_d2f>:
 800098c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000990:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000994:	bf24      	itt	cs
 8000996:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800099a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800099e:	d90d      	bls.n	80009bc <__aeabi_d2f+0x30>
 80009a0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009a4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009a8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009ac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009b0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009b4:	bf08      	it	eq
 80009b6:	f020 0001 	biceq.w	r0, r0, #1
 80009ba:	4770      	bx	lr
 80009bc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009c0:	d121      	bne.n	8000a06 <__aeabi_d2f+0x7a>
 80009c2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009c6:	bfbc      	itt	lt
 80009c8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009cc:	4770      	bxlt	lr
 80009ce:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009d2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009d6:	f1c2 0218 	rsb	r2, r2, #24
 80009da:	f1c2 0c20 	rsb	ip, r2, #32
 80009de:	fa10 f30c 	lsls.w	r3, r0, ip
 80009e2:	fa20 f002 	lsr.w	r0, r0, r2
 80009e6:	bf18      	it	ne
 80009e8:	f040 0001 	orrne.w	r0, r0, #1
 80009ec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009f0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009f4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009f8:	ea40 000c 	orr.w	r0, r0, ip
 80009fc:	fa23 f302 	lsr.w	r3, r3, r2
 8000a00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a04:	e7cc      	b.n	80009a0 <__aeabi_d2f+0x14>
 8000a06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a0a:	d107      	bne.n	8000a1c <__aeabi_d2f+0x90>
 8000a0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a10:	bf1e      	ittt	ne
 8000a12:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a16:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a1a:	4770      	bxne	lr
 8000a1c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop

08000a2c <__aeabi_uldivmod>:
 8000a2c:	b953      	cbnz	r3, 8000a44 <__aeabi_uldivmod+0x18>
 8000a2e:	b94a      	cbnz	r2, 8000a44 <__aeabi_uldivmod+0x18>
 8000a30:	2900      	cmp	r1, #0
 8000a32:	bf08      	it	eq
 8000a34:	2800      	cmpeq	r0, #0
 8000a36:	bf1c      	itt	ne
 8000a38:	f04f 31ff 	movne.w	r1, #4294967295
 8000a3c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a40:	f000 b974 	b.w	8000d2c <__aeabi_idiv0>
 8000a44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a4c:	f000 f806 	bl	8000a5c <__udivmoddi4>
 8000a50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a58:	b004      	add	sp, #16
 8000a5a:	4770      	bx	lr

08000a5c <__udivmoddi4>:
 8000a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a60:	9d08      	ldr	r5, [sp, #32]
 8000a62:	4604      	mov	r4, r0
 8000a64:	468e      	mov	lr, r1
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d14d      	bne.n	8000b06 <__udivmoddi4+0xaa>
 8000a6a:	428a      	cmp	r2, r1
 8000a6c:	4694      	mov	ip, r2
 8000a6e:	d969      	bls.n	8000b44 <__udivmoddi4+0xe8>
 8000a70:	fab2 f282 	clz	r2, r2
 8000a74:	b152      	cbz	r2, 8000a8c <__udivmoddi4+0x30>
 8000a76:	fa01 f302 	lsl.w	r3, r1, r2
 8000a7a:	f1c2 0120 	rsb	r1, r2, #32
 8000a7e:	fa20 f101 	lsr.w	r1, r0, r1
 8000a82:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a86:	ea41 0e03 	orr.w	lr, r1, r3
 8000a8a:	4094      	lsls	r4, r2
 8000a8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a90:	0c21      	lsrs	r1, r4, #16
 8000a92:	fbbe f6f8 	udiv	r6, lr, r8
 8000a96:	fa1f f78c 	uxth.w	r7, ip
 8000a9a:	fb08 e316 	mls	r3, r8, r6, lr
 8000a9e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000aa2:	fb06 f107 	mul.w	r1, r6, r7
 8000aa6:	4299      	cmp	r1, r3
 8000aa8:	d90a      	bls.n	8000ac0 <__udivmoddi4+0x64>
 8000aaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000aae:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ab2:	f080 811f 	bcs.w	8000cf4 <__udivmoddi4+0x298>
 8000ab6:	4299      	cmp	r1, r3
 8000ab8:	f240 811c 	bls.w	8000cf4 <__udivmoddi4+0x298>
 8000abc:	3e02      	subs	r6, #2
 8000abe:	4463      	add	r3, ip
 8000ac0:	1a5b      	subs	r3, r3, r1
 8000ac2:	b2a4      	uxth	r4, r4
 8000ac4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ac8:	fb08 3310 	mls	r3, r8, r0, r3
 8000acc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ad0:	fb00 f707 	mul.w	r7, r0, r7
 8000ad4:	42a7      	cmp	r7, r4
 8000ad6:	d90a      	bls.n	8000aee <__udivmoddi4+0x92>
 8000ad8:	eb1c 0404 	adds.w	r4, ip, r4
 8000adc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ae0:	f080 810a 	bcs.w	8000cf8 <__udivmoddi4+0x29c>
 8000ae4:	42a7      	cmp	r7, r4
 8000ae6:	f240 8107 	bls.w	8000cf8 <__udivmoddi4+0x29c>
 8000aea:	4464      	add	r4, ip
 8000aec:	3802      	subs	r0, #2
 8000aee:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000af2:	1be4      	subs	r4, r4, r7
 8000af4:	2600      	movs	r6, #0
 8000af6:	b11d      	cbz	r5, 8000b00 <__udivmoddi4+0xa4>
 8000af8:	40d4      	lsrs	r4, r2
 8000afa:	2300      	movs	r3, #0
 8000afc:	e9c5 4300 	strd	r4, r3, [r5]
 8000b00:	4631      	mov	r1, r6
 8000b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b06:	428b      	cmp	r3, r1
 8000b08:	d909      	bls.n	8000b1e <__udivmoddi4+0xc2>
 8000b0a:	2d00      	cmp	r5, #0
 8000b0c:	f000 80ef 	beq.w	8000cee <__udivmoddi4+0x292>
 8000b10:	2600      	movs	r6, #0
 8000b12:	e9c5 0100 	strd	r0, r1, [r5]
 8000b16:	4630      	mov	r0, r6
 8000b18:	4631      	mov	r1, r6
 8000b1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b1e:	fab3 f683 	clz	r6, r3
 8000b22:	2e00      	cmp	r6, #0
 8000b24:	d14a      	bne.n	8000bbc <__udivmoddi4+0x160>
 8000b26:	428b      	cmp	r3, r1
 8000b28:	d302      	bcc.n	8000b30 <__udivmoddi4+0xd4>
 8000b2a:	4282      	cmp	r2, r0
 8000b2c:	f200 80f9 	bhi.w	8000d22 <__udivmoddi4+0x2c6>
 8000b30:	1a84      	subs	r4, r0, r2
 8000b32:	eb61 0303 	sbc.w	r3, r1, r3
 8000b36:	2001      	movs	r0, #1
 8000b38:	469e      	mov	lr, r3
 8000b3a:	2d00      	cmp	r5, #0
 8000b3c:	d0e0      	beq.n	8000b00 <__udivmoddi4+0xa4>
 8000b3e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b42:	e7dd      	b.n	8000b00 <__udivmoddi4+0xa4>
 8000b44:	b902      	cbnz	r2, 8000b48 <__udivmoddi4+0xec>
 8000b46:	deff      	udf	#255	; 0xff
 8000b48:	fab2 f282 	clz	r2, r2
 8000b4c:	2a00      	cmp	r2, #0
 8000b4e:	f040 8092 	bne.w	8000c76 <__udivmoddi4+0x21a>
 8000b52:	eba1 010c 	sub.w	r1, r1, ip
 8000b56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b5a:	fa1f fe8c 	uxth.w	lr, ip
 8000b5e:	2601      	movs	r6, #1
 8000b60:	0c20      	lsrs	r0, r4, #16
 8000b62:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b66:	fb07 1113 	mls	r1, r7, r3, r1
 8000b6a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b6e:	fb0e f003 	mul.w	r0, lr, r3
 8000b72:	4288      	cmp	r0, r1
 8000b74:	d908      	bls.n	8000b88 <__udivmoddi4+0x12c>
 8000b76:	eb1c 0101 	adds.w	r1, ip, r1
 8000b7a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b7e:	d202      	bcs.n	8000b86 <__udivmoddi4+0x12a>
 8000b80:	4288      	cmp	r0, r1
 8000b82:	f200 80cb 	bhi.w	8000d1c <__udivmoddi4+0x2c0>
 8000b86:	4643      	mov	r3, r8
 8000b88:	1a09      	subs	r1, r1, r0
 8000b8a:	b2a4      	uxth	r4, r4
 8000b8c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b90:	fb07 1110 	mls	r1, r7, r0, r1
 8000b94:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b98:	fb0e fe00 	mul.w	lr, lr, r0
 8000b9c:	45a6      	cmp	lr, r4
 8000b9e:	d908      	bls.n	8000bb2 <__udivmoddi4+0x156>
 8000ba0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ba4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ba8:	d202      	bcs.n	8000bb0 <__udivmoddi4+0x154>
 8000baa:	45a6      	cmp	lr, r4
 8000bac:	f200 80bb 	bhi.w	8000d26 <__udivmoddi4+0x2ca>
 8000bb0:	4608      	mov	r0, r1
 8000bb2:	eba4 040e 	sub.w	r4, r4, lr
 8000bb6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bba:	e79c      	b.n	8000af6 <__udivmoddi4+0x9a>
 8000bbc:	f1c6 0720 	rsb	r7, r6, #32
 8000bc0:	40b3      	lsls	r3, r6
 8000bc2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bc6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bca:	fa20 f407 	lsr.w	r4, r0, r7
 8000bce:	fa01 f306 	lsl.w	r3, r1, r6
 8000bd2:	431c      	orrs	r4, r3
 8000bd4:	40f9      	lsrs	r1, r7
 8000bd6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bda:	fa00 f306 	lsl.w	r3, r0, r6
 8000bde:	fbb1 f8f9 	udiv	r8, r1, r9
 8000be2:	0c20      	lsrs	r0, r4, #16
 8000be4:	fa1f fe8c 	uxth.w	lr, ip
 8000be8:	fb09 1118 	mls	r1, r9, r8, r1
 8000bec:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bf0:	fb08 f00e 	mul.w	r0, r8, lr
 8000bf4:	4288      	cmp	r0, r1
 8000bf6:	fa02 f206 	lsl.w	r2, r2, r6
 8000bfa:	d90b      	bls.n	8000c14 <__udivmoddi4+0x1b8>
 8000bfc:	eb1c 0101 	adds.w	r1, ip, r1
 8000c00:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c04:	f080 8088 	bcs.w	8000d18 <__udivmoddi4+0x2bc>
 8000c08:	4288      	cmp	r0, r1
 8000c0a:	f240 8085 	bls.w	8000d18 <__udivmoddi4+0x2bc>
 8000c0e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c12:	4461      	add	r1, ip
 8000c14:	1a09      	subs	r1, r1, r0
 8000c16:	b2a4      	uxth	r4, r4
 8000c18:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c1c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c20:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c24:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c28:	458e      	cmp	lr, r1
 8000c2a:	d908      	bls.n	8000c3e <__udivmoddi4+0x1e2>
 8000c2c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c30:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c34:	d26c      	bcs.n	8000d10 <__udivmoddi4+0x2b4>
 8000c36:	458e      	cmp	lr, r1
 8000c38:	d96a      	bls.n	8000d10 <__udivmoddi4+0x2b4>
 8000c3a:	3802      	subs	r0, #2
 8000c3c:	4461      	add	r1, ip
 8000c3e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c42:	fba0 9402 	umull	r9, r4, r0, r2
 8000c46:	eba1 010e 	sub.w	r1, r1, lr
 8000c4a:	42a1      	cmp	r1, r4
 8000c4c:	46c8      	mov	r8, r9
 8000c4e:	46a6      	mov	lr, r4
 8000c50:	d356      	bcc.n	8000d00 <__udivmoddi4+0x2a4>
 8000c52:	d053      	beq.n	8000cfc <__udivmoddi4+0x2a0>
 8000c54:	b15d      	cbz	r5, 8000c6e <__udivmoddi4+0x212>
 8000c56:	ebb3 0208 	subs.w	r2, r3, r8
 8000c5a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c5e:	fa01 f707 	lsl.w	r7, r1, r7
 8000c62:	fa22 f306 	lsr.w	r3, r2, r6
 8000c66:	40f1      	lsrs	r1, r6
 8000c68:	431f      	orrs	r7, r3
 8000c6a:	e9c5 7100 	strd	r7, r1, [r5]
 8000c6e:	2600      	movs	r6, #0
 8000c70:	4631      	mov	r1, r6
 8000c72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c76:	f1c2 0320 	rsb	r3, r2, #32
 8000c7a:	40d8      	lsrs	r0, r3
 8000c7c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c80:	fa21 f303 	lsr.w	r3, r1, r3
 8000c84:	4091      	lsls	r1, r2
 8000c86:	4301      	orrs	r1, r0
 8000c88:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c8c:	fa1f fe8c 	uxth.w	lr, ip
 8000c90:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c94:	fb07 3610 	mls	r6, r7, r0, r3
 8000c98:	0c0b      	lsrs	r3, r1, #16
 8000c9a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c9e:	fb00 f60e 	mul.w	r6, r0, lr
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	fa04 f402 	lsl.w	r4, r4, r2
 8000ca8:	d908      	bls.n	8000cbc <__udivmoddi4+0x260>
 8000caa:	eb1c 0303 	adds.w	r3, ip, r3
 8000cae:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cb2:	d22f      	bcs.n	8000d14 <__udivmoddi4+0x2b8>
 8000cb4:	429e      	cmp	r6, r3
 8000cb6:	d92d      	bls.n	8000d14 <__udivmoddi4+0x2b8>
 8000cb8:	3802      	subs	r0, #2
 8000cba:	4463      	add	r3, ip
 8000cbc:	1b9b      	subs	r3, r3, r6
 8000cbe:	b289      	uxth	r1, r1
 8000cc0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cc4:	fb07 3316 	mls	r3, r7, r6, r3
 8000cc8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ccc:	fb06 f30e 	mul.w	r3, r6, lr
 8000cd0:	428b      	cmp	r3, r1
 8000cd2:	d908      	bls.n	8000ce6 <__udivmoddi4+0x28a>
 8000cd4:	eb1c 0101 	adds.w	r1, ip, r1
 8000cd8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000cdc:	d216      	bcs.n	8000d0c <__udivmoddi4+0x2b0>
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d914      	bls.n	8000d0c <__udivmoddi4+0x2b0>
 8000ce2:	3e02      	subs	r6, #2
 8000ce4:	4461      	add	r1, ip
 8000ce6:	1ac9      	subs	r1, r1, r3
 8000ce8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000cec:	e738      	b.n	8000b60 <__udivmoddi4+0x104>
 8000cee:	462e      	mov	r6, r5
 8000cf0:	4628      	mov	r0, r5
 8000cf2:	e705      	b.n	8000b00 <__udivmoddi4+0xa4>
 8000cf4:	4606      	mov	r6, r0
 8000cf6:	e6e3      	b.n	8000ac0 <__udivmoddi4+0x64>
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	e6f8      	b.n	8000aee <__udivmoddi4+0x92>
 8000cfc:	454b      	cmp	r3, r9
 8000cfe:	d2a9      	bcs.n	8000c54 <__udivmoddi4+0x1f8>
 8000d00:	ebb9 0802 	subs.w	r8, r9, r2
 8000d04:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d08:	3801      	subs	r0, #1
 8000d0a:	e7a3      	b.n	8000c54 <__udivmoddi4+0x1f8>
 8000d0c:	4646      	mov	r6, r8
 8000d0e:	e7ea      	b.n	8000ce6 <__udivmoddi4+0x28a>
 8000d10:	4620      	mov	r0, r4
 8000d12:	e794      	b.n	8000c3e <__udivmoddi4+0x1e2>
 8000d14:	4640      	mov	r0, r8
 8000d16:	e7d1      	b.n	8000cbc <__udivmoddi4+0x260>
 8000d18:	46d0      	mov	r8, sl
 8000d1a:	e77b      	b.n	8000c14 <__udivmoddi4+0x1b8>
 8000d1c:	3b02      	subs	r3, #2
 8000d1e:	4461      	add	r1, ip
 8000d20:	e732      	b.n	8000b88 <__udivmoddi4+0x12c>
 8000d22:	4630      	mov	r0, r6
 8000d24:	e709      	b.n	8000b3a <__udivmoddi4+0xde>
 8000d26:	4464      	add	r4, ip
 8000d28:	3802      	subs	r0, #2
 8000d2a:	e742      	b.n	8000bb2 <__udivmoddi4+0x156>

08000d2c <__aeabi_idiv0>:
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop

08000d30 <HAL_TIM_IC_CaptureCallback>:
	HAL_UART_Receive(&huart3, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
//	HAL_UART_Transmit(&huart3, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
	return 1;
}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8000d30:	b5b0      	push	{r4, r5, r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	7f1b      	ldrb	r3, [r3, #28]
 8000d3c:	2b01      	cmp	r3, #1
 8000d3e:	f040 80c4 	bne.w	8000eca <HAL_TIM_IC_CaptureCallback+0x19a>
		if(htim->Instance == htim3.Instance){
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	4b66      	ldr	r3, [pc, #408]	; (8000ee0 <HAL_TIM_IC_CaptureCallback+0x1b0>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	429a      	cmp	r2, r3
 8000d4c:	f040 80bd 	bne.w	8000eca <HAL_TIM_IC_CaptureCallback+0x19a>
//			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
			if(controlActive){
 8000d50:	4b64      	ldr	r3, [pc, #400]	; (8000ee4 <HAL_TIM_IC_CaptureCallback+0x1b4>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	f000 80b8 	beq.w	8000eca <HAL_TIM_IC_CaptureCallback+0x19a>
				ICValue = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	6878      	ldr	r0, [r7, #4]
 8000d5e:	f004 fb6f 	bl	8005440 <HAL_TIM_ReadCapturedValue>
 8000d62:	4603      	mov	r3, r0
 8000d64:	461a      	mov	r2, r3
 8000d66:	4b60      	ldr	r3, [pc, #384]	; (8000ee8 <HAL_TIM_IC_CaptureCallback+0x1b8>)
 8000d68:	601a      	str	r2, [r3, #0]
				if(ICValue){
 8000d6a:	4b5f      	ldr	r3, [pc, #380]	; (8000ee8 <HAL_TIM_IC_CaptureCallback+0x1b8>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	f000 80ab 	beq.w	8000eca <HAL_TIM_IC_CaptureCallback+0x19a>
//					Duty = (HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2) *100)/ICValue;
					Frequency = 1000000.0 / ICValue;
 8000d74:	4b5c      	ldr	r3, [pc, #368]	; (8000ee8 <HAL_TIM_IC_CaptureCallback+0x1b8>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f7ff fb8b 	bl	8000494 <__aeabi_i2d>
 8000d7e:	4602      	mov	r2, r0
 8000d80:	460b      	mov	r3, r1
 8000d82:	a155      	add	r1, pc, #340	; (adr r1, 8000ed8 <HAL_TIM_IC_CaptureCallback+0x1a8>)
 8000d84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000d88:	f7ff fd18 	bl	80007bc <__aeabi_ddiv>
 8000d8c:	4602      	mov	r2, r0
 8000d8e:	460b      	mov	r3, r1
 8000d90:	4610      	mov	r0, r2
 8000d92:	4619      	mov	r1, r3
 8000d94:	f7ff fdfa 	bl	800098c <__aeabi_d2f>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	4a54      	ldr	r2, [pc, #336]	; (8000eec <HAL_TIM_IC_CaptureCallback+0x1bc>)
 8000d9c:	6013      	str	r3, [r2, #0]
					FrequencyInt = Frequency;
 8000d9e:	4b53      	ldr	r3, [pc, #332]	; (8000eec <HAL_TIM_IC_CaptureCallback+0x1bc>)
 8000da0:	edd3 7a00 	vldr	s15, [r3]
 8000da4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000da8:	ee17 2a90 	vmov	r2, s15
 8000dac:	4b50      	ldr	r3, [pc, #320]	; (8000ef0 <HAL_TIM_IC_CaptureCallback+0x1c0>)
 8000dae:	601a      	str	r2, [r3, #0]
					err = (REQ_FREQ - Frequency) > 100 ? 100 : (REQ_FREQ - Frequency) ;
 8000db0:	4b4e      	ldr	r3, [pc, #312]	; (8000eec <HAL_TIM_IC_CaptureCallback+0x1bc>)
 8000db2:	edd3 7a00 	vldr	s15, [r3]
 8000db6:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8000ef4 <HAL_TIM_IC_CaptureCallback+0x1c4>
 8000dba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000dbe:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8000ef8 <HAL_TIM_IC_CaptureCallback+0x1c8>
 8000dc2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dca:	dd02      	ble.n	8000dd2 <HAL_TIM_IC_CaptureCallback+0xa2>
 8000dcc:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8000ef8 <HAL_TIM_IC_CaptureCallback+0x1c8>
 8000dd0:	e006      	b.n	8000de0 <HAL_TIM_IC_CaptureCallback+0xb0>
 8000dd2:	4b46      	ldr	r3, [pc, #280]	; (8000eec <HAL_TIM_IC_CaptureCallback+0x1bc>)
 8000dd4:	edd3 7a00 	vldr	s15, [r3]
 8000dd8:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8000ef4 <HAL_TIM_IC_CaptureCallback+0x1c4>
 8000ddc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000de0:	4b46      	ldr	r3, [pc, #280]	; (8000efc <HAL_TIM_IC_CaptureCallback+0x1cc>)
 8000de2:	edc3 7a00 	vstr	s15, [r3]
					err = err < -100 ? -100 : err ;
 8000de6:	4b45      	ldr	r3, [pc, #276]	; (8000efc <HAL_TIM_IC_CaptureCallback+0x1cc>)
 8000de8:	edd3 7a00 	vldr	s15, [r3]
 8000dec:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8000f00 <HAL_TIM_IC_CaptureCallback+0x1d0>
 8000df0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000df4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000df8:	d501      	bpl.n	8000dfe <HAL_TIM_IC_CaptureCallback+0xce>
 8000dfa:	4b42      	ldr	r3, [pc, #264]	; (8000f04 <HAL_TIM_IC_CaptureCallback+0x1d4>)
 8000dfc:	e001      	b.n	8000e02 <HAL_TIM_IC_CaptureCallback+0xd2>
 8000dfe:	4b3f      	ldr	r3, [pc, #252]	; (8000efc <HAL_TIM_IC_CaptureCallback+0x1cc>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a3e      	ldr	r2, [pc, #248]	; (8000efc <HAL_TIM_IC_CaptureCallback+0x1cc>)
 8000e04:	6013      	str	r3, [r2, #0]
					PWMValue += err/7.5;
 8000e06:	4b40      	ldr	r3, [pc, #256]	; (8000f08 <HAL_TIM_IC_CaptureCallback+0x1d8>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f7ff fb54 	bl	80004b8 <__aeabi_f2d>
 8000e10:	4604      	mov	r4, r0
 8000e12:	460d      	mov	r5, r1
 8000e14:	4b39      	ldr	r3, [pc, #228]	; (8000efc <HAL_TIM_IC_CaptureCallback+0x1cc>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff fb4d 	bl	80004b8 <__aeabi_f2d>
 8000e1e:	f04f 0200 	mov.w	r2, #0
 8000e22:	4b3a      	ldr	r3, [pc, #232]	; (8000f0c <HAL_TIM_IC_CaptureCallback+0x1dc>)
 8000e24:	f7ff fcca 	bl	80007bc <__aeabi_ddiv>
 8000e28:	4602      	mov	r2, r0
 8000e2a:	460b      	mov	r3, r1
 8000e2c:	4620      	mov	r0, r4
 8000e2e:	4629      	mov	r1, r5
 8000e30:	f7ff f9e4 	bl	80001fc <__adddf3>
 8000e34:	4602      	mov	r2, r0
 8000e36:	460b      	mov	r3, r1
 8000e38:	4610      	mov	r0, r2
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	f7ff fda6 	bl	800098c <__aeabi_d2f>
 8000e40:	4603      	mov	r3, r0
 8000e42:	4a31      	ldr	r2, [pc, #196]	; (8000f08 <HAL_TIM_IC_CaptureCallback+0x1d8>)
 8000e44:	6013      	str	r3, [r2, #0]
					if(PWMValue > 200) PWMValue = 200;
 8000e46:	4b30      	ldr	r3, [pc, #192]	; (8000f08 <HAL_TIM_IC_CaptureCallback+0x1d8>)
 8000e48:	edd3 7a00 	vldr	s15, [r3]
 8000e4c:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8000f10 <HAL_TIM_IC_CaptureCallback+0x1e0>
 8000e50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e58:	dd02      	ble.n	8000e60 <HAL_TIM_IC_CaptureCallback+0x130>
 8000e5a:	4b2b      	ldr	r3, [pc, #172]	; (8000f08 <HAL_TIM_IC_CaptureCallback+0x1d8>)
 8000e5c:	4a2d      	ldr	r2, [pc, #180]	; (8000f14 <HAL_TIM_IC_CaptureCallback+0x1e4>)
 8000e5e:	601a      	str	r2, [r3, #0]
					if(PWMValue < 100) PWMValue = 100;
 8000e60:	4b29      	ldr	r3, [pc, #164]	; (8000f08 <HAL_TIM_IC_CaptureCallback+0x1d8>)
 8000e62:	edd3 7a00 	vldr	s15, [r3]
 8000e66:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8000ef8 <HAL_TIM_IC_CaptureCallback+0x1c8>
 8000e6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e72:	d502      	bpl.n	8000e7a <HAL_TIM_IC_CaptureCallback+0x14a>
 8000e74:	4b24      	ldr	r3, [pc, #144]	; (8000f08 <HAL_TIM_IC_CaptureCallback+0x1d8>)
 8000e76:	4a28      	ldr	r2, [pc, #160]	; (8000f18 <HAL_TIM_IC_CaptureCallback+0x1e8>)
 8000e78:	601a      	str	r2, [r3, #0]
					PWMValueInt = PWMValue;
 8000e7a:	4b23      	ldr	r3, [pc, #140]	; (8000f08 <HAL_TIM_IC_CaptureCallback+0x1d8>)
 8000e7c:	edd3 7a00 	vldr	s15, [r3]
 8000e80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e84:	ee17 2a90 	vmov	r2, s15
 8000e88:	4b24      	ldr	r3, [pc, #144]	; (8000f1c <HAL_TIM_IC_CaptureCallback+0x1ec>)
 8000e8a:	601a      	str	r2, [r3, #0]
					TIM2->CCR1 = PWMValueInt;
 8000e8c:	4b23      	ldr	r3, [pc, #140]	; (8000f1c <HAL_TIM_IC_CaptureCallback+0x1ec>)
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e94:	635a      	str	r2, [r3, #52]	; 0x34
//					printf("%" PRId32 ", %" PRId32 "\r\n", FrequencyInt, PWMValueInt);

					if(loopCount == 0)
 8000e96:	4b22      	ldr	r3, [pc, #136]	; (8000f20 <HAL_TIM_IC_CaptureCallback+0x1f0>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d103      	bne.n	8000ea6 <HAL_TIM_IC_CaptureCallback+0x176>
						cursor = cursorInit;
 8000e9e:	4b21      	ldr	r3, [pc, #132]	; (8000f24 <HAL_TIM_IC_CaptureCallback+0x1f4>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4a21      	ldr	r2, [pc, #132]	; (8000f28 <HAL_TIM_IC_CaptureCallback+0x1f8>)
 8000ea4:	6013      	str	r3, [r2, #0]
					++loopCount;
 8000ea6:	4b1e      	ldr	r3, [pc, #120]	; (8000f20 <HAL_TIM_IC_CaptureCallback+0x1f0>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	3301      	adds	r3, #1
 8000eac:	4a1c      	ldr	r2, [pc, #112]	; (8000f20 <HAL_TIM_IC_CaptureCallback+0x1f0>)
 8000eae:	6013      	str	r3, [r2, #0]
					loopCount %= LED_STRIPS;
 8000eb0:	4b1b      	ldr	r3, [pc, #108]	; (8000f20 <HAL_TIM_IC_CaptureCallback+0x1f0>)
 8000eb2:	6819      	ldr	r1, [r3, #0]
 8000eb4:	4b1d      	ldr	r3, [pc, #116]	; (8000f2c <HAL_TIM_IC_CaptureCallback+0x1fc>)
 8000eb6:	fb83 3201 	smull	r3, r2, r3, r1
 8000eba:	17cb      	asrs	r3, r1, #31
 8000ebc:	1ad2      	subs	r2, r2, r3
 8000ebe:	4613      	mov	r3, r2
 8000ec0:	005b      	lsls	r3, r3, #1
 8000ec2:	4413      	add	r3, r2
 8000ec4:	1aca      	subs	r2, r1, r3
 8000ec6:	4b16      	ldr	r3, [pc, #88]	; (8000f20 <HAL_TIM_IC_CaptureCallback+0x1f0>)
 8000ec8:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
}
 8000eca:	bf00      	nop
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bdb0      	pop	{r4, r5, r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	f3af 8000 	nop.w
 8000ed8:	00000000 	.word	0x00000000
 8000edc:	412e8480 	.word	0x412e8480
 8000ee0:	2000147c 	.word	0x2000147c
 8000ee4:	20001b44 	.word	0x20001b44
 8000ee8:	20001b34 	.word	0x20001b34
 8000eec:	20001b3c 	.word	0x20001b3c
 8000ef0:	20001b38 	.word	0x20001b38
 8000ef4:	42480000 	.word	0x42480000
 8000ef8:	42c80000 	.word	0x42c80000
 8000efc:	20001b40 	.word	0x20001b40
 8000f00:	c2c80000 	.word	0xc2c80000
 8000f04:	c2c80000 	.word	0xc2c80000
 8000f08:	20001194 	.word	0x20001194
 8000f0c:	401e0000 	.word	0x401e0000
 8000f10:	43480000 	.word	0x43480000
 8000f14:	43480000 	.word	0x43480000
 8000f18:	42c80000 	.word	0x42c80000
 8000f1c:	20001198 	.word	0x20001198
 8000f20:	20002a90 	.word	0x20002a90
 8000f24:	20002a8c 	.word	0x20002a8c
 8000f28:	20002a88 	.word	0x20002a88
 8000f2c:	55555556 	.word	0x55555556

08000f30 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13){
 8000f3a:	88fb      	ldrh	r3, [r7, #6]
 8000f3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f40:	d118      	bne.n	8000f74 <HAL_GPIO_EXTI_Callback+0x44>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000f42:	2180      	movs	r1, #128	; 0x80
 8000f44:	480d      	ldr	r0, [pc, #52]	; (8000f7c <HAL_GPIO_EXTI_Callback+0x4c>)
 8000f46:	f002 fb3e 	bl	80035c6 <HAL_GPIO_TogglePin>
		cursorInit += (LED_WIDTH/LED_STRIPS)/2;
 8000f4a:	4b0d      	ldr	r3, [pc, #52]	; (8000f80 <HAL_GPIO_EXTI_Callback+0x50>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	330a      	adds	r3, #10
 8000f50:	4a0b      	ldr	r2, [pc, #44]	; (8000f80 <HAL_GPIO_EXTI_Callback+0x50>)
 8000f52:	6013      	str	r3, [r2, #0]
		cursorInit %= LED_WIDTH;
 8000f54:	4b0a      	ldr	r3, [pc, #40]	; (8000f80 <HAL_GPIO_EXTI_Callback+0x50>)
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	4b0a      	ldr	r3, [pc, #40]	; (8000f84 <HAL_GPIO_EXTI_Callback+0x54>)
 8000f5a:	fb83 1302 	smull	r1, r3, r3, r2
 8000f5e:	4413      	add	r3, r2
 8000f60:	1159      	asrs	r1, r3, #5
 8000f62:	17d3      	asrs	r3, r2, #31
 8000f64:	1ac9      	subs	r1, r1, r3
 8000f66:	460b      	mov	r3, r1
 8000f68:	011b      	lsls	r3, r3, #4
 8000f6a:	1a5b      	subs	r3, r3, r1
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	1ad1      	subs	r1, r2, r3
 8000f70:	4b03      	ldr	r3, [pc, #12]	; (8000f80 <HAL_GPIO_EXTI_Callback+0x50>)
 8000f72:	6019      	str	r1, [r3, #0]
	}
}
 8000f74:	bf00      	nop
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	40020400 	.word	0x40020400
 8000f80:	20002a8c 	.word	0x20002a8c
 8000f84:	88888889 	.word	0x88888889

08000f88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b088      	sub	sp, #32
 8000f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
//	uint8_t LEDData[LED_WIDTH][LED_NUM][3];

	for(int i = 0; i < 24 * LED_NUM + 50; ++i){
 8000f8e:	2300      	movs	r3, #0
 8000f90:	61fb      	str	r3, [r7, #28]
 8000f92:	e016      	b.n	8000fc2 <main+0x3a>
		for(int j = 0; j < LED_STRIPS; ++j)
 8000f94:	2300      	movs	r3, #0
 8000f96:	61bb      	str	r3, [r7, #24]
 8000f98:	e00d      	b.n	8000fb6 <main+0x2e>
		PWMData[j][i] = 0;
 8000f9a:	49b7      	ldr	r1, [pc, #732]	; (8001278 <main+0x2f0>)
 8000f9c:	69bb      	ldr	r3, [r7, #24]
 8000f9e:	f240 228a 	movw	r2, #650	; 0x28a
 8000fa2:	fb03 f202 	mul.w	r2, r3, r2
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	4413      	add	r3, r2
 8000faa:	2200      	movs	r2, #0
 8000fac:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(int j = 0; j < LED_STRIPS; ++j)
 8000fb0:	69bb      	ldr	r3, [r7, #24]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	61bb      	str	r3, [r7, #24]
 8000fb6:	69bb      	ldr	r3, [r7, #24]
 8000fb8:	2b02      	cmp	r3, #2
 8000fba:	ddee      	ble.n	8000f9a <main+0x12>
	for(int i = 0; i < 24 * LED_NUM + 50; ++i){
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	61fb      	str	r3, [r7, #28]
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	f240 2289 	movw	r2, #649	; 0x289
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	dde3      	ble.n	8000f94 <main+0xc>
	}

	int loopTime = (168000000/REQ_FREQ) / (LED_WIDTH/3);
 8000fcc:	4bab      	ldr	r3, [pc, #684]	; (800127c <main+0x2f4>)
 8000fce:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fd0:	f001 f908 	bl	80021e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fd4:	f000 f96e 	bl	80012b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fd8:	f000 fc78 	bl	80018cc <MX_GPIO_Init>
  MX_ETH_Init();
 8000fdc:	f000 f9d4 	bl	8001388 <MX_ETH_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000fe0:	f000 fc16 	bl	8001810 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 8000fe4:	f000 fad6 	bl	8001594 <MX_TIM2_Init>
  MX_DMA_Init();
 8000fe8:	f000 fc40 	bl	800186c <MX_DMA_Init>
  MX_TIM1_Init();
 8000fec:	f000 fa1a 	bl	8001424 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8000ff0:	f000 fbe4 	bl	80017bc <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8000ff4:	f000 fb44 	bl	8001680 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	48a1      	ldr	r0, [pc, #644]	; (8001280 <main+0x2f8>)
 8000ffc:	f003 fd88 	bl	8004b10 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start(&htim3, TIM_CHANNEL_2);
 8001000:	2104      	movs	r1, #4
 8001002:	489f      	ldr	r0, [pc, #636]	; (8001280 <main+0x2f8>)
 8001004:	f003 fca8 	bl	8004958 <HAL_TIM_IC_Start>

  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001008:	4b9e      	ldr	r3, [pc, #632]	; (8001284 <main+0x2fc>)
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	4a9d      	ldr	r2, [pc, #628]	; (8001284 <main+0x2fc>)
 800100e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001012:	60d3      	str	r3, [r2, #12]
  DWT->CYCCNT = 0;
 8001014:	4b9c      	ldr	r3, [pc, #624]	; (8001288 <main+0x300>)
 8001016:	2200      	movs	r2, #0
 8001018:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800101a:	4b9b      	ldr	r3, [pc, #620]	; (8001288 <main+0x300>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a9a      	ldr	r2, [pc, #616]	; (8001288 <main+0x300>)
 8001020:	f043 0301 	orr.w	r3, r3, #1
 8001024:	6013      	str	r3, [r2, #0]

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8001026:	2200      	movs	r2, #0
 8001028:	2108      	movs	r1, #8
 800102a:	4898      	ldr	r0, [pc, #608]	; (800128c <main+0x304>)
 800102c:	f002 fab2 	bl	8003594 <HAL_GPIO_WritePin>
  controlActive = 0;
 8001030:	4b97      	ldr	r3, [pc, #604]	; (8001290 <main+0x308>)
 8001032:	2200      	movs	r2, #0
 8001034:	601a      	str	r2, [r3, #0]
  HAL_Delay(1000);
 8001036:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800103a:	f001 f945 	bl	80022c8 <HAL_Delay>

  TIM2->CCR1 = 200;
 800103e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001042:	22c8      	movs	r2, #200	; 0xc8
 8001044:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);
 8001046:	2100      	movs	r1, #0
 8001048:	4892      	ldr	r0, [pc, #584]	; (8001294 <main+0x30c>)
 800104a:	f003 f94d 	bl	80042e8 <HAL_TIM_PWM_Start_IT>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 800104e:	2201      	movs	r2, #1
 8001050:	2108      	movs	r1, #8
 8001052:	488e      	ldr	r0, [pc, #568]	; (800128c <main+0x304>)
 8001054:	f002 fa9e 	bl	8003594 <HAL_GPIO_WritePin>
  HAL_Delay(3000);
 8001058:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800105c:	f001 f934 	bl	80022c8 <HAL_Delay>
  TIM2->CCR1 = 100;
 8001060:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001064:	2264      	movs	r2, #100	; 0x64
 8001066:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_Delay(1000);
 8001068:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800106c:	f001 f92c 	bl	80022c8 <HAL_Delay>
  TIM2->CCR1 = 200;
 8001070:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001074:	22c8      	movs	r2, #200	; 0xc8
 8001076:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_Delay(1000);
 8001078:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800107c:	f001 f924 	bl	80022c8 <HAL_Delay>
  TIM2->CCR1 = 150;
 8001080:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001084:	2296      	movs	r2, #150	; 0x96
 8001086:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_Delay(3000);
 8001088:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800108c:	f001 f91c 	bl	80022c8 <HAL_Delay>
  controlActive = 1;
 8001090:	4b7f      	ldr	r3, [pc, #508]	; (8001290 <main+0x308>)
 8001092:	2201      	movs	r2, #1
 8001094:	601a      	str	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  DWT->CYCCNT = 0;
 8001096:	4b7c      	ldr	r3, [pc, #496]	; (8001288 <main+0x300>)
 8001098:	2200      	movs	r2, #0
 800109a:	605a      	str	r2, [r3, #4]

	  for(int m = 0; m < LED_STRIPS; ++m){
 800109c:	2300      	movs	r3, #0
 800109e:	617b      	str	r3, [r7, #20]
 80010a0:	e0b4      	b.n	800120c <main+0x284>
		  int indx = 0;
 80010a2:	2300      	movs	r3, #0
 80010a4:	613b      	str	r3, [r7, #16]
		  for(int i = 0; i < LED_NUM; ++i){
 80010a6:	2300      	movs	r3, #0
 80010a8:	60fb      	str	r3, [r7, #12]
 80010aa:	e0a8      	b.n	80011fe <main+0x276>
			  color = LEDData[(cursor + m*LED_WIDTH/LED_STRIPS)%LED_WIDTH][i][0] << 16;
 80010ac:	697a      	ldr	r2, [r7, #20]
 80010ae:	4613      	mov	r3, r2
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	4413      	add	r3, r2
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	461a      	mov	r2, r3
 80010b8:	4b77      	ldr	r3, [pc, #476]	; (8001298 <main+0x310>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	441a      	add	r2, r3
 80010be:	4b77      	ldr	r3, [pc, #476]	; (800129c <main+0x314>)
 80010c0:	fb83 1302 	smull	r1, r3, r3, r2
 80010c4:	4413      	add	r3, r2
 80010c6:	1159      	asrs	r1, r3, #5
 80010c8:	17d3      	asrs	r3, r2, #31
 80010ca:	1ac9      	subs	r1, r1, r3
 80010cc:	460b      	mov	r3, r1
 80010ce:	011b      	lsls	r3, r3, #4
 80010d0:	1a5b      	subs	r3, r3, r1
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	1ad1      	subs	r1, r2, r3
 80010d6:	4872      	ldr	r0, [pc, #456]	; (80012a0 <main+0x318>)
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	461a      	mov	r2, r3
 80010dc:	0052      	lsls	r2, r2, #1
 80010de:	441a      	add	r2, r3
 80010e0:	460b      	mov	r3, r1
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	440b      	add	r3, r1
 80010e6:	0119      	lsls	r1, r3, #4
 80010e8:	1ac9      	subs	r1, r1, r3
 80010ea:	1853      	adds	r3, r2, r1
 80010ec:	4403      	add	r3, r0
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	041b      	lsls	r3, r3, #16
 80010f2:	461a      	mov	r2, r3
 80010f4:	4b6b      	ldr	r3, [pc, #428]	; (80012a4 <main+0x31c>)
 80010f6:	601a      	str	r2, [r3, #0]
			  color |= LEDData[(cursor + m*LED_WIDTH/LED_STRIPS)%LED_WIDTH][i][1] << 8;
 80010f8:	697a      	ldr	r2, [r7, #20]
 80010fa:	4613      	mov	r3, r2
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	4413      	add	r3, r2
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	461a      	mov	r2, r3
 8001104:	4b64      	ldr	r3, [pc, #400]	; (8001298 <main+0x310>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	441a      	add	r2, r3
 800110a:	4b64      	ldr	r3, [pc, #400]	; (800129c <main+0x314>)
 800110c:	fb83 1302 	smull	r1, r3, r3, r2
 8001110:	4413      	add	r3, r2
 8001112:	1159      	asrs	r1, r3, #5
 8001114:	17d3      	asrs	r3, r2, #31
 8001116:	1ac9      	subs	r1, r1, r3
 8001118:	460b      	mov	r3, r1
 800111a:	011b      	lsls	r3, r3, #4
 800111c:	1a5b      	subs	r3, r3, r1
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	1ad1      	subs	r1, r2, r3
 8001122:	485f      	ldr	r0, [pc, #380]	; (80012a0 <main+0x318>)
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	461a      	mov	r2, r3
 8001128:	0052      	lsls	r2, r2, #1
 800112a:	441a      	add	r2, r3
 800112c:	460b      	mov	r3, r1
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	440b      	add	r3, r1
 8001132:	0119      	lsls	r1, r3, #4
 8001134:	1ac9      	subs	r1, r1, r3
 8001136:	1853      	adds	r3, r2, r1
 8001138:	4403      	add	r3, r0
 800113a:	3301      	adds	r3, #1
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	021b      	lsls	r3, r3, #8
 8001140:	461a      	mov	r2, r3
 8001142:	4b58      	ldr	r3, [pc, #352]	; (80012a4 <main+0x31c>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4313      	orrs	r3, r2
 8001148:	4a56      	ldr	r2, [pc, #344]	; (80012a4 <main+0x31c>)
 800114a:	6013      	str	r3, [r2, #0]
			  color |= LEDData[(cursor + m*LED_WIDTH/LED_STRIPS)%LED_WIDTH][i][2];
 800114c:	697a      	ldr	r2, [r7, #20]
 800114e:	4613      	mov	r3, r2
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	4413      	add	r3, r2
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	461a      	mov	r2, r3
 8001158:	4b4f      	ldr	r3, [pc, #316]	; (8001298 <main+0x310>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	441a      	add	r2, r3
 800115e:	4b4f      	ldr	r3, [pc, #316]	; (800129c <main+0x314>)
 8001160:	fb83 1302 	smull	r1, r3, r3, r2
 8001164:	4413      	add	r3, r2
 8001166:	1159      	asrs	r1, r3, #5
 8001168:	17d3      	asrs	r3, r2, #31
 800116a:	1ac9      	subs	r1, r1, r3
 800116c:	460b      	mov	r3, r1
 800116e:	011b      	lsls	r3, r3, #4
 8001170:	1a5b      	subs	r3, r3, r1
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	1ad1      	subs	r1, r2, r3
 8001176:	484a      	ldr	r0, [pc, #296]	; (80012a0 <main+0x318>)
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	461a      	mov	r2, r3
 800117c:	0052      	lsls	r2, r2, #1
 800117e:	441a      	add	r2, r3
 8001180:	460b      	mov	r3, r1
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	440b      	add	r3, r1
 8001186:	0119      	lsls	r1, r3, #4
 8001188:	1ac9      	subs	r1, r1, r3
 800118a:	1853      	adds	r3, r2, r1
 800118c:	4403      	add	r3, r0
 800118e:	3302      	adds	r3, #2
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	461a      	mov	r2, r3
 8001194:	4b43      	ldr	r3, [pc, #268]	; (80012a4 <main+0x31c>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4313      	orrs	r3, r2
 800119a:	4a42      	ldr	r2, [pc, #264]	; (80012a4 <main+0x31c>)
 800119c:	6013      	str	r3, [r2, #0]
//			  color = ((LEDData[m][i][0]<<16) | (LEDData[m][i][1]<<8) | (LEDData[m][i][2]));
			  for(int j = 23; j >= 0; --j){
 800119e:	2317      	movs	r3, #23
 80011a0:	60bb      	str	r3, [r7, #8]
 80011a2:	e026      	b.n	80011f2 <main+0x26a>
				  if (color & (1 << j))
 80011a4:	2201      	movs	r2, #1
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	461a      	mov	r2, r3
 80011ae:	4b3d      	ldr	r3, [pc, #244]	; (80012a4 <main+0x31c>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4013      	ands	r3, r2
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d00b      	beq.n	80011d0 <main+0x248>
					  PWMData[m][indx] = LED_HIGH;
 80011b8:	492f      	ldr	r1, [pc, #188]	; (8001278 <main+0x2f0>)
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	f240 228a 	movw	r2, #650	; 0x28a
 80011c0:	fb03 f202 	mul.w	r2, r3, r2
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	4413      	add	r3, r2
 80011c8:	2297      	movs	r2, #151	; 0x97
 80011ca:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 80011ce:	e00a      	b.n	80011e6 <main+0x25e>
				  else
					  PWMData[m][indx] = LED_LOW;
 80011d0:	4929      	ldr	r1, [pc, #164]	; (8001278 <main+0x2f0>)
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	f240 228a 	movw	r2, #650	; 0x28a
 80011d8:	fb03 f202 	mul.w	r2, r3, r2
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	4413      	add	r3, r2
 80011e0:	223b      	movs	r2, #59	; 0x3b
 80011e2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				  ++indx;
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	3301      	adds	r3, #1
 80011ea:	613b      	str	r3, [r7, #16]
			  for(int j = 23; j >= 0; --j){
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	3b01      	subs	r3, #1
 80011f0:	60bb      	str	r3, [r7, #8]
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	dad5      	bge.n	80011a4 <main+0x21c>
		  for(int i = 0; i < LED_NUM; ++i){
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	3301      	adds	r3, #1
 80011fc:	60fb      	str	r3, [r7, #12]
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	2b18      	cmp	r3, #24
 8001202:	f77f af53 	ble.w	80010ac <main+0x124>
	  for(int m = 0; m < LED_STRIPS; ++m){
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	3301      	adds	r3, #1
 800120a:	617b      	str	r3, [r7, #20]
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	2b02      	cmp	r3, #2
 8001210:	f77f af47 	ble.w	80010a2 <main+0x11a>
			  }
		  }
	  }
	  HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)PWMData[0], 24 * LED_NUM + 50);
 8001214:	f240 238a 	movw	r3, #650	; 0x28a
 8001218:	4a17      	ldr	r2, [pc, #92]	; (8001278 <main+0x2f0>)
 800121a:	2100      	movs	r1, #0
 800121c:	4822      	ldr	r0, [pc, #136]	; (80012a8 <main+0x320>)
 800121e:	f003 f979 	bl	8004514 <HAL_TIM_PWM_Start_DMA>
	  HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_2, (uint32_t *)PWMData[1], 24 * LED_NUM + 50);
 8001222:	f240 238a 	movw	r3, #650	; 0x28a
 8001226:	4a21      	ldr	r2, [pc, #132]	; (80012ac <main+0x324>)
 8001228:	2104      	movs	r1, #4
 800122a:	481f      	ldr	r0, [pc, #124]	; (80012a8 <main+0x320>)
 800122c:	f003 f972 	bl	8004514 <HAL_TIM_PWM_Start_DMA>
	  HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_3, (uint32_t *)PWMData[2], 24 * LED_NUM + 50);
 8001230:	f240 238a 	movw	r3, #650	; 0x28a
 8001234:	4a1e      	ldr	r2, [pc, #120]	; (80012b0 <main+0x328>)
 8001236:	2108      	movs	r1, #8
 8001238:	481b      	ldr	r0, [pc, #108]	; (80012a8 <main+0x320>)
 800123a:	f003 f96b 	bl	8004514 <HAL_TIM_PWM_Start_DMA>

	  ++cursor;
 800123e:	4b16      	ldr	r3, [pc, #88]	; (8001298 <main+0x310>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	3301      	adds	r3, #1
 8001244:	4a14      	ldr	r2, [pc, #80]	; (8001298 <main+0x310>)
 8001246:	6013      	str	r3, [r2, #0]
	  cursor %= LED_WIDTH;
 8001248:	4b13      	ldr	r3, [pc, #76]	; (8001298 <main+0x310>)
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	4b13      	ldr	r3, [pc, #76]	; (800129c <main+0x314>)
 800124e:	fb83 1302 	smull	r1, r3, r3, r2
 8001252:	4413      	add	r3, r2
 8001254:	1159      	asrs	r1, r3, #5
 8001256:	17d3      	asrs	r3, r2, #31
 8001258:	1ac9      	subs	r1, r1, r3
 800125a:	460b      	mov	r3, r1
 800125c:	011b      	lsls	r3, r3, #4
 800125e:	1a5b      	subs	r3, r3, r1
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	1ad1      	subs	r1, r2, r3
 8001264:	4b0c      	ldr	r3, [pc, #48]	; (8001298 <main+0x310>)
 8001266:	6019      	str	r1, [r3, #0]
	  while(DWT->CYCCNT < loopTime);
 8001268:	bf00      	nop
 800126a:	4b07      	ldr	r3, [pc, #28]	; (8001288 <main+0x300>)
 800126c:	685a      	ldr	r2, [r3, #4]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	429a      	cmp	r2, r3
 8001272:	d3fa      	bcc.n	800126a <main+0x2e2>
	  DWT->CYCCNT = 0;
 8001274:	e70f      	b.n	8001096 <main+0x10e>
 8001276:	bf00      	nop
 8001278:	20001b48 	.word	0x20001b48
 800127c:	00029040 	.word	0x00029040
 8001280:	2000147c 	.word	0x2000147c
 8001284:	e000edf0 	.word	0xe000edf0
 8001288:	e0001000 	.word	0xe0001000
 800128c:	40020000 	.word	0x40020000
 8001290:	20001b44 	.word	0x20001b44
 8001294:	20001434 	.word	0x20001434
 8001298:	20002a88 	.word	0x20002a88
 800129c:	88888889 	.word	0x88888889
 80012a0:	20000000 	.word	0x20000000
 80012a4:	20002a84 	.word	0x20002a84
 80012a8:	200013ec 	.word	0x200013ec
 80012ac:	2000205c 	.word	0x2000205c
 80012b0:	20002570 	.word	0x20002570

080012b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b094      	sub	sp, #80	; 0x50
 80012b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ba:	f107 0320 	add.w	r3, r7, #32
 80012be:	2230      	movs	r2, #48	; 0x30
 80012c0:	2100      	movs	r1, #0
 80012c2:	4618      	mov	r0, r3
 80012c4:	f005 fda4 	bl	8006e10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012c8:	f107 030c 	add.w	r3, r7, #12
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	605a      	str	r2, [r3, #4]
 80012d2:	609a      	str	r2, [r3, #8]
 80012d4:	60da      	str	r2, [r3, #12]
 80012d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012d8:	2300      	movs	r3, #0
 80012da:	60bb      	str	r3, [r7, #8]
 80012dc:	4b28      	ldr	r3, [pc, #160]	; (8001380 <SystemClock_Config+0xcc>)
 80012de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e0:	4a27      	ldr	r2, [pc, #156]	; (8001380 <SystemClock_Config+0xcc>)
 80012e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012e6:	6413      	str	r3, [r2, #64]	; 0x40
 80012e8:	4b25      	ldr	r3, [pc, #148]	; (8001380 <SystemClock_Config+0xcc>)
 80012ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012f0:	60bb      	str	r3, [r7, #8]
 80012f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012f4:	2300      	movs	r3, #0
 80012f6:	607b      	str	r3, [r7, #4]
 80012f8:	4b22      	ldr	r3, [pc, #136]	; (8001384 <SystemClock_Config+0xd0>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a21      	ldr	r2, [pc, #132]	; (8001384 <SystemClock_Config+0xd0>)
 80012fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001302:	6013      	str	r3, [r2, #0]
 8001304:	4b1f      	ldr	r3, [pc, #124]	; (8001384 <SystemClock_Config+0xd0>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800130c:	607b      	str	r3, [r7, #4]
 800130e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001310:	2301      	movs	r3, #1
 8001312:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001314:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001318:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800131a:	2302      	movs	r3, #2
 800131c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800131e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001322:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001324:	2304      	movs	r3, #4
 8001326:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001328:	23a8      	movs	r3, #168	; 0xa8
 800132a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800132c:	2302      	movs	r3, #2
 800132e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001330:	2307      	movs	r3, #7
 8001332:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001334:	f107 0320 	add.w	r3, r7, #32
 8001338:	4618      	mov	r0, r3
 800133a:	f002 fa95 	bl	8003868 <HAL_RCC_OscConfig>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001344:	f000 fb9a 	bl	8001a7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001348:	230f      	movs	r3, #15
 800134a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800134c:	2302      	movs	r3, #2
 800134e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001350:	2300      	movs	r3, #0
 8001352:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001354:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001358:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800135a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800135e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001360:	f107 030c 	add.w	r3, r7, #12
 8001364:	2105      	movs	r1, #5
 8001366:	4618      	mov	r0, r3
 8001368:	f002 fcf6 	bl	8003d58 <HAL_RCC_ClockConfig>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001372:	f000 fb83 	bl	8001a7c <Error_Handler>
  }
}
 8001376:	bf00      	nop
 8001378:	3750      	adds	r7, #80	; 0x50
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	40023800 	.word	0x40023800
 8001384:	40007000 	.word	0x40007000

08001388 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800138c:	4b1f      	ldr	r3, [pc, #124]	; (800140c <MX_ETH_Init+0x84>)
 800138e:	4a20      	ldr	r2, [pc, #128]	; (8001410 <MX_ETH_Init+0x88>)
 8001390:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001392:	4b20      	ldr	r3, [pc, #128]	; (8001414 <MX_ETH_Init+0x8c>)
 8001394:	2200      	movs	r2, #0
 8001396:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001398:	4b1e      	ldr	r3, [pc, #120]	; (8001414 <MX_ETH_Init+0x8c>)
 800139a:	2280      	movs	r2, #128	; 0x80
 800139c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800139e:	4b1d      	ldr	r3, [pc, #116]	; (8001414 <MX_ETH_Init+0x8c>)
 80013a0:	22e1      	movs	r2, #225	; 0xe1
 80013a2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80013a4:	4b1b      	ldr	r3, [pc, #108]	; (8001414 <MX_ETH_Init+0x8c>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80013aa:	4b1a      	ldr	r3, [pc, #104]	; (8001414 <MX_ETH_Init+0x8c>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80013b0:	4b18      	ldr	r3, [pc, #96]	; (8001414 <MX_ETH_Init+0x8c>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80013b6:	4b15      	ldr	r3, [pc, #84]	; (800140c <MX_ETH_Init+0x84>)
 80013b8:	4a16      	ldr	r2, [pc, #88]	; (8001414 <MX_ETH_Init+0x8c>)
 80013ba:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80013bc:	4b13      	ldr	r3, [pc, #76]	; (800140c <MX_ETH_Init+0x84>)
 80013be:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80013c2:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80013c4:	4b11      	ldr	r3, [pc, #68]	; (800140c <MX_ETH_Init+0x84>)
 80013c6:	4a14      	ldr	r2, [pc, #80]	; (8001418 <MX_ETH_Init+0x90>)
 80013c8:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80013ca:	4b10      	ldr	r3, [pc, #64]	; (800140c <MX_ETH_Init+0x84>)
 80013cc:	4a13      	ldr	r2, [pc, #76]	; (800141c <MX_ETH_Init+0x94>)
 80013ce:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80013d0:	4b0e      	ldr	r3, [pc, #56]	; (800140c <MX_ETH_Init+0x84>)
 80013d2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80013d6:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80013d8:	480c      	ldr	r0, [pc, #48]	; (800140c <MX_ETH_Init+0x84>)
 80013da:	f001 fc1b 	bl	8002c14 <HAL_ETH_Init>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80013e4:	f000 fb4a 	bl	8001a7c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80013e8:	2238      	movs	r2, #56	; 0x38
 80013ea:	2100      	movs	r1, #0
 80013ec:	480c      	ldr	r0, [pc, #48]	; (8001420 <MX_ETH_Init+0x98>)
 80013ee:	f005 fd0f 	bl	8006e10 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80013f2:	4b0b      	ldr	r3, [pc, #44]	; (8001420 <MX_ETH_Init+0x98>)
 80013f4:	2221      	movs	r2, #33	; 0x21
 80013f6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80013f8:	4b09      	ldr	r3, [pc, #36]	; (8001420 <MX_ETH_Init+0x98>)
 80013fa:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80013fe:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001400:	4b07      	ldr	r3, [pc, #28]	; (8001420 <MX_ETH_Init+0x98>)
 8001402:	2200      	movs	r2, #0
 8001404:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	2000133c 	.word	0x2000133c
 8001410:	40028000 	.word	0x40028000
 8001414:	20002a94 	.word	0x20002a94
 8001418:	2000129c 	.word	0x2000129c
 800141c:	200011fc 	.word	0x200011fc
 8001420:	200011c4 	.word	0x200011c4

08001424 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b096      	sub	sp, #88	; 0x58
 8001428:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800142a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	605a      	str	r2, [r3, #4]
 8001434:	609a      	str	r2, [r3, #8]
 8001436:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001438:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001442:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	605a      	str	r2, [r3, #4]
 800144c:	609a      	str	r2, [r3, #8]
 800144e:	60da      	str	r2, [r3, #12]
 8001450:	611a      	str	r2, [r3, #16]
 8001452:	615a      	str	r2, [r3, #20]
 8001454:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001456:	1d3b      	adds	r3, r7, #4
 8001458:	2220      	movs	r2, #32
 800145a:	2100      	movs	r1, #0
 800145c:	4618      	mov	r0, r3
 800145e:	f005 fcd7 	bl	8006e10 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001462:	4b4a      	ldr	r3, [pc, #296]	; (800158c <MX_TIM1_Init+0x168>)
 8001464:	4a4a      	ldr	r2, [pc, #296]	; (8001590 <MX_TIM1_Init+0x16c>)
 8001466:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001468:	4b48      	ldr	r3, [pc, #288]	; (800158c <MX_TIM1_Init+0x168>)
 800146a:	2200      	movs	r2, #0
 800146c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800146e:	4b47      	ldr	r3, [pc, #284]	; (800158c <MX_TIM1_Init+0x168>)
 8001470:	2200      	movs	r2, #0
 8001472:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 210-1;
 8001474:	4b45      	ldr	r3, [pc, #276]	; (800158c <MX_TIM1_Init+0x168>)
 8001476:	22d1      	movs	r2, #209	; 0xd1
 8001478:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800147a:	4b44      	ldr	r3, [pc, #272]	; (800158c <MX_TIM1_Init+0x168>)
 800147c:	2200      	movs	r2, #0
 800147e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001480:	4b42      	ldr	r3, [pc, #264]	; (800158c <MX_TIM1_Init+0x168>)
 8001482:	2200      	movs	r2, #0
 8001484:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001486:	4b41      	ldr	r3, [pc, #260]	; (800158c <MX_TIM1_Init+0x168>)
 8001488:	2200      	movs	r2, #0
 800148a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800148c:	483f      	ldr	r0, [pc, #252]	; (800158c <MX_TIM1_Init+0x168>)
 800148e:	f002 fe83 	bl	8004198 <HAL_TIM_Base_Init>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001498:	f000 faf0 	bl	8001a7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800149c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014a0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80014a2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80014a6:	4619      	mov	r1, r3
 80014a8:	4838      	ldr	r0, [pc, #224]	; (800158c <MX_TIM1_Init+0x168>)
 80014aa:	f003 febf 	bl	800522c <HAL_TIM_ConfigClockSource>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80014b4:	f000 fae2 	bl	8001a7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80014b8:	4834      	ldr	r0, [pc, #208]	; (800158c <MX_TIM1_Init+0x168>)
 80014ba:	f002 febc 	bl	8004236 <HAL_TIM_PWM_Init>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80014c4:	f000 fada 	bl	8001a7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014c8:	2300      	movs	r3, #0
 80014ca:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014cc:	2300      	movs	r3, #0
 80014ce:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014d0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80014d4:	4619      	mov	r1, r3
 80014d6:	482d      	ldr	r0, [pc, #180]	; (800158c <MX_TIM1_Init+0x168>)
 80014d8:	f004 fdd0 	bl	800607c <HAL_TIMEx_MasterConfigSynchronization>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80014e2:	f000 facb 	bl	8001a7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014e6:	2360      	movs	r3, #96	; 0x60
 80014e8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80014ea:	2300      	movs	r3, #0
 80014ec:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014ee:	2300      	movs	r3, #0
 80014f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80014f2:	2300      	movs	r3, #0
 80014f4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014f6:	2300      	movs	r3, #0
 80014f8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80014fa:	2300      	movs	r3, #0
 80014fc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014fe:	2300      	movs	r3, #0
 8001500:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001502:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001506:	2200      	movs	r2, #0
 8001508:	4619      	mov	r1, r3
 800150a:	4820      	ldr	r0, [pc, #128]	; (800158c <MX_TIM1_Init+0x168>)
 800150c:	f003 fdcc 	bl	80050a8 <HAL_TIM_PWM_ConfigChannel>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001516:	f000 fab1 	bl	8001a7c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800151a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800151e:	2204      	movs	r2, #4
 8001520:	4619      	mov	r1, r3
 8001522:	481a      	ldr	r0, [pc, #104]	; (800158c <MX_TIM1_Init+0x168>)
 8001524:	f003 fdc0 	bl	80050a8 <HAL_TIM_PWM_ConfigChannel>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 800152e:	f000 faa5 	bl	8001a7c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001532:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001536:	2208      	movs	r2, #8
 8001538:	4619      	mov	r1, r3
 800153a:	4814      	ldr	r0, [pc, #80]	; (800158c <MX_TIM1_Init+0x168>)
 800153c:	f003 fdb4 	bl	80050a8 <HAL_TIM_PWM_ConfigChannel>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8001546:	f000 fa99 	bl	8001a7c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800154a:	2300      	movs	r3, #0
 800154c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800154e:	2300      	movs	r3, #0
 8001550:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001552:	2300      	movs	r3, #0
 8001554:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001556:	2300      	movs	r3, #0
 8001558:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800155a:	2300      	movs	r3, #0
 800155c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800155e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001562:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001564:	2300      	movs	r3, #0
 8001566:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001568:	1d3b      	adds	r3, r7, #4
 800156a:	4619      	mov	r1, r3
 800156c:	4807      	ldr	r0, [pc, #28]	; (800158c <MX_TIM1_Init+0x168>)
 800156e:	f004 fe01 	bl	8006174 <HAL_TIMEx_ConfigBreakDeadTime>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 8001578:	f000 fa80 	bl	8001a7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800157c:	4803      	ldr	r0, [pc, #12]	; (800158c <MX_TIM1_Init+0x168>)
 800157e:	f000 fc8f 	bl	8001ea0 <HAL_TIM_MspPostInit>

}
 8001582:	bf00      	nop
 8001584:	3758      	adds	r7, #88	; 0x58
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	200013ec 	.word	0x200013ec
 8001590:	40010000 	.word	0x40010000

08001594 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b08e      	sub	sp, #56	; 0x38
 8001598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800159a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800159e:	2200      	movs	r2, #0
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	605a      	str	r2, [r3, #4]
 80015a4:	609a      	str	r2, [r3, #8]
 80015a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015a8:	f107 0320 	add.w	r3, r7, #32
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015b2:	1d3b      	adds	r3, r7, #4
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	605a      	str	r2, [r3, #4]
 80015ba:	609a      	str	r2, [r3, #8]
 80015bc:	60da      	str	r2, [r3, #12]
 80015be:	611a      	str	r2, [r3, #16]
 80015c0:	615a      	str	r2, [r3, #20]
 80015c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015c4:	4b2d      	ldr	r3, [pc, #180]	; (800167c <MX_TIM2_Init+0xe8>)
 80015c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015ca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 80015cc:	4b2b      	ldr	r3, [pc, #172]	; (800167c <MX_TIM2_Init+0xe8>)
 80015ce:	f240 3247 	movw	r2, #839	; 0x347
 80015d2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015d4:	4b29      	ldr	r3, [pc, #164]	; (800167c <MX_TIM2_Init+0xe8>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000-1;
 80015da:	4b28      	ldr	r3, [pc, #160]	; (800167c <MX_TIM2_Init+0xe8>)
 80015dc:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80015e0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015e2:	4b26      	ldr	r3, [pc, #152]	; (800167c <MX_TIM2_Init+0xe8>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015e8:	4b24      	ldr	r3, [pc, #144]	; (800167c <MX_TIM2_Init+0xe8>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015ee:	4823      	ldr	r0, [pc, #140]	; (800167c <MX_TIM2_Init+0xe8>)
 80015f0:	f002 fdd2 	bl	8004198 <HAL_TIM_Base_Init>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80015fa:	f000 fa3f 	bl	8001a7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001602:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001604:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001608:	4619      	mov	r1, r3
 800160a:	481c      	ldr	r0, [pc, #112]	; (800167c <MX_TIM2_Init+0xe8>)
 800160c:	f003 fe0e 	bl	800522c <HAL_TIM_ConfigClockSource>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001616:	f000 fa31 	bl	8001a7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800161a:	4818      	ldr	r0, [pc, #96]	; (800167c <MX_TIM2_Init+0xe8>)
 800161c:	f002 fe0b 	bl	8004236 <HAL_TIM_PWM_Init>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001626:	f000 fa29 	bl	8001a7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800162a:	2300      	movs	r3, #0
 800162c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800162e:	2300      	movs	r3, #0
 8001630:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001632:	f107 0320 	add.w	r3, r7, #32
 8001636:	4619      	mov	r1, r3
 8001638:	4810      	ldr	r0, [pc, #64]	; (800167c <MX_TIM2_Init+0xe8>)
 800163a:	f004 fd1f 	bl	800607c <HAL_TIMEx_MasterConfigSynchronization>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001644:	f000 fa1a 	bl	8001a7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001648:	2360      	movs	r3, #96	; 0x60
 800164a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800164c:	2300      	movs	r3, #0
 800164e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001650:	2300      	movs	r3, #0
 8001652:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001654:	2300      	movs	r3, #0
 8001656:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001658:	1d3b      	adds	r3, r7, #4
 800165a:	2200      	movs	r2, #0
 800165c:	4619      	mov	r1, r3
 800165e:	4807      	ldr	r0, [pc, #28]	; (800167c <MX_TIM2_Init+0xe8>)
 8001660:	f003 fd22 	bl	80050a8 <HAL_TIM_PWM_ConfigChannel>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800166a:	f000 fa07 	bl	8001a7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800166e:	4803      	ldr	r0, [pc, #12]	; (800167c <MX_TIM2_Init+0xe8>)
 8001670:	f000 fc16 	bl	8001ea0 <HAL_TIM_MspPostInit>

}
 8001674:	bf00      	nop
 8001676:	3738      	adds	r7, #56	; 0x38
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	20001434 	.word	0x20001434

08001680 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b090      	sub	sp, #64	; 0x40
 8001684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001686:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800168a:	2200      	movs	r2, #0
 800168c:	601a      	str	r2, [r3, #0]
 800168e:	605a      	str	r2, [r3, #4]
 8001690:	609a      	str	r2, [r3, #8]
 8001692:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001694:	f107 031c 	add.w	r3, r7, #28
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	605a      	str	r2, [r3, #4]
 800169e:	609a      	str	r2, [r3, #8]
 80016a0:	60da      	str	r2, [r3, #12]
 80016a2:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80016a4:	f107 030c 	add.w	r3, r7, #12
 80016a8:	2200      	movs	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]
 80016ac:	605a      	str	r2, [r3, #4]
 80016ae:	609a      	str	r2, [r3, #8]
 80016b0:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016b2:	1d3b      	adds	r3, r7, #4
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016ba:	4b3e      	ldr	r3, [pc, #248]	; (80017b4 <MX_TIM3_Init+0x134>)
 80016bc:	4a3e      	ldr	r2, [pc, #248]	; (80017b8 <MX_TIM3_Init+0x138>)
 80016be:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 80016c0:	4b3c      	ldr	r3, [pc, #240]	; (80017b4 <MX_TIM3_Init+0x134>)
 80016c2:	2253      	movs	r2, #83	; 0x53
 80016c4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016c6:	4b3b      	ldr	r3, [pc, #236]	; (80017b4 <MX_TIM3_Init+0x134>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80016cc:	4b39      	ldr	r3, [pc, #228]	; (80017b4 <MX_TIM3_Init+0x134>)
 80016ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016d2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016d4:	4b37      	ldr	r3, [pc, #220]	; (80017b4 <MX_TIM3_Init+0x134>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016da:	4b36      	ldr	r3, [pc, #216]	; (80017b4 <MX_TIM3_Init+0x134>)
 80016dc:	2200      	movs	r2, #0
 80016de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80016e0:	4834      	ldr	r0, [pc, #208]	; (80017b4 <MX_TIM3_Init+0x134>)
 80016e2:	f002 fd59 	bl	8004198 <HAL_TIM_Base_Init>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80016ec:	f000 f9c6 	bl	8001a7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016f4:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80016f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80016fa:	4619      	mov	r1, r3
 80016fc:	482d      	ldr	r0, [pc, #180]	; (80017b4 <MX_TIM3_Init+0x134>)
 80016fe:	f003 fd95 	bl	800522c <HAL_TIM_ConfigClockSource>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001708:	f000 f9b8 	bl	8001a7c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800170c:	4829      	ldr	r0, [pc, #164]	; (80017b4 <MX_TIM3_Init+0x134>)
 800170e:	f003 f8c9 	bl	80048a4 <HAL_TIM_IC_Init>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001718:	f000 f9b0 	bl	8001a7c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800171c:	2304      	movs	r3, #4
 800171e:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001720:	2350      	movs	r3, #80	; 0x50
 8001722:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001724:	2302      	movs	r3, #2
 8001726:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001728:	2300      	movs	r3, #0
 800172a:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 800172c:	2300      	movs	r3, #0
 800172e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8001730:	f107 031c 	add.w	r3, r7, #28
 8001734:	4619      	mov	r1, r3
 8001736:	481f      	ldr	r0, [pc, #124]	; (80017b4 <MX_TIM3_Init+0x134>)
 8001738:	f003 fe3f 	bl	80053ba <HAL_TIM_SlaveConfigSynchro>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <MX_TIM3_Init+0xc6>
  {
    Error_Handler();
 8001742:	f000 f99b 	bl	8001a7c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001746:	2302      	movs	r3, #2
 8001748:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800174a:	2301      	movs	r3, #1
 800174c:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800174e:	2300      	movs	r3, #0
 8001750:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001752:	2300      	movs	r3, #0
 8001754:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001756:	f107 030c 	add.w	r3, r7, #12
 800175a:	2200      	movs	r2, #0
 800175c:	4619      	mov	r1, r3
 800175e:	4815      	ldr	r0, [pc, #84]	; (80017b4 <MX_TIM3_Init+0x134>)
 8001760:	f003 fc06 	bl	8004f70 <HAL_TIM_IC_ConfigChannel>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 800176a:	f000 f987 	bl	8001a7c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800176e:	2300      	movs	r3, #0
 8001770:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001772:	2302      	movs	r3, #2
 8001774:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001776:	f107 030c 	add.w	r3, r7, #12
 800177a:	2204      	movs	r2, #4
 800177c:	4619      	mov	r1, r3
 800177e:	480d      	ldr	r0, [pc, #52]	; (80017b4 <MX_TIM3_Init+0x134>)
 8001780:	f003 fbf6 	bl	8004f70 <HAL_TIM_IC_ConfigChannel>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <MX_TIM3_Init+0x10e>
  {
    Error_Handler();
 800178a:	f000 f977 	bl	8001a7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800178e:	2300      	movs	r3, #0
 8001790:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001792:	2300      	movs	r3, #0
 8001794:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001796:	1d3b      	adds	r3, r7, #4
 8001798:	4619      	mov	r1, r3
 800179a:	4806      	ldr	r0, [pc, #24]	; (80017b4 <MX_TIM3_Init+0x134>)
 800179c:	f004 fc6e 	bl	800607c <HAL_TIMEx_MasterConfigSynchronization>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <MX_TIM3_Init+0x12a>
  {
    Error_Handler();
 80017a6:	f000 f969 	bl	8001a7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80017aa:	bf00      	nop
 80017ac:	3740      	adds	r7, #64	; 0x40
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	2000147c 	.word	0x2000147c
 80017b8:	40000400 	.word	0x40000400

080017bc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80017c0:	4b11      	ldr	r3, [pc, #68]	; (8001808 <MX_USART3_UART_Init+0x4c>)
 80017c2:	4a12      	ldr	r2, [pc, #72]	; (800180c <MX_USART3_UART_Init+0x50>)
 80017c4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80017c6:	4b10      	ldr	r3, [pc, #64]	; (8001808 <MX_USART3_UART_Init+0x4c>)
 80017c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017cc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80017ce:	4b0e      	ldr	r3, [pc, #56]	; (8001808 <MX_USART3_UART_Init+0x4c>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80017d4:	4b0c      	ldr	r3, [pc, #48]	; (8001808 <MX_USART3_UART_Init+0x4c>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80017da:	4b0b      	ldr	r3, [pc, #44]	; (8001808 <MX_USART3_UART_Init+0x4c>)
 80017dc:	2200      	movs	r2, #0
 80017de:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80017e0:	4b09      	ldr	r3, [pc, #36]	; (8001808 <MX_USART3_UART_Init+0x4c>)
 80017e2:	220c      	movs	r2, #12
 80017e4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017e6:	4b08      	ldr	r3, [pc, #32]	; (8001808 <MX_USART3_UART_Init+0x4c>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80017ec:	4b06      	ldr	r3, [pc, #24]	; (8001808 <MX_USART3_UART_Init+0x4c>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80017f2:	4805      	ldr	r0, [pc, #20]	; (8001808 <MX_USART3_UART_Init+0x4c>)
 80017f4:	f004 fd24 	bl	8006240 <HAL_UART_Init>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80017fe:	f000 f93d 	bl	8001a7c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001802:	bf00      	nop
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	200015e4 	.word	0x200015e4
 800180c:	40004800 	.word	0x40004800

08001810 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001814:	4b14      	ldr	r3, [pc, #80]	; (8001868 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001816:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800181a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800181c:	4b12      	ldr	r3, [pc, #72]	; (8001868 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800181e:	2204      	movs	r2, #4
 8001820:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001822:	4b11      	ldr	r3, [pc, #68]	; (8001868 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001824:	2202      	movs	r2, #2
 8001826:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001828:	4b0f      	ldr	r3, [pc, #60]	; (8001868 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800182a:	2200      	movs	r2, #0
 800182c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800182e:	4b0e      	ldr	r3, [pc, #56]	; (8001868 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001830:	2202      	movs	r2, #2
 8001832:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001834:	4b0c      	ldr	r3, [pc, #48]	; (8001868 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001836:	2201      	movs	r2, #1
 8001838:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800183a:	4b0b      	ldr	r3, [pc, #44]	; (8001868 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800183c:	2200      	movs	r2, #0
 800183e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001840:	4b09      	ldr	r3, [pc, #36]	; (8001868 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001842:	2200      	movs	r2, #0
 8001844:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001846:	4b08      	ldr	r3, [pc, #32]	; (8001868 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001848:	2201      	movs	r2, #1
 800184a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800184c:	4b06      	ldr	r3, [pc, #24]	; (8001868 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800184e:	2200      	movs	r2, #0
 8001850:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001852:	4805      	ldr	r0, [pc, #20]	; (8001868 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001854:	f001 feea 	bl	800362c <HAL_PCD_Init>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800185e:	f000 f90d 	bl	8001a7c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001862:	bf00      	nop
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	20001628 	.word	0x20001628

0800186c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001872:	2300      	movs	r3, #0
 8001874:	607b      	str	r3, [r7, #4]
 8001876:	4b14      	ldr	r3, [pc, #80]	; (80018c8 <MX_DMA_Init+0x5c>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	4a13      	ldr	r2, [pc, #76]	; (80018c8 <MX_DMA_Init+0x5c>)
 800187c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001880:	6313      	str	r3, [r2, #48]	; 0x30
 8001882:	4b11      	ldr	r3, [pc, #68]	; (80018c8 <MX_DMA_Init+0x5c>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800188a:	607b      	str	r3, [r7, #4]
 800188c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800188e:	2200      	movs	r2, #0
 8001890:	2100      	movs	r1, #0
 8001892:	2039      	movs	r0, #57	; 0x39
 8001894:	f000 fe17 	bl	80024c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001898:	2039      	movs	r0, #57	; 0x39
 800189a:	f000 fe30 	bl	80024fe <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800189e:	2200      	movs	r2, #0
 80018a0:	2100      	movs	r1, #0
 80018a2:	203a      	movs	r0, #58	; 0x3a
 80018a4:	f000 fe0f 	bl	80024c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80018a8:	203a      	movs	r0, #58	; 0x3a
 80018aa:	f000 fe28 	bl	80024fe <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80018ae:	2200      	movs	r2, #0
 80018b0:	2100      	movs	r1, #0
 80018b2:	2045      	movs	r0, #69	; 0x45
 80018b4:	f000 fe07 	bl	80024c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80018b8:	2045      	movs	r0, #69	; 0x45
 80018ba:	f000 fe20 	bl	80024fe <HAL_NVIC_EnableIRQ>

}
 80018be:	bf00      	nop
 80018c0:	3708      	adds	r7, #8
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	40023800 	.word	0x40023800

080018cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b08c      	sub	sp, #48	; 0x30
 80018d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d2:	f107 031c 	add.w	r3, r7, #28
 80018d6:	2200      	movs	r2, #0
 80018d8:	601a      	str	r2, [r3, #0]
 80018da:	605a      	str	r2, [r3, #4]
 80018dc:	609a      	str	r2, [r3, #8]
 80018de:	60da      	str	r2, [r3, #12]
 80018e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	61bb      	str	r3, [r7, #24]
 80018e6:	4b60      	ldr	r3, [pc, #384]	; (8001a68 <MX_GPIO_Init+0x19c>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	4a5f      	ldr	r2, [pc, #380]	; (8001a68 <MX_GPIO_Init+0x19c>)
 80018ec:	f043 0304 	orr.w	r3, r3, #4
 80018f0:	6313      	str	r3, [r2, #48]	; 0x30
 80018f2:	4b5d      	ldr	r3, [pc, #372]	; (8001a68 <MX_GPIO_Init+0x19c>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	f003 0304 	and.w	r3, r3, #4
 80018fa:	61bb      	str	r3, [r7, #24]
 80018fc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018fe:	2300      	movs	r3, #0
 8001900:	617b      	str	r3, [r7, #20]
 8001902:	4b59      	ldr	r3, [pc, #356]	; (8001a68 <MX_GPIO_Init+0x19c>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001906:	4a58      	ldr	r2, [pc, #352]	; (8001a68 <MX_GPIO_Init+0x19c>)
 8001908:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800190c:	6313      	str	r3, [r2, #48]	; 0x30
 800190e:	4b56      	ldr	r3, [pc, #344]	; (8001a68 <MX_GPIO_Init+0x19c>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001916:	617b      	str	r3, [r7, #20]
 8001918:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800191a:	2300      	movs	r3, #0
 800191c:	613b      	str	r3, [r7, #16]
 800191e:	4b52      	ldr	r3, [pc, #328]	; (8001a68 <MX_GPIO_Init+0x19c>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001922:	4a51      	ldr	r2, [pc, #324]	; (8001a68 <MX_GPIO_Init+0x19c>)
 8001924:	f043 0301 	orr.w	r3, r3, #1
 8001928:	6313      	str	r3, [r2, #48]	; 0x30
 800192a:	4b4f      	ldr	r3, [pc, #316]	; (8001a68 <MX_GPIO_Init+0x19c>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	613b      	str	r3, [r7, #16]
 8001934:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001936:	2300      	movs	r3, #0
 8001938:	60fb      	str	r3, [r7, #12]
 800193a:	4b4b      	ldr	r3, [pc, #300]	; (8001a68 <MX_GPIO_Init+0x19c>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	4a4a      	ldr	r2, [pc, #296]	; (8001a68 <MX_GPIO_Init+0x19c>)
 8001940:	f043 0302 	orr.w	r3, r3, #2
 8001944:	6313      	str	r3, [r2, #48]	; 0x30
 8001946:	4b48      	ldr	r3, [pc, #288]	; (8001a68 <MX_GPIO_Init+0x19c>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194a:	f003 0302 	and.w	r3, r3, #2
 800194e:	60fb      	str	r3, [r7, #12]
 8001950:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001952:	2300      	movs	r3, #0
 8001954:	60bb      	str	r3, [r7, #8]
 8001956:	4b44      	ldr	r3, [pc, #272]	; (8001a68 <MX_GPIO_Init+0x19c>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195a:	4a43      	ldr	r2, [pc, #268]	; (8001a68 <MX_GPIO_Init+0x19c>)
 800195c:	f043 0310 	orr.w	r3, r3, #16
 8001960:	6313      	str	r3, [r2, #48]	; 0x30
 8001962:	4b41      	ldr	r3, [pc, #260]	; (8001a68 <MX_GPIO_Init+0x19c>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001966:	f003 0310 	and.w	r3, r3, #16
 800196a:	60bb      	str	r3, [r7, #8]
 800196c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800196e:	2300      	movs	r3, #0
 8001970:	607b      	str	r3, [r7, #4]
 8001972:	4b3d      	ldr	r3, [pc, #244]	; (8001a68 <MX_GPIO_Init+0x19c>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001976:	4a3c      	ldr	r2, [pc, #240]	; (8001a68 <MX_GPIO_Init+0x19c>)
 8001978:	f043 0308 	orr.w	r3, r3, #8
 800197c:	6313      	str	r3, [r2, #48]	; 0x30
 800197e:	4b3a      	ldr	r3, [pc, #232]	; (8001a68 <MX_GPIO_Init+0x19c>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	f003 0308 	and.w	r3, r3, #8
 8001986:	607b      	str	r3, [r7, #4]
 8001988:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800198a:	2300      	movs	r3, #0
 800198c:	603b      	str	r3, [r7, #0]
 800198e:	4b36      	ldr	r3, [pc, #216]	; (8001a68 <MX_GPIO_Init+0x19c>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001992:	4a35      	ldr	r2, [pc, #212]	; (8001a68 <MX_GPIO_Init+0x19c>)
 8001994:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001998:	6313      	str	r3, [r2, #48]	; 0x30
 800199a:	4b33      	ldr	r3, [pc, #204]	; (8001a68 <MX_GPIO_Init+0x19c>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019a2:	603b      	str	r3, [r7, #0]
 80019a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 80019a6:	2200      	movs	r2, #0
 80019a8:	2108      	movs	r1, #8
 80019aa:	4830      	ldr	r0, [pc, #192]	; (8001a6c <MX_GPIO_Init+0x1a0>)
 80019ac:	f001 fdf2 	bl	8003594 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80019b0:	2200      	movs	r2, #0
 80019b2:	f244 0181 	movw	r1, #16513	; 0x4081
 80019b6:	482e      	ldr	r0, [pc, #184]	; (8001a70 <MX_GPIO_Init+0x1a4>)
 80019b8:	f001 fdec 	bl	8003594 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80019bc:	2200      	movs	r2, #0
 80019be:	2140      	movs	r1, #64	; 0x40
 80019c0:	482c      	ldr	r0, [pc, #176]	; (8001a74 <MX_GPIO_Init+0x1a8>)
 80019c2:	f001 fde7 	bl	8003594 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80019c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019cc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80019d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80019d2:	2302      	movs	r3, #2
 80019d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80019d6:	f107 031c 	add.w	r3, r7, #28
 80019da:	4619      	mov	r1, r3
 80019dc:	4826      	ldr	r0, [pc, #152]	; (8001a78 <MX_GPIO_Init+0x1ac>)
 80019de:	f001 fc2d 	bl	800323c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80019e2:	2308      	movs	r3, #8
 80019e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019e6:	2301      	movs	r3, #1
 80019e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ea:	2300      	movs	r3, #0
 80019ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ee:	2300      	movs	r3, #0
 80019f0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f2:	f107 031c 	add.w	r3, r7, #28
 80019f6:	4619      	mov	r1, r3
 80019f8:	481c      	ldr	r0, [pc, #112]	; (8001a6c <MX_GPIO_Init+0x1a0>)
 80019fa:	f001 fc1f 	bl	800323c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80019fe:	f244 0381 	movw	r3, #16513	; 0x4081
 8001a02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a04:	2301      	movs	r3, #1
 8001a06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a10:	f107 031c 	add.w	r3, r7, #28
 8001a14:	4619      	mov	r1, r3
 8001a16:	4816      	ldr	r0, [pc, #88]	; (8001a70 <MX_GPIO_Init+0x1a4>)
 8001a18:	f001 fc10 	bl	800323c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001a1c:	2340      	movs	r3, #64	; 0x40
 8001a1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a20:	2301      	movs	r3, #1
 8001a22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a24:	2300      	movs	r3, #0
 8001a26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001a2c:	f107 031c 	add.w	r3, r7, #28
 8001a30:	4619      	mov	r1, r3
 8001a32:	4810      	ldr	r0, [pc, #64]	; (8001a74 <MX_GPIO_Init+0x1a8>)
 8001a34:	f001 fc02 	bl	800323c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001a38:	2380      	movs	r3, #128	; 0x80
 8001a3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a40:	2300      	movs	r3, #0
 8001a42:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001a44:	f107 031c 	add.w	r3, r7, #28
 8001a48:	4619      	mov	r1, r3
 8001a4a:	480a      	ldr	r0, [pc, #40]	; (8001a74 <MX_GPIO_Init+0x1a8>)
 8001a4c:	f001 fbf6 	bl	800323c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001a50:	2200      	movs	r2, #0
 8001a52:	2100      	movs	r1, #0
 8001a54:	2028      	movs	r0, #40	; 0x28
 8001a56:	f000 fd36 	bl	80024c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001a5a:	2028      	movs	r0, #40	; 0x28
 8001a5c:	f000 fd4f 	bl	80024fe <HAL_NVIC_EnableIRQ>

}
 8001a60:	bf00      	nop
 8001a62:	3730      	adds	r7, #48	; 0x30
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	40023800 	.word	0x40023800
 8001a6c:	40020000 	.word	0x40020000
 8001a70:	40020400 	.word	0x40020400
 8001a74:	40021800 	.word	0x40021800
 8001a78:	40020800 	.word	0x40020800

08001a7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a80:	b672      	cpsid	i
}
 8001a82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a84:	e7fe      	b.n	8001a84 <Error_Handler+0x8>
	...

08001a88 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a8e:	2300      	movs	r3, #0
 8001a90:	607b      	str	r3, [r7, #4]
 8001a92:	4b10      	ldr	r3, [pc, #64]	; (8001ad4 <HAL_MspInit+0x4c>)
 8001a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a96:	4a0f      	ldr	r2, [pc, #60]	; (8001ad4 <HAL_MspInit+0x4c>)
 8001a98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a9c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a9e:	4b0d      	ldr	r3, [pc, #52]	; (8001ad4 <HAL_MspInit+0x4c>)
 8001aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aa6:	607b      	str	r3, [r7, #4]
 8001aa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	603b      	str	r3, [r7, #0]
 8001aae:	4b09      	ldr	r3, [pc, #36]	; (8001ad4 <HAL_MspInit+0x4c>)
 8001ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab2:	4a08      	ldr	r2, [pc, #32]	; (8001ad4 <HAL_MspInit+0x4c>)
 8001ab4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ab8:	6413      	str	r3, [r2, #64]	; 0x40
 8001aba:	4b06      	ldr	r3, [pc, #24]	; (8001ad4 <HAL_MspInit+0x4c>)
 8001abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ac2:	603b      	str	r3, [r7, #0]
 8001ac4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ac6:	bf00      	nop
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	40023800 	.word	0x40023800

08001ad8 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b08e      	sub	sp, #56	; 0x38
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	605a      	str	r2, [r3, #4]
 8001aea:	609a      	str	r2, [r3, #8]
 8001aec:	60da      	str	r2, [r3, #12]
 8001aee:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a55      	ldr	r2, [pc, #340]	; (8001c4c <HAL_ETH_MspInit+0x174>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	f040 80a4 	bne.w	8001c44 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001afc:	2300      	movs	r3, #0
 8001afe:	623b      	str	r3, [r7, #32]
 8001b00:	4b53      	ldr	r3, [pc, #332]	; (8001c50 <HAL_ETH_MspInit+0x178>)
 8001b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b04:	4a52      	ldr	r2, [pc, #328]	; (8001c50 <HAL_ETH_MspInit+0x178>)
 8001b06:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b0a:	6313      	str	r3, [r2, #48]	; 0x30
 8001b0c:	4b50      	ldr	r3, [pc, #320]	; (8001c50 <HAL_ETH_MspInit+0x178>)
 8001b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b14:	623b      	str	r3, [r7, #32]
 8001b16:	6a3b      	ldr	r3, [r7, #32]
 8001b18:	2300      	movs	r3, #0
 8001b1a:	61fb      	str	r3, [r7, #28]
 8001b1c:	4b4c      	ldr	r3, [pc, #304]	; (8001c50 <HAL_ETH_MspInit+0x178>)
 8001b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b20:	4a4b      	ldr	r2, [pc, #300]	; (8001c50 <HAL_ETH_MspInit+0x178>)
 8001b22:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001b26:	6313      	str	r3, [r2, #48]	; 0x30
 8001b28:	4b49      	ldr	r3, [pc, #292]	; (8001c50 <HAL_ETH_MspInit+0x178>)
 8001b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b30:	61fb      	str	r3, [r7, #28]
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	2300      	movs	r3, #0
 8001b36:	61bb      	str	r3, [r7, #24]
 8001b38:	4b45      	ldr	r3, [pc, #276]	; (8001c50 <HAL_ETH_MspInit+0x178>)
 8001b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3c:	4a44      	ldr	r2, [pc, #272]	; (8001c50 <HAL_ETH_MspInit+0x178>)
 8001b3e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001b42:	6313      	str	r3, [r2, #48]	; 0x30
 8001b44:	4b42      	ldr	r3, [pc, #264]	; (8001c50 <HAL_ETH_MspInit+0x178>)
 8001b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001b4c:	61bb      	str	r3, [r7, #24]
 8001b4e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b50:	2300      	movs	r3, #0
 8001b52:	617b      	str	r3, [r7, #20]
 8001b54:	4b3e      	ldr	r3, [pc, #248]	; (8001c50 <HAL_ETH_MspInit+0x178>)
 8001b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b58:	4a3d      	ldr	r2, [pc, #244]	; (8001c50 <HAL_ETH_MspInit+0x178>)
 8001b5a:	f043 0304 	orr.w	r3, r3, #4
 8001b5e:	6313      	str	r3, [r2, #48]	; 0x30
 8001b60:	4b3b      	ldr	r3, [pc, #236]	; (8001c50 <HAL_ETH_MspInit+0x178>)
 8001b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b64:	f003 0304 	and.w	r3, r3, #4
 8001b68:	617b      	str	r3, [r7, #20]
 8001b6a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	613b      	str	r3, [r7, #16]
 8001b70:	4b37      	ldr	r3, [pc, #220]	; (8001c50 <HAL_ETH_MspInit+0x178>)
 8001b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b74:	4a36      	ldr	r2, [pc, #216]	; (8001c50 <HAL_ETH_MspInit+0x178>)
 8001b76:	f043 0301 	orr.w	r3, r3, #1
 8001b7a:	6313      	str	r3, [r2, #48]	; 0x30
 8001b7c:	4b34      	ldr	r3, [pc, #208]	; (8001c50 <HAL_ETH_MspInit+0x178>)
 8001b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b80:	f003 0301 	and.w	r3, r3, #1
 8001b84:	613b      	str	r3, [r7, #16]
 8001b86:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b88:	2300      	movs	r3, #0
 8001b8a:	60fb      	str	r3, [r7, #12]
 8001b8c:	4b30      	ldr	r3, [pc, #192]	; (8001c50 <HAL_ETH_MspInit+0x178>)
 8001b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b90:	4a2f      	ldr	r2, [pc, #188]	; (8001c50 <HAL_ETH_MspInit+0x178>)
 8001b92:	f043 0302 	orr.w	r3, r3, #2
 8001b96:	6313      	str	r3, [r2, #48]	; 0x30
 8001b98:	4b2d      	ldr	r3, [pc, #180]	; (8001c50 <HAL_ETH_MspInit+0x178>)
 8001b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9c:	f003 0302 	and.w	r3, r3, #2
 8001ba0:	60fb      	str	r3, [r7, #12]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	60bb      	str	r3, [r7, #8]
 8001ba8:	4b29      	ldr	r3, [pc, #164]	; (8001c50 <HAL_ETH_MspInit+0x178>)
 8001baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bac:	4a28      	ldr	r2, [pc, #160]	; (8001c50 <HAL_ETH_MspInit+0x178>)
 8001bae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bb2:	6313      	str	r3, [r2, #48]	; 0x30
 8001bb4:	4b26      	ldr	r3, [pc, #152]	; (8001c50 <HAL_ETH_MspInit+0x178>)
 8001bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bbc:	60bb      	str	r3, [r7, #8]
 8001bbe:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001bc0:	2332      	movs	r3, #50	; 0x32
 8001bc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001bd0:	230b      	movs	r3, #11
 8001bd2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bd8:	4619      	mov	r1, r3
 8001bda:	481e      	ldr	r0, [pc, #120]	; (8001c54 <HAL_ETH_MspInit+0x17c>)
 8001bdc:	f001 fb2e 	bl	800323c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001be0:	2386      	movs	r3, #134	; 0x86
 8001be2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be4:	2302      	movs	r3, #2
 8001be6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be8:	2300      	movs	r3, #0
 8001bea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bec:	2303      	movs	r3, #3
 8001bee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001bf0:	230b      	movs	r3, #11
 8001bf2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4817      	ldr	r0, [pc, #92]	; (8001c58 <HAL_ETH_MspInit+0x180>)
 8001bfc:	f001 fb1e 	bl	800323c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001c00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c06:	2302      	movs	r3, #2
 8001c08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c12:	230b      	movs	r3, #11
 8001c14:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001c16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	480f      	ldr	r0, [pc, #60]	; (8001c5c <HAL_ETH_MspInit+0x184>)
 8001c1e:	f001 fb0d 	bl	800323c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001c22:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001c26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c28:	2302      	movs	r3, #2
 8001c2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c30:	2303      	movs	r3, #3
 8001c32:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c34:	230b      	movs	r3, #11
 8001c36:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	4808      	ldr	r0, [pc, #32]	; (8001c60 <HAL_ETH_MspInit+0x188>)
 8001c40:	f001 fafc 	bl	800323c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001c44:	bf00      	nop
 8001c46:	3738      	adds	r7, #56	; 0x38
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	40028000 	.word	0x40028000
 8001c50:	40023800 	.word	0x40023800
 8001c54:	40020800 	.word	0x40020800
 8001c58:	40020000 	.word	0x40020000
 8001c5c:	40020400 	.word	0x40020400
 8001c60:	40021800 	.word	0x40021800

08001c64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b08c      	sub	sp, #48	; 0x30
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c6c:	f107 031c 	add.w	r3, r7, #28
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	605a      	str	r2, [r3, #4]
 8001c76:	609a      	str	r2, [r3, #8]
 8001c78:	60da      	str	r2, [r3, #12]
 8001c7a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a7d      	ldr	r2, [pc, #500]	; (8001e78 <HAL_TIM_Base_MspInit+0x214>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	f040 809f 	bne.w	8001dc6 <HAL_TIM_Base_MspInit+0x162>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c88:	2300      	movs	r3, #0
 8001c8a:	61bb      	str	r3, [r7, #24]
 8001c8c:	4b7b      	ldr	r3, [pc, #492]	; (8001e7c <HAL_TIM_Base_MspInit+0x218>)
 8001c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c90:	4a7a      	ldr	r2, [pc, #488]	; (8001e7c <HAL_TIM_Base_MspInit+0x218>)
 8001c92:	f043 0301 	orr.w	r3, r3, #1
 8001c96:	6453      	str	r3, [r2, #68]	; 0x44
 8001c98:	4b78      	ldr	r3, [pc, #480]	; (8001e7c <HAL_TIM_Base_MspInit+0x218>)
 8001c9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9c:	f003 0301 	and.w	r3, r3, #1
 8001ca0:	61bb      	str	r3, [r7, #24]
 8001ca2:	69bb      	ldr	r3, [r7, #24]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8001ca4:	4b76      	ldr	r3, [pc, #472]	; (8001e80 <HAL_TIM_Base_MspInit+0x21c>)
 8001ca6:	4a77      	ldr	r2, [pc, #476]	; (8001e84 <HAL_TIM_Base_MspInit+0x220>)
 8001ca8:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8001caa:	4b75      	ldr	r3, [pc, #468]	; (8001e80 <HAL_TIM_Base_MspInit+0x21c>)
 8001cac:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8001cb0:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001cb2:	4b73      	ldr	r3, [pc, #460]	; (8001e80 <HAL_TIM_Base_MspInit+0x21c>)
 8001cb4:	2240      	movs	r2, #64	; 0x40
 8001cb6:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cb8:	4b71      	ldr	r3, [pc, #452]	; (8001e80 <HAL_TIM_Base_MspInit+0x21c>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001cbe:	4b70      	ldr	r3, [pc, #448]	; (8001e80 <HAL_TIM_Base_MspInit+0x21c>)
 8001cc0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cc4:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001cc6:	4b6e      	ldr	r3, [pc, #440]	; (8001e80 <HAL_TIM_Base_MspInit+0x21c>)
 8001cc8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ccc:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001cce:	4b6c      	ldr	r3, [pc, #432]	; (8001e80 <HAL_TIM_Base_MspInit+0x21c>)
 8001cd0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cd4:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8001cd6:	4b6a      	ldr	r3, [pc, #424]	; (8001e80 <HAL_TIM_Base_MspInit+0x21c>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001cdc:	4b68      	ldr	r3, [pc, #416]	; (8001e80 <HAL_TIM_Base_MspInit+0x21c>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ce2:	4b67      	ldr	r3, [pc, #412]	; (8001e80 <HAL_TIM_Base_MspInit+0x21c>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8001ce8:	4865      	ldr	r0, [pc, #404]	; (8001e80 <HAL_TIM_Base_MspInit+0x21c>)
 8001cea:	f000 fc23 	bl	8002534 <HAL_DMA_Init>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <HAL_TIM_Base_MspInit+0x94>
    {
      Error_Handler();
 8001cf4:	f7ff fec2 	bl	8001a7c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	4a61      	ldr	r2, [pc, #388]	; (8001e80 <HAL_TIM_Base_MspInit+0x21c>)
 8001cfc:	625a      	str	r2, [r3, #36]	; 0x24
 8001cfe:	4a60      	ldr	r2, [pc, #384]	; (8001e80 <HAL_TIM_Base_MspInit+0x21c>)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1_CH2 Init */
    hdma_tim1_ch2.Instance = DMA2_Stream2;
 8001d04:	4b60      	ldr	r3, [pc, #384]	; (8001e88 <HAL_TIM_Base_MspInit+0x224>)
 8001d06:	4a61      	ldr	r2, [pc, #388]	; (8001e8c <HAL_TIM_Base_MspInit+0x228>)
 8001d08:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch2.Init.Channel = DMA_CHANNEL_6;
 8001d0a:	4b5f      	ldr	r3, [pc, #380]	; (8001e88 <HAL_TIM_Base_MspInit+0x224>)
 8001d0c:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8001d10:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d12:	4b5d      	ldr	r3, [pc, #372]	; (8001e88 <HAL_TIM_Base_MspInit+0x224>)
 8001d14:	2240      	movs	r2, #64	; 0x40
 8001d16:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d18:	4b5b      	ldr	r3, [pc, #364]	; (8001e88 <HAL_TIM_Base_MspInit+0x224>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8001d1e:	4b5a      	ldr	r3, [pc, #360]	; (8001e88 <HAL_TIM_Base_MspInit+0x224>)
 8001d20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d24:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001d26:	4b58      	ldr	r3, [pc, #352]	; (8001e88 <HAL_TIM_Base_MspInit+0x224>)
 8001d28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d2c:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001d2e:	4b56      	ldr	r3, [pc, #344]	; (8001e88 <HAL_TIM_Base_MspInit+0x224>)
 8001d30:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d34:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch2.Init.Mode = DMA_NORMAL;
 8001d36:	4b54      	ldr	r3, [pc, #336]	; (8001e88 <HAL_TIM_Base_MspInit+0x224>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8001d3c:	4b52      	ldr	r3, [pc, #328]	; (8001e88 <HAL_TIM_Base_MspInit+0x224>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d42:	4b51      	ldr	r3, [pc, #324]	; (8001e88 <HAL_TIM_Base_MspInit+0x224>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 8001d48:	484f      	ldr	r0, [pc, #316]	; (8001e88 <HAL_TIM_Base_MspInit+0x224>)
 8001d4a:	f000 fbf3 	bl	8002534 <HAL_DMA_Init>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <HAL_TIM_Base_MspInit+0xf4>
    {
      Error_Handler();
 8001d54:	f7ff fe92 	bl	8001a7c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch2);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	4a4b      	ldr	r2, [pc, #300]	; (8001e88 <HAL_TIM_Base_MspInit+0x224>)
 8001d5c:	629a      	str	r2, [r3, #40]	; 0x28
 8001d5e:	4a4a      	ldr	r2, [pc, #296]	; (8001e88 <HAL_TIM_Base_MspInit+0x224>)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1_CH3 Init */
    hdma_tim1_ch3.Instance = DMA2_Stream6;
 8001d64:	4b4a      	ldr	r3, [pc, #296]	; (8001e90 <HAL_TIM_Base_MspInit+0x22c>)
 8001d66:	4a4b      	ldr	r2, [pc, #300]	; (8001e94 <HAL_TIM_Base_MspInit+0x230>)
 8001d68:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch3.Init.Channel = DMA_CHANNEL_6;
 8001d6a:	4b49      	ldr	r3, [pc, #292]	; (8001e90 <HAL_TIM_Base_MspInit+0x22c>)
 8001d6c:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8001d70:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d72:	4b47      	ldr	r3, [pc, #284]	; (8001e90 <HAL_TIM_Base_MspInit+0x22c>)
 8001d74:	2240      	movs	r2, #64	; 0x40
 8001d76:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d78:	4b45      	ldr	r3, [pc, #276]	; (8001e90 <HAL_TIM_Base_MspInit+0x22c>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8001d7e:	4b44      	ldr	r3, [pc, #272]	; (8001e90 <HAL_TIM_Base_MspInit+0x22c>)
 8001d80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d84:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001d86:	4b42      	ldr	r3, [pc, #264]	; (8001e90 <HAL_TIM_Base_MspInit+0x22c>)
 8001d88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d8c:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001d8e:	4b40      	ldr	r3, [pc, #256]	; (8001e90 <HAL_TIM_Base_MspInit+0x22c>)
 8001d90:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d94:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch3.Init.Mode = DMA_NORMAL;
 8001d96:	4b3e      	ldr	r3, [pc, #248]	; (8001e90 <HAL_TIM_Base_MspInit+0x22c>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8001d9c:	4b3c      	ldr	r3, [pc, #240]	; (8001e90 <HAL_TIM_Base_MspInit+0x22c>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001da2:	4b3b      	ldr	r3, [pc, #236]	; (8001e90 <HAL_TIM_Base_MspInit+0x22c>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch3) != HAL_OK)
 8001da8:	4839      	ldr	r0, [pc, #228]	; (8001e90 <HAL_TIM_Base_MspInit+0x22c>)
 8001daa:	f000 fbc3 	bl	8002534 <HAL_DMA_Init>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <HAL_TIM_Base_MspInit+0x154>
    {
      Error_Handler();
 8001db4:	f7ff fe62 	bl	8001a7c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch3);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	4a35      	ldr	r2, [pc, #212]	; (8001e90 <HAL_TIM_Base_MspInit+0x22c>)
 8001dbc:	62da      	str	r2, [r3, #44]	; 0x2c
 8001dbe:	4a34      	ldr	r2, [pc, #208]	; (8001e90 <HAL_TIM_Base_MspInit+0x22c>)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001dc4:	e054      	b.n	8001e70 <HAL_TIM_Base_MspInit+0x20c>
  else if(htim_base->Instance==TIM2)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dce:	d116      	bne.n	8001dfe <HAL_TIM_Base_MspInit+0x19a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	617b      	str	r3, [r7, #20]
 8001dd4:	4b29      	ldr	r3, [pc, #164]	; (8001e7c <HAL_TIM_Base_MspInit+0x218>)
 8001dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd8:	4a28      	ldr	r2, [pc, #160]	; (8001e7c <HAL_TIM_Base_MspInit+0x218>)
 8001dda:	f043 0301 	orr.w	r3, r3, #1
 8001dde:	6413      	str	r3, [r2, #64]	; 0x40
 8001de0:	4b26      	ldr	r3, [pc, #152]	; (8001e7c <HAL_TIM_Base_MspInit+0x218>)
 8001de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de4:	f003 0301 	and.w	r3, r3, #1
 8001de8:	617b      	str	r3, [r7, #20]
 8001dea:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001dec:	2200      	movs	r2, #0
 8001dee:	2100      	movs	r1, #0
 8001df0:	201c      	movs	r0, #28
 8001df2:	f000 fb68 	bl	80024c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001df6:	201c      	movs	r0, #28
 8001df8:	f000 fb81 	bl	80024fe <HAL_NVIC_EnableIRQ>
}
 8001dfc:	e038      	b.n	8001e70 <HAL_TIM_Base_MspInit+0x20c>
  else if(htim_base->Instance==TIM3)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a25      	ldr	r2, [pc, #148]	; (8001e98 <HAL_TIM_Base_MspInit+0x234>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d133      	bne.n	8001e70 <HAL_TIM_Base_MspInit+0x20c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e08:	2300      	movs	r3, #0
 8001e0a:	613b      	str	r3, [r7, #16]
 8001e0c:	4b1b      	ldr	r3, [pc, #108]	; (8001e7c <HAL_TIM_Base_MspInit+0x218>)
 8001e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e10:	4a1a      	ldr	r2, [pc, #104]	; (8001e7c <HAL_TIM_Base_MspInit+0x218>)
 8001e12:	f043 0302 	orr.w	r3, r3, #2
 8001e16:	6413      	str	r3, [r2, #64]	; 0x40
 8001e18:	4b18      	ldr	r3, [pc, #96]	; (8001e7c <HAL_TIM_Base_MspInit+0x218>)
 8001e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1c:	f003 0302 	and.w	r3, r3, #2
 8001e20:	613b      	str	r3, [r7, #16]
 8001e22:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e24:	2300      	movs	r3, #0
 8001e26:	60fb      	str	r3, [r7, #12]
 8001e28:	4b14      	ldr	r3, [pc, #80]	; (8001e7c <HAL_TIM_Base_MspInit+0x218>)
 8001e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2c:	4a13      	ldr	r2, [pc, #76]	; (8001e7c <HAL_TIM_Base_MspInit+0x218>)
 8001e2e:	f043 0301 	orr.w	r3, r3, #1
 8001e32:	6313      	str	r3, [r2, #48]	; 0x30
 8001e34:	4b11      	ldr	r3, [pc, #68]	; (8001e7c <HAL_TIM_Base_MspInit+0x218>)
 8001e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e38:	f003 0301 	and.w	r3, r3, #1
 8001e3c:	60fb      	str	r3, [r7, #12]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001e40:	2340      	movs	r3, #64	; 0x40
 8001e42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e44:	2302      	movs	r3, #2
 8001e46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e50:	2302      	movs	r3, #2
 8001e52:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e54:	f107 031c 	add.w	r3, r7, #28
 8001e58:	4619      	mov	r1, r3
 8001e5a:	4810      	ldr	r0, [pc, #64]	; (8001e9c <HAL_TIM_Base_MspInit+0x238>)
 8001e5c:	f001 f9ee 	bl	800323c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001e60:	2200      	movs	r2, #0
 8001e62:	2100      	movs	r1, #0
 8001e64:	201d      	movs	r0, #29
 8001e66:	f000 fb2e 	bl	80024c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001e6a:	201d      	movs	r0, #29
 8001e6c:	f000 fb47 	bl	80024fe <HAL_NVIC_EnableIRQ>
}
 8001e70:	bf00      	nop
 8001e72:	3730      	adds	r7, #48	; 0x30
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	40010000 	.word	0x40010000
 8001e7c:	40023800 	.word	0x40023800
 8001e80:	200014c4 	.word	0x200014c4
 8001e84:	40026428 	.word	0x40026428
 8001e88:	20001524 	.word	0x20001524
 8001e8c:	40026440 	.word	0x40026440
 8001e90:	20001584 	.word	0x20001584
 8001e94:	400264a0 	.word	0x400264a0
 8001e98:	40000400 	.word	0x40000400
 8001e9c:	40020000 	.word	0x40020000

08001ea0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b08a      	sub	sp, #40	; 0x28
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea8:	f107 0314 	add.w	r3, r7, #20
 8001eac:	2200      	movs	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]
 8001eb0:	605a      	str	r2, [r3, #4]
 8001eb2:	609a      	str	r2, [r3, #8]
 8001eb4:	60da      	str	r2, [r3, #12]
 8001eb6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a24      	ldr	r2, [pc, #144]	; (8001f50 <HAL_TIM_MspPostInit+0xb0>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d11f      	bne.n	8001f02 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	613b      	str	r3, [r7, #16]
 8001ec6:	4b23      	ldr	r3, [pc, #140]	; (8001f54 <HAL_TIM_MspPostInit+0xb4>)
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eca:	4a22      	ldr	r2, [pc, #136]	; (8001f54 <HAL_TIM_MspPostInit+0xb4>)
 8001ecc:	f043 0310 	orr.w	r3, r3, #16
 8001ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ed2:	4b20      	ldr	r3, [pc, #128]	; (8001f54 <HAL_TIM_MspPostInit+0xb4>)
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed6:	f003 0310 	and.w	r3, r3, #16
 8001eda:	613b      	str	r3, [r7, #16]
 8001edc:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13;
 8001ede:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 8001ee2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eec:	2300      	movs	r3, #0
 8001eee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ef4:	f107 0314 	add.w	r3, r7, #20
 8001ef8:	4619      	mov	r1, r3
 8001efa:	4817      	ldr	r0, [pc, #92]	; (8001f58 <HAL_TIM_MspPostInit+0xb8>)
 8001efc:	f001 f99e 	bl	800323c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001f00:	e022      	b.n	8001f48 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM2)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f0a:	d11d      	bne.n	8001f48 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	60fb      	str	r3, [r7, #12]
 8001f10:	4b10      	ldr	r3, [pc, #64]	; (8001f54 <HAL_TIM_MspPostInit+0xb4>)
 8001f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f14:	4a0f      	ldr	r2, [pc, #60]	; (8001f54 <HAL_TIM_MspPostInit+0xb4>)
 8001f16:	f043 0301 	orr.w	r3, r3, #1
 8001f1a:	6313      	str	r3, [r2, #48]	; 0x30
 8001f1c:	4b0d      	ldr	r3, [pc, #52]	; (8001f54 <HAL_TIM_MspPostInit+0xb4>)
 8001f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f20:	f003 0301 	and.w	r3, r3, #1
 8001f24:	60fb      	str	r3, [r7, #12]
 8001f26:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f2c:	2302      	movs	r3, #2
 8001f2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f30:	2300      	movs	r3, #0
 8001f32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f34:	2300      	movs	r3, #0
 8001f36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f3c:	f107 0314 	add.w	r3, r7, #20
 8001f40:	4619      	mov	r1, r3
 8001f42:	4806      	ldr	r0, [pc, #24]	; (8001f5c <HAL_TIM_MspPostInit+0xbc>)
 8001f44:	f001 f97a 	bl	800323c <HAL_GPIO_Init>
}
 8001f48:	bf00      	nop
 8001f4a:	3728      	adds	r7, #40	; 0x28
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	40010000 	.word	0x40010000
 8001f54:	40023800 	.word	0x40023800
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	40020000 	.word	0x40020000

08001f60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b08a      	sub	sp, #40	; 0x28
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f68:	f107 0314 	add.w	r3, r7, #20
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]
 8001f70:	605a      	str	r2, [r3, #4]
 8001f72:	609a      	str	r2, [r3, #8]
 8001f74:	60da      	str	r2, [r3, #12]
 8001f76:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a19      	ldr	r2, [pc, #100]	; (8001fe4 <HAL_UART_MspInit+0x84>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d12c      	bne.n	8001fdc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001f82:	2300      	movs	r3, #0
 8001f84:	613b      	str	r3, [r7, #16]
 8001f86:	4b18      	ldr	r3, [pc, #96]	; (8001fe8 <HAL_UART_MspInit+0x88>)
 8001f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8a:	4a17      	ldr	r2, [pc, #92]	; (8001fe8 <HAL_UART_MspInit+0x88>)
 8001f8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f90:	6413      	str	r3, [r2, #64]	; 0x40
 8001f92:	4b15      	ldr	r3, [pc, #84]	; (8001fe8 <HAL_UART_MspInit+0x88>)
 8001f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f9a:	613b      	str	r3, [r7, #16]
 8001f9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	60fb      	str	r3, [r7, #12]
 8001fa2:	4b11      	ldr	r3, [pc, #68]	; (8001fe8 <HAL_UART_MspInit+0x88>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa6:	4a10      	ldr	r2, [pc, #64]	; (8001fe8 <HAL_UART_MspInit+0x88>)
 8001fa8:	f043 0308 	orr.w	r3, r3, #8
 8001fac:	6313      	str	r3, [r2, #48]	; 0x30
 8001fae:	4b0e      	ldr	r3, [pc, #56]	; (8001fe8 <HAL_UART_MspInit+0x88>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb2:	f003 0308 	and.w	r3, r3, #8
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001fba:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001fbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001fcc:	2307      	movs	r3, #7
 8001fce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fd0:	f107 0314 	add.w	r3, r7, #20
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	4805      	ldr	r0, [pc, #20]	; (8001fec <HAL_UART_MspInit+0x8c>)
 8001fd8:	f001 f930 	bl	800323c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001fdc:	bf00      	nop
 8001fde:	3728      	adds	r7, #40	; 0x28
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	40004800 	.word	0x40004800
 8001fe8:	40023800 	.word	0x40023800
 8001fec:	40020c00 	.word	0x40020c00

08001ff0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b08a      	sub	sp, #40	; 0x28
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff8:	f107 0314 	add.w	r3, r7, #20
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	601a      	str	r2, [r3, #0]
 8002000:	605a      	str	r2, [r3, #4]
 8002002:	609a      	str	r2, [r3, #8]
 8002004:	60da      	str	r2, [r3, #12]
 8002006:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002010:	d13f      	bne.n	8002092 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002012:	2300      	movs	r3, #0
 8002014:	613b      	str	r3, [r7, #16]
 8002016:	4b21      	ldr	r3, [pc, #132]	; (800209c <HAL_PCD_MspInit+0xac>)
 8002018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201a:	4a20      	ldr	r2, [pc, #128]	; (800209c <HAL_PCD_MspInit+0xac>)
 800201c:	f043 0301 	orr.w	r3, r3, #1
 8002020:	6313      	str	r3, [r2, #48]	; 0x30
 8002022:	4b1e      	ldr	r3, [pc, #120]	; (800209c <HAL_PCD_MspInit+0xac>)
 8002024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	613b      	str	r3, [r7, #16]
 800202c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800202e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002032:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002034:	2302      	movs	r3, #2
 8002036:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002038:	2300      	movs	r3, #0
 800203a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800203c:	2303      	movs	r3, #3
 800203e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002040:	230a      	movs	r3, #10
 8002042:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002044:	f107 0314 	add.w	r3, r7, #20
 8002048:	4619      	mov	r1, r3
 800204a:	4815      	ldr	r0, [pc, #84]	; (80020a0 <HAL_PCD_MspInit+0xb0>)
 800204c:	f001 f8f6 	bl	800323c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002050:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002054:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002056:	2300      	movs	r3, #0
 8002058:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205a:	2300      	movs	r3, #0
 800205c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800205e:	f107 0314 	add.w	r3, r7, #20
 8002062:	4619      	mov	r1, r3
 8002064:	480e      	ldr	r0, [pc, #56]	; (80020a0 <HAL_PCD_MspInit+0xb0>)
 8002066:	f001 f8e9 	bl	800323c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800206a:	4b0c      	ldr	r3, [pc, #48]	; (800209c <HAL_PCD_MspInit+0xac>)
 800206c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800206e:	4a0b      	ldr	r2, [pc, #44]	; (800209c <HAL_PCD_MspInit+0xac>)
 8002070:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002074:	6353      	str	r3, [r2, #52]	; 0x34
 8002076:	2300      	movs	r3, #0
 8002078:	60fb      	str	r3, [r7, #12]
 800207a:	4b08      	ldr	r3, [pc, #32]	; (800209c <HAL_PCD_MspInit+0xac>)
 800207c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800207e:	4a07      	ldr	r2, [pc, #28]	; (800209c <HAL_PCD_MspInit+0xac>)
 8002080:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002084:	6453      	str	r3, [r2, #68]	; 0x44
 8002086:	4b05      	ldr	r3, [pc, #20]	; (800209c <HAL_PCD_MspInit+0xac>)
 8002088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800208a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800208e:	60fb      	str	r3, [r7, #12]
 8002090:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002092:	bf00      	nop
 8002094:	3728      	adds	r7, #40	; 0x28
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	40023800 	.word	0x40023800
 80020a0:	40020000 	.word	0x40020000

080020a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020a8:	e7fe      	b.n	80020a8 <NMI_Handler+0x4>

080020aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020aa:	b480      	push	{r7}
 80020ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020ae:	e7fe      	b.n	80020ae <HardFault_Handler+0x4>

080020b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020b4:	e7fe      	b.n	80020b4 <MemManage_Handler+0x4>

080020b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020b6:	b480      	push	{r7}
 80020b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020ba:	e7fe      	b.n	80020ba <BusFault_Handler+0x4>

080020bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020c0:	e7fe      	b.n	80020c0 <UsageFault_Handler+0x4>

080020c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020c2:	b480      	push	{r7}
 80020c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020c6:	bf00      	nop
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020d4:	bf00      	nop
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr

080020de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020de:	b480      	push	{r7}
 80020e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020e2:	bf00      	nop
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020f0:	f000 f8ca 	bl	8002288 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020f4:	bf00      	nop
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80020fc:	4802      	ldr	r0, [pc, #8]	; (8002108 <TIM2_IRQHandler+0x10>)
 80020fe:	f002 fe2f 	bl	8004d60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002102:	bf00      	nop
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	20001434 	.word	0x20001434

0800210c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002110:	4802      	ldr	r0, [pc, #8]	; (800211c <TIM3_IRQHandler+0x10>)
 8002112:	f002 fe25 	bl	8004d60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002116:	bf00      	nop
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	2000147c 	.word	0x2000147c

08002120 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8002124:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002128:	f001 fa68 	bl	80035fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800212c:	bf00      	nop
 800212e:	bd80      	pop	{r7, pc}

08002130 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8002134:	4802      	ldr	r0, [pc, #8]	; (8002140 <DMA2_Stream1_IRQHandler+0x10>)
 8002136:	f000 fb03 	bl	8002740 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800213a:	bf00      	nop
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	200014c4 	.word	0x200014c4

08002144 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 8002148:	4802      	ldr	r0, [pc, #8]	; (8002154 <DMA2_Stream2_IRQHandler+0x10>)
 800214a:	f000 faf9 	bl	8002740 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800214e:	bf00      	nop
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	20001524 	.word	0x20001524

08002158 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch3);
 800215c:	4802      	ldr	r0, [pc, #8]	; (8002168 <DMA2_Stream6_IRQHandler+0x10>)
 800215e:	f000 faef 	bl	8002740 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8002162:	bf00      	nop
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	20001584 	.word	0x20001584

0800216c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002170:	4b06      	ldr	r3, [pc, #24]	; (800218c <SystemInit+0x20>)
 8002172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002176:	4a05      	ldr	r2, [pc, #20]	; (800218c <SystemInit+0x20>)
 8002178:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800217c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002180:	bf00      	nop
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	e000ed00 	.word	0xe000ed00

08002190 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002190:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021c8 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002194:	480d      	ldr	r0, [pc, #52]	; (80021cc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002196:	490e      	ldr	r1, [pc, #56]	; (80021d0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002198:	4a0e      	ldr	r2, [pc, #56]	; (80021d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800219a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800219c:	e002      	b.n	80021a4 <LoopCopyDataInit>

0800219e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800219e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021a2:	3304      	adds	r3, #4

080021a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021a8:	d3f9      	bcc.n	800219e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021aa:	4a0b      	ldr	r2, [pc, #44]	; (80021d8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80021ac:	4c0b      	ldr	r4, [pc, #44]	; (80021dc <LoopFillZerobss+0x26>)
  movs r3, #0
 80021ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021b0:	e001      	b.n	80021b6 <LoopFillZerobss>

080021b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021b4:	3204      	adds	r2, #4

080021b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021b8:	d3fb      	bcc.n	80021b2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80021ba:	f7ff ffd7 	bl	800216c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021be:	f004 fe03 	bl	8006dc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021c2:	f7fe fee1 	bl	8000f88 <main>
  bx  lr    
 80021c6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80021c8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80021cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021d0:	200011a8 	.word	0x200011a8
  ldr r2, =_sidata
 80021d4:	08006e68 	.word	0x08006e68
  ldr r2, =_sbss
 80021d8:	200011a8 	.word	0x200011a8
  ldr r4, =_ebss
 80021dc:	20002aa0 	.word	0x20002aa0

080021e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021e0:	e7fe      	b.n	80021e0 <ADC_IRQHandler>
	...

080021e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021e8:	4b0e      	ldr	r3, [pc, #56]	; (8002224 <HAL_Init+0x40>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a0d      	ldr	r2, [pc, #52]	; (8002224 <HAL_Init+0x40>)
 80021ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021f4:	4b0b      	ldr	r3, [pc, #44]	; (8002224 <HAL_Init+0x40>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a0a      	ldr	r2, [pc, #40]	; (8002224 <HAL_Init+0x40>)
 80021fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002200:	4b08      	ldr	r3, [pc, #32]	; (8002224 <HAL_Init+0x40>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a07      	ldr	r2, [pc, #28]	; (8002224 <HAL_Init+0x40>)
 8002206:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800220a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800220c:	2003      	movs	r0, #3
 800220e:	f000 f94f 	bl	80024b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002212:	2000      	movs	r0, #0
 8002214:	f000 f808 	bl	8002228 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002218:	f7ff fc36 	bl	8001a88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	40023c00 	.word	0x40023c00

08002228 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002230:	4b12      	ldr	r3, [pc, #72]	; (800227c <HAL_InitTick+0x54>)
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	4b12      	ldr	r3, [pc, #72]	; (8002280 <HAL_InitTick+0x58>)
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	4619      	mov	r1, r3
 800223a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800223e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002242:	fbb2 f3f3 	udiv	r3, r2, r3
 8002246:	4618      	mov	r0, r3
 8002248:	f000 f967 	bl	800251a <HAL_SYSTICK_Config>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d001      	beq.n	8002256 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e00e      	b.n	8002274 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2b0f      	cmp	r3, #15
 800225a:	d80a      	bhi.n	8002272 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800225c:	2200      	movs	r2, #0
 800225e:	6879      	ldr	r1, [r7, #4]
 8002260:	f04f 30ff 	mov.w	r0, #4294967295
 8002264:	f000 f92f 	bl	80024c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002268:	4a06      	ldr	r2, [pc, #24]	; (8002284 <HAL_InitTick+0x5c>)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800226e:	2300      	movs	r3, #0
 8002270:	e000      	b.n	8002274 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
}
 8002274:	4618      	mov	r0, r3
 8002276:	3708      	adds	r7, #8
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	2000119c 	.word	0x2000119c
 8002280:	200011a4 	.word	0x200011a4
 8002284:	200011a0 	.word	0x200011a0

08002288 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800228c:	4b06      	ldr	r3, [pc, #24]	; (80022a8 <HAL_IncTick+0x20>)
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	461a      	mov	r2, r3
 8002292:	4b06      	ldr	r3, [pc, #24]	; (80022ac <HAL_IncTick+0x24>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4413      	add	r3, r2
 8002298:	4a04      	ldr	r2, [pc, #16]	; (80022ac <HAL_IncTick+0x24>)
 800229a:	6013      	str	r3, [r2, #0]
}
 800229c:	bf00      	nop
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	200011a4 	.word	0x200011a4
 80022ac:	20002a9c 	.word	0x20002a9c

080022b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  return uwTick;
 80022b4:	4b03      	ldr	r3, [pc, #12]	; (80022c4 <HAL_GetTick+0x14>)
 80022b6:	681b      	ldr	r3, [r3, #0]
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	20002a9c 	.word	0x20002a9c

080022c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022d0:	f7ff ffee 	bl	80022b0 <HAL_GetTick>
 80022d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022e0:	d005      	beq.n	80022ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022e2:	4b0a      	ldr	r3, [pc, #40]	; (800230c <HAL_Delay+0x44>)
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	461a      	mov	r2, r3
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	4413      	add	r3, r2
 80022ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80022ee:	bf00      	nop
 80022f0:	f7ff ffde 	bl	80022b0 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	68fa      	ldr	r2, [r7, #12]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d8f7      	bhi.n	80022f0 <HAL_Delay+0x28>
  {
  }
}
 8002300:	bf00      	nop
 8002302:	bf00      	nop
 8002304:	3710      	adds	r7, #16
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	200011a4 	.word	0x200011a4

08002310 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002310:	b480      	push	{r7}
 8002312:	b085      	sub	sp, #20
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f003 0307 	and.w	r3, r3, #7
 800231e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002320:	4b0c      	ldr	r3, [pc, #48]	; (8002354 <__NVIC_SetPriorityGrouping+0x44>)
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002326:	68ba      	ldr	r2, [r7, #8]
 8002328:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800232c:	4013      	ands	r3, r2
 800232e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002338:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800233c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002340:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002342:	4a04      	ldr	r2, [pc, #16]	; (8002354 <__NVIC_SetPriorityGrouping+0x44>)
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	60d3      	str	r3, [r2, #12]
}
 8002348:	bf00      	nop
 800234a:	3714      	adds	r7, #20
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr
 8002354:	e000ed00 	.word	0xe000ed00

08002358 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800235c:	4b04      	ldr	r3, [pc, #16]	; (8002370 <__NVIC_GetPriorityGrouping+0x18>)
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	0a1b      	lsrs	r3, r3, #8
 8002362:	f003 0307 	and.w	r3, r3, #7
}
 8002366:	4618      	mov	r0, r3
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr
 8002370:	e000ed00 	.word	0xe000ed00

08002374 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	4603      	mov	r3, r0
 800237c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800237e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002382:	2b00      	cmp	r3, #0
 8002384:	db0b      	blt.n	800239e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002386:	79fb      	ldrb	r3, [r7, #7]
 8002388:	f003 021f 	and.w	r2, r3, #31
 800238c:	4907      	ldr	r1, [pc, #28]	; (80023ac <__NVIC_EnableIRQ+0x38>)
 800238e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002392:	095b      	lsrs	r3, r3, #5
 8002394:	2001      	movs	r0, #1
 8002396:	fa00 f202 	lsl.w	r2, r0, r2
 800239a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800239e:	bf00      	nop
 80023a0:	370c      	adds	r7, #12
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	e000e100 	.word	0xe000e100

080023b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	4603      	mov	r3, r0
 80023b8:	6039      	str	r1, [r7, #0]
 80023ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	db0a      	blt.n	80023da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	b2da      	uxtb	r2, r3
 80023c8:	490c      	ldr	r1, [pc, #48]	; (80023fc <__NVIC_SetPriority+0x4c>)
 80023ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ce:	0112      	lsls	r2, r2, #4
 80023d0:	b2d2      	uxtb	r2, r2
 80023d2:	440b      	add	r3, r1
 80023d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023d8:	e00a      	b.n	80023f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	b2da      	uxtb	r2, r3
 80023de:	4908      	ldr	r1, [pc, #32]	; (8002400 <__NVIC_SetPriority+0x50>)
 80023e0:	79fb      	ldrb	r3, [r7, #7]
 80023e2:	f003 030f 	and.w	r3, r3, #15
 80023e6:	3b04      	subs	r3, #4
 80023e8:	0112      	lsls	r2, r2, #4
 80023ea:	b2d2      	uxtb	r2, r2
 80023ec:	440b      	add	r3, r1
 80023ee:	761a      	strb	r2, [r3, #24]
}
 80023f0:	bf00      	nop
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr
 80023fc:	e000e100 	.word	0xe000e100
 8002400:	e000ed00 	.word	0xe000ed00

08002404 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002404:	b480      	push	{r7}
 8002406:	b089      	sub	sp, #36	; 0x24
 8002408:	af00      	add	r7, sp, #0
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f003 0307 	and.w	r3, r3, #7
 8002416:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	f1c3 0307 	rsb	r3, r3, #7
 800241e:	2b04      	cmp	r3, #4
 8002420:	bf28      	it	cs
 8002422:	2304      	movcs	r3, #4
 8002424:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	3304      	adds	r3, #4
 800242a:	2b06      	cmp	r3, #6
 800242c:	d902      	bls.n	8002434 <NVIC_EncodePriority+0x30>
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	3b03      	subs	r3, #3
 8002432:	e000      	b.n	8002436 <NVIC_EncodePriority+0x32>
 8002434:	2300      	movs	r3, #0
 8002436:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002438:	f04f 32ff 	mov.w	r2, #4294967295
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	fa02 f303 	lsl.w	r3, r2, r3
 8002442:	43da      	mvns	r2, r3
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	401a      	ands	r2, r3
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800244c:	f04f 31ff 	mov.w	r1, #4294967295
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	fa01 f303 	lsl.w	r3, r1, r3
 8002456:	43d9      	mvns	r1, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800245c:	4313      	orrs	r3, r2
         );
}
 800245e:	4618      	mov	r0, r3
 8002460:	3724      	adds	r7, #36	; 0x24
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
	...

0800246c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	3b01      	subs	r3, #1
 8002478:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800247c:	d301      	bcc.n	8002482 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800247e:	2301      	movs	r3, #1
 8002480:	e00f      	b.n	80024a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002482:	4a0a      	ldr	r2, [pc, #40]	; (80024ac <SysTick_Config+0x40>)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	3b01      	subs	r3, #1
 8002488:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800248a:	210f      	movs	r1, #15
 800248c:	f04f 30ff 	mov.w	r0, #4294967295
 8002490:	f7ff ff8e 	bl	80023b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002494:	4b05      	ldr	r3, [pc, #20]	; (80024ac <SysTick_Config+0x40>)
 8002496:	2200      	movs	r2, #0
 8002498:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800249a:	4b04      	ldr	r3, [pc, #16]	; (80024ac <SysTick_Config+0x40>)
 800249c:	2207      	movs	r2, #7
 800249e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	e000e010 	.word	0xe000e010

080024b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f7ff ff29 	bl	8002310 <__NVIC_SetPriorityGrouping>
}
 80024be:	bf00      	nop
 80024c0:	3708      	adds	r7, #8
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}

080024c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024c6:	b580      	push	{r7, lr}
 80024c8:	b086      	sub	sp, #24
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	4603      	mov	r3, r0
 80024ce:	60b9      	str	r1, [r7, #8]
 80024d0:	607a      	str	r2, [r7, #4]
 80024d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024d4:	2300      	movs	r3, #0
 80024d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024d8:	f7ff ff3e 	bl	8002358 <__NVIC_GetPriorityGrouping>
 80024dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	68b9      	ldr	r1, [r7, #8]
 80024e2:	6978      	ldr	r0, [r7, #20]
 80024e4:	f7ff ff8e 	bl	8002404 <NVIC_EncodePriority>
 80024e8:	4602      	mov	r2, r0
 80024ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024ee:	4611      	mov	r1, r2
 80024f0:	4618      	mov	r0, r3
 80024f2:	f7ff ff5d 	bl	80023b0 <__NVIC_SetPriority>
}
 80024f6:	bf00      	nop
 80024f8:	3718      	adds	r7, #24
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024fe:	b580      	push	{r7, lr}
 8002500:	b082      	sub	sp, #8
 8002502:	af00      	add	r7, sp, #0
 8002504:	4603      	mov	r3, r0
 8002506:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002508:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800250c:	4618      	mov	r0, r3
 800250e:	f7ff ff31 	bl	8002374 <__NVIC_EnableIRQ>
}
 8002512:	bf00      	nop
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800251a:	b580      	push	{r7, lr}
 800251c:	b082      	sub	sp, #8
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f7ff ffa2 	bl	800246c <SysTick_Config>
 8002528:	4603      	mov	r3, r0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
	...

08002534 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b086      	sub	sp, #24
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800253c:	2300      	movs	r3, #0
 800253e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002540:	f7ff feb6 	bl	80022b0 <HAL_GetTick>
 8002544:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d101      	bne.n	8002550 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e099      	b.n	8002684 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2202      	movs	r2, #2
 8002554:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f022 0201 	bic.w	r2, r2, #1
 800256e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002570:	e00f      	b.n	8002592 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002572:	f7ff fe9d 	bl	80022b0 <HAL_GetTick>
 8002576:	4602      	mov	r2, r0
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	2b05      	cmp	r3, #5
 800257e:	d908      	bls.n	8002592 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2220      	movs	r2, #32
 8002584:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2203      	movs	r2, #3
 800258a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e078      	b.n	8002684 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0301 	and.w	r3, r3, #1
 800259c:	2b00      	cmp	r3, #0
 800259e:	d1e8      	bne.n	8002572 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80025a8:	697a      	ldr	r2, [r7, #20]
 80025aa:	4b38      	ldr	r3, [pc, #224]	; (800268c <HAL_DMA_Init+0x158>)
 80025ac:	4013      	ands	r3, r2
 80025ae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685a      	ldr	r2, [r3, #4]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025be:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	691b      	ldr	r3, [r3, #16]
 80025c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	699b      	ldr	r3, [r3, #24]
 80025d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6a1b      	ldr	r3, [r3, #32]
 80025dc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025de:	697a      	ldr	r2, [r7, #20]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e8:	2b04      	cmp	r3, #4
 80025ea:	d107      	bne.n	80025fc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f4:	4313      	orrs	r3, r2
 80025f6:	697a      	ldr	r2, [r7, #20]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	697a      	ldr	r2, [r7, #20]
 8002602:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	695b      	ldr	r3, [r3, #20]
 800260a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	f023 0307 	bic.w	r3, r3, #7
 8002612:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002618:	697a      	ldr	r2, [r7, #20]
 800261a:	4313      	orrs	r3, r2
 800261c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002622:	2b04      	cmp	r3, #4
 8002624:	d117      	bne.n	8002656 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800262a:	697a      	ldr	r2, [r7, #20]
 800262c:	4313      	orrs	r3, r2
 800262e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002634:	2b00      	cmp	r3, #0
 8002636:	d00e      	beq.n	8002656 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f000 fa6f 	bl	8002b1c <DMA_CheckFifoParam>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d008      	beq.n	8002656 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2240      	movs	r2, #64	; 0x40
 8002648:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2201      	movs	r2, #1
 800264e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002652:	2301      	movs	r3, #1
 8002654:	e016      	b.n	8002684 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	697a      	ldr	r2, [r7, #20]
 800265c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f000 fa26 	bl	8002ab0 <DMA_CalcBaseAndBitshift>
 8002664:	4603      	mov	r3, r0
 8002666:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800266c:	223f      	movs	r2, #63	; 0x3f
 800266e:	409a      	lsls	r2, r3
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2200      	movs	r2, #0
 8002678:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2201      	movs	r2, #1
 800267e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002682:	2300      	movs	r3, #0
}
 8002684:	4618      	mov	r0, r3
 8002686:	3718      	adds	r7, #24
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	f010803f 	.word	0xf010803f

08002690 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b086      	sub	sp, #24
 8002694:	af00      	add	r7, sp, #0
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	60b9      	str	r1, [r7, #8]
 800269a:	607a      	str	r2, [r7, #4]
 800269c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800269e:	2300      	movs	r3, #0
 80026a0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026a6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d101      	bne.n	80026b6 <HAL_DMA_Start_IT+0x26>
 80026b2:	2302      	movs	r3, #2
 80026b4:	e040      	b.n	8002738 <HAL_DMA_Start_IT+0xa8>
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2201      	movs	r2, #1
 80026ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d12f      	bne.n	800272a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2202      	movs	r2, #2
 80026ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2200      	movs	r2, #0
 80026d6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	68b9      	ldr	r1, [r7, #8]
 80026de:	68f8      	ldr	r0, [r7, #12]
 80026e0:	f000 f9b8 	bl	8002a54 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026e8:	223f      	movs	r2, #63	; 0x3f
 80026ea:	409a      	lsls	r2, r3
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f042 0216 	orr.w	r2, r2, #22
 80026fe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002704:	2b00      	cmp	r3, #0
 8002706:	d007      	beq.n	8002718 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f042 0208 	orr.w	r2, r2, #8
 8002716:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f042 0201 	orr.w	r2, r2, #1
 8002726:	601a      	str	r2, [r3, #0]
 8002728:	e005      	b.n	8002736 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2200      	movs	r2, #0
 800272e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002732:	2302      	movs	r3, #2
 8002734:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002736:	7dfb      	ldrb	r3, [r7, #23]
}
 8002738:	4618      	mov	r0, r3
 800273a:	3718      	adds	r7, #24
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}

08002740 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b086      	sub	sp, #24
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002748:	2300      	movs	r3, #0
 800274a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800274c:	4b8e      	ldr	r3, [pc, #568]	; (8002988 <HAL_DMA_IRQHandler+0x248>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a8e      	ldr	r2, [pc, #568]	; (800298c <HAL_DMA_IRQHandler+0x24c>)
 8002752:	fba2 2303 	umull	r2, r3, r2, r3
 8002756:	0a9b      	lsrs	r3, r3, #10
 8002758:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800275e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800276a:	2208      	movs	r2, #8
 800276c:	409a      	lsls	r2, r3
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	4013      	ands	r3, r2
 8002772:	2b00      	cmp	r3, #0
 8002774:	d01a      	beq.n	80027ac <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0304 	and.w	r3, r3, #4
 8002780:	2b00      	cmp	r3, #0
 8002782:	d013      	beq.n	80027ac <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f022 0204 	bic.w	r2, r2, #4
 8002792:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002798:	2208      	movs	r2, #8
 800279a:	409a      	lsls	r2, r3
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027a4:	f043 0201 	orr.w	r2, r3, #1
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027b0:	2201      	movs	r2, #1
 80027b2:	409a      	lsls	r2, r3
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	4013      	ands	r3, r2
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d012      	beq.n	80027e2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	695b      	ldr	r3, [r3, #20]
 80027c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d00b      	beq.n	80027e2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ce:	2201      	movs	r2, #1
 80027d0:	409a      	lsls	r2, r3
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027da:	f043 0202 	orr.w	r2, r3, #2
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027e6:	2204      	movs	r2, #4
 80027e8:	409a      	lsls	r2, r3
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	4013      	ands	r3, r2
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d012      	beq.n	8002818 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0302 	and.w	r3, r3, #2
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d00b      	beq.n	8002818 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002804:	2204      	movs	r2, #4
 8002806:	409a      	lsls	r2, r3
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002810:	f043 0204 	orr.w	r2, r3, #4
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800281c:	2210      	movs	r2, #16
 800281e:	409a      	lsls	r2, r3
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	4013      	ands	r3, r2
 8002824:	2b00      	cmp	r3, #0
 8002826:	d043      	beq.n	80028b0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0308 	and.w	r3, r3, #8
 8002832:	2b00      	cmp	r3, #0
 8002834:	d03c      	beq.n	80028b0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800283a:	2210      	movs	r2, #16
 800283c:	409a      	lsls	r2, r3
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d018      	beq.n	8002882 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d108      	bne.n	8002870 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002862:	2b00      	cmp	r3, #0
 8002864:	d024      	beq.n	80028b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	4798      	blx	r3
 800286e:	e01f      	b.n	80028b0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002874:	2b00      	cmp	r3, #0
 8002876:	d01b      	beq.n	80028b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	4798      	blx	r3
 8002880:	e016      	b.n	80028b0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800288c:	2b00      	cmp	r3, #0
 800288e:	d107      	bne.n	80028a0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f022 0208 	bic.w	r2, r2, #8
 800289e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d003      	beq.n	80028b0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028b4:	2220      	movs	r2, #32
 80028b6:	409a      	lsls	r2, r3
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	4013      	ands	r3, r2
 80028bc:	2b00      	cmp	r3, #0
 80028be:	f000 808f 	beq.w	80029e0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0310 	and.w	r3, r3, #16
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	f000 8087 	beq.w	80029e0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028d6:	2220      	movs	r2, #32
 80028d8:	409a      	lsls	r2, r3
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	2b05      	cmp	r3, #5
 80028e8:	d136      	bne.n	8002958 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f022 0216 	bic.w	r2, r2, #22
 80028f8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	695a      	ldr	r2, [r3, #20]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002908:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290e:	2b00      	cmp	r3, #0
 8002910:	d103      	bne.n	800291a <HAL_DMA_IRQHandler+0x1da>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002916:	2b00      	cmp	r3, #0
 8002918:	d007      	beq.n	800292a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f022 0208 	bic.w	r2, r2, #8
 8002928:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800292e:	223f      	movs	r2, #63	; 0x3f
 8002930:	409a      	lsls	r2, r3
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2201      	movs	r2, #1
 800293a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800294a:	2b00      	cmp	r3, #0
 800294c:	d07e      	beq.n	8002a4c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	4798      	blx	r3
        }
        return;
 8002956:	e079      	b.n	8002a4c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d01d      	beq.n	80029a2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d10d      	bne.n	8002990 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002978:	2b00      	cmp	r3, #0
 800297a:	d031      	beq.n	80029e0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	4798      	blx	r3
 8002984:	e02c      	b.n	80029e0 <HAL_DMA_IRQHandler+0x2a0>
 8002986:	bf00      	nop
 8002988:	2000119c 	.word	0x2000119c
 800298c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002994:	2b00      	cmp	r3, #0
 8002996:	d023      	beq.n	80029e0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	4798      	blx	r3
 80029a0:	e01e      	b.n	80029e0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d10f      	bne.n	80029d0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f022 0210 	bic.w	r2, r2, #16
 80029be:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d003      	beq.n	80029e0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d032      	beq.n	8002a4e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ec:	f003 0301 	and.w	r3, r3, #1
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d022      	beq.n	8002a3a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2205      	movs	r2, #5
 80029f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f022 0201 	bic.w	r2, r2, #1
 8002a0a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	3301      	adds	r3, #1
 8002a10:	60bb      	str	r3, [r7, #8]
 8002a12:	697a      	ldr	r2, [r7, #20]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d307      	bcc.n	8002a28 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d1f2      	bne.n	8002a0c <HAL_DMA_IRQHandler+0x2cc>
 8002a26:	e000      	b.n	8002a2a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002a28:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d005      	beq.n	8002a4e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	4798      	blx	r3
 8002a4a:	e000      	b.n	8002a4e <HAL_DMA_IRQHandler+0x30e>
        return;
 8002a4c:	bf00      	nop
    }
  }
}
 8002a4e:	3718      	adds	r7, #24
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}

08002a54 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b085      	sub	sp, #20
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	60b9      	str	r1, [r7, #8]
 8002a5e:	607a      	str	r2, [r7, #4]
 8002a60:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002a70:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	683a      	ldr	r2, [r7, #0]
 8002a78:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	2b40      	cmp	r3, #64	; 0x40
 8002a80:	d108      	bne.n	8002a94 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	68ba      	ldr	r2, [r7, #8]
 8002a90:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002a92:	e007      	b.n	8002aa4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	68ba      	ldr	r2, [r7, #8]
 8002a9a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	60da      	str	r2, [r3, #12]
}
 8002aa4:	bf00      	nop
 8002aa6:	3714      	adds	r7, #20
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr

08002ab0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b085      	sub	sp, #20
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	3b10      	subs	r3, #16
 8002ac0:	4a14      	ldr	r2, [pc, #80]	; (8002b14 <DMA_CalcBaseAndBitshift+0x64>)
 8002ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac6:	091b      	lsrs	r3, r3, #4
 8002ac8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002aca:	4a13      	ldr	r2, [pc, #76]	; (8002b18 <DMA_CalcBaseAndBitshift+0x68>)
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	4413      	add	r3, r2
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2b03      	cmp	r3, #3
 8002adc:	d909      	bls.n	8002af2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002ae6:	f023 0303 	bic.w	r3, r3, #3
 8002aea:	1d1a      	adds	r2, r3, #4
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	659a      	str	r2, [r3, #88]	; 0x58
 8002af0:	e007      	b.n	8002b02 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002afa:	f023 0303 	bic.w	r3, r3, #3
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3714      	adds	r7, #20
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr
 8002b12:	bf00      	nop
 8002b14:	aaaaaaab 	.word	0xaaaaaaab
 8002b18:	08006e50 	.word	0x08006e50

08002b1c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b085      	sub	sp, #20
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b24:	2300      	movs	r3, #0
 8002b26:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b2c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	699b      	ldr	r3, [r3, #24]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d11f      	bne.n	8002b76 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	2b03      	cmp	r3, #3
 8002b3a:	d856      	bhi.n	8002bea <DMA_CheckFifoParam+0xce>
 8002b3c:	a201      	add	r2, pc, #4	; (adr r2, 8002b44 <DMA_CheckFifoParam+0x28>)
 8002b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b42:	bf00      	nop
 8002b44:	08002b55 	.word	0x08002b55
 8002b48:	08002b67 	.word	0x08002b67
 8002b4c:	08002b55 	.word	0x08002b55
 8002b50:	08002beb 	.word	0x08002beb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d046      	beq.n	8002bee <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b64:	e043      	b.n	8002bee <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b6a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b6e:	d140      	bne.n	8002bf2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b74:	e03d      	b.n	8002bf2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	699b      	ldr	r3, [r3, #24]
 8002b7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b7e:	d121      	bne.n	8002bc4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	2b03      	cmp	r3, #3
 8002b84:	d837      	bhi.n	8002bf6 <DMA_CheckFifoParam+0xda>
 8002b86:	a201      	add	r2, pc, #4	; (adr r2, 8002b8c <DMA_CheckFifoParam+0x70>)
 8002b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b8c:	08002b9d 	.word	0x08002b9d
 8002b90:	08002ba3 	.word	0x08002ba3
 8002b94:	08002b9d 	.word	0x08002b9d
 8002b98:	08002bb5 	.word	0x08002bb5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	73fb      	strb	r3, [r7, #15]
      break;
 8002ba0:	e030      	b.n	8002c04 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d025      	beq.n	8002bfa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bb2:	e022      	b.n	8002bfa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002bbc:	d11f      	bne.n	8002bfe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002bc2:	e01c      	b.n	8002bfe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d903      	bls.n	8002bd2 <DMA_CheckFifoParam+0xb6>
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	2b03      	cmp	r3, #3
 8002bce:	d003      	beq.n	8002bd8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002bd0:	e018      	b.n	8002c04 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	73fb      	strb	r3, [r7, #15]
      break;
 8002bd6:	e015      	b.n	8002c04 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bdc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d00e      	beq.n	8002c02 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	73fb      	strb	r3, [r7, #15]
      break;
 8002be8:	e00b      	b.n	8002c02 <DMA_CheckFifoParam+0xe6>
      break;
 8002bea:	bf00      	nop
 8002bec:	e00a      	b.n	8002c04 <DMA_CheckFifoParam+0xe8>
      break;
 8002bee:	bf00      	nop
 8002bf0:	e008      	b.n	8002c04 <DMA_CheckFifoParam+0xe8>
      break;
 8002bf2:	bf00      	nop
 8002bf4:	e006      	b.n	8002c04 <DMA_CheckFifoParam+0xe8>
      break;
 8002bf6:	bf00      	nop
 8002bf8:	e004      	b.n	8002c04 <DMA_CheckFifoParam+0xe8>
      break;
 8002bfa:	bf00      	nop
 8002bfc:	e002      	b.n	8002c04 <DMA_CheckFifoParam+0xe8>
      break;   
 8002bfe:	bf00      	nop
 8002c00:	e000      	b.n	8002c04 <DMA_CheckFifoParam+0xe8>
      break;
 8002c02:	bf00      	nop
    }
  } 
  
  return status; 
 8002c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3714      	adds	r7, #20
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop

08002c14 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d101      	bne.n	8002c26 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e06c      	b.n	8002d00 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d106      	bne.n	8002c3e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2223      	movs	r2, #35	; 0x23
 8002c34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f7fe ff4d 	bl	8001ad8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c3e:	2300      	movs	r3, #0
 8002c40:	60bb      	str	r3, [r7, #8]
 8002c42:	4b31      	ldr	r3, [pc, #196]	; (8002d08 <HAL_ETH_Init+0xf4>)
 8002c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c46:	4a30      	ldr	r2, [pc, #192]	; (8002d08 <HAL_ETH_Init+0xf4>)
 8002c48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c4c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c4e:	4b2e      	ldr	r3, [pc, #184]	; (8002d08 <HAL_ETH_Init+0xf4>)
 8002c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c56:	60bb      	str	r3, [r7, #8]
 8002c58:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002c5a:	4b2c      	ldr	r3, [pc, #176]	; (8002d0c <HAL_ETH_Init+0xf8>)
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	4a2b      	ldr	r2, [pc, #172]	; (8002d0c <HAL_ETH_Init+0xf8>)
 8002c60:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002c64:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002c66:	4b29      	ldr	r3, [pc, #164]	; (8002d0c <HAL_ETH_Init+0xf8>)
 8002c68:	685a      	ldr	r2, [r3, #4]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	4927      	ldr	r1, [pc, #156]	; (8002d0c <HAL_ETH_Init+0xf8>)
 8002c70:	4313      	orrs	r3, r2
 8002c72:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002c74:	4b25      	ldr	r3, [pc, #148]	; (8002d0c <HAL_ETH_Init+0xf8>)
 8002c76:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	6812      	ldr	r2, [r2, #0]
 8002c86:	f043 0301 	orr.w	r3, r3, #1
 8002c8a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002c8e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c90:	f7ff fb0e 	bl	80022b0 <HAL_GetTick>
 8002c94:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002c96:	e011      	b.n	8002cbc <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002c98:	f7ff fb0a 	bl	80022b0 <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002ca6:	d909      	bls.n	8002cbc <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2204      	movs	r2, #4
 8002cac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	22e0      	movs	r2, #224	; 0xe0
 8002cb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e021      	b.n	8002d00 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0301 	and.w	r3, r3, #1
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d1e4      	bne.n	8002c98 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f000 f944 	bl	8002f5c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f000 f9eb 	bl	80030b0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f000 fa41 	bl	8003162 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	2100      	movs	r1, #0
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f000 f9a9 	bl	8003040 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2210      	movs	r2, #16
 8002cfa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002cfe:	2300      	movs	r3, #0
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3710      	adds	r7, #16
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	40023800 	.word	0x40023800
 8002d0c:	40013800 	.word	0x40013800

08002d10 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002d22:	68fa      	ldr	r2, [r7, #12]
 8002d24:	4b47      	ldr	r3, [pc, #284]	; (8002e44 <ETH_SetMACConfig+0x134>)
 8002d26:	4013      	ands	r3, r2
 8002d28:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	7c1b      	ldrb	r3, [r3, #16]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d102      	bne.n	8002d38 <ETH_SetMACConfig+0x28>
 8002d32:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002d36:	e000      	b.n	8002d3a <ETH_SetMACConfig+0x2a>
 8002d38:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	7c5b      	ldrb	r3, [r3, #17]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d102      	bne.n	8002d48 <ETH_SetMACConfig+0x38>
 8002d42:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002d46:	e000      	b.n	8002d4a <ETH_SetMACConfig+0x3a>
 8002d48:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002d4a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002d50:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	7fdb      	ldrb	r3, [r3, #31]
 8002d56:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002d58:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002d5e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002d60:	683a      	ldr	r2, [r7, #0]
 8002d62:	7f92      	ldrb	r2, [r2, #30]
 8002d64:	2a00      	cmp	r2, #0
 8002d66:	d102      	bne.n	8002d6e <ETH_SetMACConfig+0x5e>
 8002d68:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d6c:	e000      	b.n	8002d70 <ETH_SetMACConfig+0x60>
 8002d6e:	2200      	movs	r2, #0
                        macconf->Speed |
 8002d70:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	7f1b      	ldrb	r3, [r3, #28]
 8002d76:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002d78:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002d7e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	791b      	ldrb	r3, [r3, #4]
 8002d84:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002d86:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002d88:	683a      	ldr	r2, [r7, #0]
 8002d8a:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002d8e:	2a00      	cmp	r2, #0
 8002d90:	d102      	bne.n	8002d98 <ETH_SetMACConfig+0x88>
 8002d92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d96:	e000      	b.n	8002d9a <ETH_SetMACConfig+0x8a>
 8002d98:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002d9a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	7bdb      	ldrb	r3, [r3, #15]
 8002da0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002da2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002da8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002db0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002db2:	4313      	orrs	r3, r2
 8002db4:	68fa      	ldr	r2, [r7, #12]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	68fa      	ldr	r2, [r7, #12]
 8002dc0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002dca:	2001      	movs	r0, #1
 8002dcc:	f7ff fa7c 	bl	80022c8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	68fa      	ldr	r2, [r7, #12]
 8002dd6:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	699b      	ldr	r3, [r3, #24]
 8002dde:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002de0:	68fa      	ldr	r2, [r7, #12]
 8002de2:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002de6:	4013      	ands	r3, r2
 8002de8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dee:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->ZeroQuantaPause |
 8002df0:	683a      	ldr	r2, [r7, #0]
 8002df2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002df6:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        (uint32_t)macconf->ZeroQuantaPause |
 8002dfc:	4313      	orrs	r3, r2
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 8002dfe:	683a      	ldr	r2, [r7, #0]
 8002e00:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
                        macconf->PauseLowThreshold |
 8002e04:	4313      	orrs	r3, r2
                        (uint32_t)macconf->ReceiveFlowControl |
 8002e06:	683a      	ldr	r2, [r7, #0]
 8002e08:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 8002e0c:	4313      	orrs	r3, r2
                        (uint32_t)macconf->TransmitFlowControl);
 8002e0e:	683a      	ldr	r2, [r7, #0]
 8002e10:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002e14:	4313      	orrs	r3, r2
 8002e16:	68fa      	ldr	r2, [r7, #12]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	68fa      	ldr	r2, [r7, #12]
 8002e22:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	699b      	ldr	r3, [r3, #24]
 8002e2a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e2c:	2001      	movs	r0, #1
 8002e2e:	f7ff fa4b 	bl	80022c8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	68fa      	ldr	r2, [r7, #12]
 8002e38:	619a      	str	r2, [r3, #24]
}
 8002e3a:	bf00      	nop
 8002e3c:	3710      	adds	r7, #16
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	ff20810f 	.word	0xff20810f

08002e48 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e5a:	699b      	ldr	r3, [r3, #24]
 8002e5c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002e5e:	68fa      	ldr	r2, [r7, #12]
 8002e60:	4b3d      	ldr	r3, [pc, #244]	; (8002f58 <ETH_SetDMAConfig+0x110>)
 8002e62:	4013      	ands	r3, r2
 8002e64:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	7b1b      	ldrb	r3, [r3, #12]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d102      	bne.n	8002e74 <ETH_SetDMAConfig+0x2c>
 8002e6e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002e72:	e000      	b.n	8002e76 <ETH_SetDMAConfig+0x2e>
 8002e74:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	7b5b      	ldrb	r3, [r3, #13]
 8002e7a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002e7c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002e7e:	683a      	ldr	r2, [r7, #0]
 8002e80:	7f52      	ldrb	r2, [r2, #29]
 8002e82:	2a00      	cmp	r2, #0
 8002e84:	d102      	bne.n	8002e8c <ETH_SetDMAConfig+0x44>
 8002e86:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002e8a:	e000      	b.n	8002e8e <ETH_SetDMAConfig+0x46>
 8002e8c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002e8e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	7b9b      	ldrb	r3, [r3, #14]
 8002e94:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002e96:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002e9c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	7f1b      	ldrb	r3, [r3, #28]
 8002ea2:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002ea4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	7f9b      	ldrb	r3, [r3, #30]
 8002eaa:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002eac:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002eb2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002eba:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	68fa      	ldr	r2, [r7, #12]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ecc:	461a      	mov	r2, r3
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002eda:	699b      	ldr	r3, [r3, #24]
 8002edc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002ede:	2001      	movs	r0, #1
 8002ee0:	f7ff f9f2 	bl	80022c8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002eec:	461a      	mov	r2, r3
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	791b      	ldrb	r3, [r3, #4]
 8002ef6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002efc:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002f02:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002f08:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002f10:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002f12:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f18:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002f1a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002f20:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	6812      	ldr	r2, [r2, #0]
 8002f26:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002f2a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002f2e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f3c:	2001      	movs	r0, #1
 8002f3e:	f7ff f9c3 	bl	80022c8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6013      	str	r3, [r2, #0]
}
 8002f50:	bf00      	nop
 8002f52:	3710      	adds	r7, #16
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	f8de3f23 	.word	0xf8de3f23

08002f5c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b0a6      	sub	sp, #152	; 0x98
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002f64:	2301      	movs	r3, #1
 8002f66:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002f70:	2300      	movs	r3, #0
 8002f72:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002f74:	2300      	movs	r3, #0
 8002f76:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002f80:	2300      	movs	r3, #0
 8002f82:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002f86:	2301      	movs	r3, #1
 8002f88:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002f92:	2300      	movs	r3, #0
 8002f94:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002fac:	2300      	movs	r3, #0
 8002fae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002fbe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002fc2:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002fc4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002fc8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002fd0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f7ff fe9a 	bl	8002d10 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002fea:	2301      	movs	r3, #1
 8002fec:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002ffe:	2300      	movs	r3, #0
 8003000:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003002:	2301      	movs	r3, #1
 8003004:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003008:	2301      	movs	r3, #1
 800300a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800300c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003010:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003012:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003016:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003018:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800301c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800301e:	2301      	movs	r3, #1
 8003020:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003024:	2300      	movs	r3, #0
 8003026:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003028:	2300      	movs	r3, #0
 800302a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800302c:	f107 0308 	add.w	r3, r7, #8
 8003030:	4619      	mov	r1, r3
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f7ff ff08 	bl	8002e48 <ETH_SetDMAConfig>
}
 8003038:	bf00      	nop
 800303a:	3798      	adds	r7, #152	; 0x98
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}

08003040 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003040:	b480      	push	{r7}
 8003042:	b087      	sub	sp, #28
 8003044:	af00      	add	r7, sp, #0
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	60b9      	str	r1, [r7, #8]
 800304a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	3305      	adds	r3, #5
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	021b      	lsls	r3, r3, #8
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	3204      	adds	r2, #4
 8003058:	7812      	ldrb	r2, [r2, #0]
 800305a:	4313      	orrs	r3, r2
 800305c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800305e:	68ba      	ldr	r2, [r7, #8]
 8003060:	4b11      	ldr	r3, [pc, #68]	; (80030a8 <ETH_MACAddressConfig+0x68>)
 8003062:	4413      	add	r3, r2
 8003064:	461a      	mov	r2, r3
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	3303      	adds	r3, #3
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	061a      	lsls	r2, r3, #24
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	3302      	adds	r3, #2
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	041b      	lsls	r3, r3, #16
 800307a:	431a      	orrs	r2, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	3301      	adds	r3, #1
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	021b      	lsls	r3, r3, #8
 8003084:	4313      	orrs	r3, r2
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	7812      	ldrb	r2, [r2, #0]
 800308a:	4313      	orrs	r3, r2
 800308c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800308e:	68ba      	ldr	r2, [r7, #8]
 8003090:	4b06      	ldr	r3, [pc, #24]	; (80030ac <ETH_MACAddressConfig+0x6c>)
 8003092:	4413      	add	r3, r2
 8003094:	461a      	mov	r2, r3
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	6013      	str	r3, [r2, #0]
}
 800309a:	bf00      	nop
 800309c:	371c      	adds	r7, #28
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	40028040 	.word	0x40028040
 80030ac:	40028044 	.word	0x40028044

080030b0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b085      	sub	sp, #20
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80030b8:	2300      	movs	r3, #0
 80030ba:	60fb      	str	r3, [r7, #12]
 80030bc:	e03e      	b.n	800313c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	68d9      	ldr	r1, [r3, #12]
 80030c2:	68fa      	ldr	r2, [r7, #12]
 80030c4:	4613      	mov	r3, r2
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	4413      	add	r3, r2
 80030ca:	00db      	lsls	r3, r3, #3
 80030cc:	440b      	add	r3, r1
 80030ce:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	2200      	movs	r2, #0
 80030d4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	2200      	movs	r2, #0
 80030da:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	2200      	movs	r2, #0
 80030e0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	2200      	movs	r2, #0
 80030e6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80030e8:	68b9      	ldr	r1, [r7, #8]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	68fa      	ldr	r2, [r7, #12]
 80030ee:	3206      	adds	r2, #6
 80030f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2b02      	cmp	r3, #2
 8003104:	d80c      	bhi.n	8003120 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	68d9      	ldr	r1, [r3, #12]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	1c5a      	adds	r2, r3, #1
 800310e:	4613      	mov	r3, r2
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	4413      	add	r3, r2
 8003114:	00db      	lsls	r3, r3, #3
 8003116:	440b      	add	r3, r1
 8003118:	461a      	mov	r2, r3
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	60da      	str	r2, [r3, #12]
 800311e:	e004      	b.n	800312a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	461a      	mov	r2, r3
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	3301      	adds	r3, #1
 800313a:	60fb      	str	r3, [r7, #12]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2b03      	cmp	r3, #3
 8003140:	d9bd      	bls.n	80030be <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	68da      	ldr	r2, [r3, #12]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003154:	611a      	str	r2, [r3, #16]
}
 8003156:	bf00      	nop
 8003158:	3714      	adds	r7, #20
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr

08003162 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003162:	b480      	push	{r7}
 8003164:	b085      	sub	sp, #20
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800316a:	2300      	movs	r3, #0
 800316c:	60fb      	str	r3, [r7, #12]
 800316e:	e046      	b.n	80031fe <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6919      	ldr	r1, [r3, #16]
 8003174:	68fa      	ldr	r2, [r7, #12]
 8003176:	4613      	mov	r3, r2
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	4413      	add	r3, r2
 800317c:	00db      	lsls	r3, r3, #3
 800317e:	440b      	add	r3, r1
 8003180:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	2200      	movs	r2, #0
 8003186:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	2200      	movs	r2, #0
 800318c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	2200      	movs	r2, #0
 8003192:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	2200      	movs	r2, #0
 8003198:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	2200      	movs	r2, #0
 800319e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	2200      	movs	r2, #0
 80031a4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80031ac:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	f244 52f8 	movw	r2, #17912	; 0x45f8
 80031b4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80031c2:	68b9      	ldr	r1, [r7, #8]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	68fa      	ldr	r2, [r7, #12]
 80031c8:	3212      	adds	r2, #18
 80031ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	d80c      	bhi.n	80031ee <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6919      	ldr	r1, [r3, #16]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	1c5a      	adds	r2, r3, #1
 80031dc:	4613      	mov	r3, r2
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	4413      	add	r3, r2
 80031e2:	00db      	lsls	r3, r3, #3
 80031e4:	440b      	add	r3, r1
 80031e6:	461a      	mov	r2, r3
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	60da      	str	r2, [r3, #12]
 80031ec:	e004      	b.n	80031f8 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	461a      	mov	r2, r3
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	3301      	adds	r3, #1
 80031fc:	60fb      	str	r3, [r7, #12]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2b03      	cmp	r3, #3
 8003202:	d9b5      	bls.n	8003170 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	691a      	ldr	r2, [r3, #16]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800322e:	60da      	str	r2, [r3, #12]
}
 8003230:	bf00      	nop
 8003232:	3714      	adds	r7, #20
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr

0800323c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800323c:	b480      	push	{r7}
 800323e:	b089      	sub	sp, #36	; 0x24
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003246:	2300      	movs	r3, #0
 8003248:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800324a:	2300      	movs	r3, #0
 800324c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800324e:	2300      	movs	r3, #0
 8003250:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003252:	2300      	movs	r3, #0
 8003254:	61fb      	str	r3, [r7, #28]
 8003256:	e177      	b.n	8003548 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003258:	2201      	movs	r2, #1
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	fa02 f303 	lsl.w	r3, r2, r3
 8003260:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	697a      	ldr	r2, [r7, #20]
 8003268:	4013      	ands	r3, r2
 800326a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800326c:	693a      	ldr	r2, [r7, #16]
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	429a      	cmp	r2, r3
 8003272:	f040 8166 	bne.w	8003542 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	f003 0303 	and.w	r3, r3, #3
 800327e:	2b01      	cmp	r3, #1
 8003280:	d005      	beq.n	800328e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800328a:	2b02      	cmp	r3, #2
 800328c:	d130      	bne.n	80032f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	005b      	lsls	r3, r3, #1
 8003298:	2203      	movs	r2, #3
 800329a:	fa02 f303 	lsl.w	r3, r2, r3
 800329e:	43db      	mvns	r3, r3
 80032a0:	69ba      	ldr	r2, [r7, #24]
 80032a2:	4013      	ands	r3, r2
 80032a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	68da      	ldr	r2, [r3, #12]
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	005b      	lsls	r3, r3, #1
 80032ae:	fa02 f303 	lsl.w	r3, r2, r3
 80032b2:	69ba      	ldr	r2, [r7, #24]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	69ba      	ldr	r2, [r7, #24]
 80032bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032c4:	2201      	movs	r2, #1
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	fa02 f303 	lsl.w	r3, r2, r3
 80032cc:	43db      	mvns	r3, r3
 80032ce:	69ba      	ldr	r2, [r7, #24]
 80032d0:	4013      	ands	r3, r2
 80032d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	091b      	lsrs	r3, r3, #4
 80032da:	f003 0201 	and.w	r2, r3, #1
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	fa02 f303 	lsl.w	r3, r2, r3
 80032e4:	69ba      	ldr	r2, [r7, #24]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	69ba      	ldr	r2, [r7, #24]
 80032ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f003 0303 	and.w	r3, r3, #3
 80032f8:	2b03      	cmp	r3, #3
 80032fa:	d017      	beq.n	800332c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	005b      	lsls	r3, r3, #1
 8003306:	2203      	movs	r2, #3
 8003308:	fa02 f303 	lsl.w	r3, r2, r3
 800330c:	43db      	mvns	r3, r3
 800330e:	69ba      	ldr	r2, [r7, #24]
 8003310:	4013      	ands	r3, r2
 8003312:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	689a      	ldr	r2, [r3, #8]
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	005b      	lsls	r3, r3, #1
 800331c:	fa02 f303 	lsl.w	r3, r2, r3
 8003320:	69ba      	ldr	r2, [r7, #24]
 8003322:	4313      	orrs	r3, r2
 8003324:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	69ba      	ldr	r2, [r7, #24]
 800332a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f003 0303 	and.w	r3, r3, #3
 8003334:	2b02      	cmp	r3, #2
 8003336:	d123      	bne.n	8003380 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	08da      	lsrs	r2, r3, #3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	3208      	adds	r2, #8
 8003340:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003344:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	f003 0307 	and.w	r3, r3, #7
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	220f      	movs	r2, #15
 8003350:	fa02 f303 	lsl.w	r3, r2, r3
 8003354:	43db      	mvns	r3, r3
 8003356:	69ba      	ldr	r2, [r7, #24]
 8003358:	4013      	ands	r3, r2
 800335a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	691a      	ldr	r2, [r3, #16]
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	f003 0307 	and.w	r3, r3, #7
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	fa02 f303 	lsl.w	r3, r2, r3
 800336c:	69ba      	ldr	r2, [r7, #24]
 800336e:	4313      	orrs	r3, r2
 8003370:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	08da      	lsrs	r2, r3, #3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	3208      	adds	r2, #8
 800337a:	69b9      	ldr	r1, [r7, #24]
 800337c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	005b      	lsls	r3, r3, #1
 800338a:	2203      	movs	r2, #3
 800338c:	fa02 f303 	lsl.w	r3, r2, r3
 8003390:	43db      	mvns	r3, r3
 8003392:	69ba      	ldr	r2, [r7, #24]
 8003394:	4013      	ands	r3, r2
 8003396:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f003 0203 	and.w	r2, r3, #3
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	005b      	lsls	r3, r3, #1
 80033a4:	fa02 f303 	lsl.w	r3, r2, r3
 80033a8:	69ba      	ldr	r2, [r7, #24]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	69ba      	ldr	r2, [r7, #24]
 80033b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	f000 80c0 	beq.w	8003542 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033c2:	2300      	movs	r3, #0
 80033c4:	60fb      	str	r3, [r7, #12]
 80033c6:	4b66      	ldr	r3, [pc, #408]	; (8003560 <HAL_GPIO_Init+0x324>)
 80033c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ca:	4a65      	ldr	r2, [pc, #404]	; (8003560 <HAL_GPIO_Init+0x324>)
 80033cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033d0:	6453      	str	r3, [r2, #68]	; 0x44
 80033d2:	4b63      	ldr	r3, [pc, #396]	; (8003560 <HAL_GPIO_Init+0x324>)
 80033d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033da:	60fb      	str	r3, [r7, #12]
 80033dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80033de:	4a61      	ldr	r2, [pc, #388]	; (8003564 <HAL_GPIO_Init+0x328>)
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	089b      	lsrs	r3, r3, #2
 80033e4:	3302      	adds	r3, #2
 80033e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	f003 0303 	and.w	r3, r3, #3
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	220f      	movs	r2, #15
 80033f6:	fa02 f303 	lsl.w	r3, r2, r3
 80033fa:	43db      	mvns	r3, r3
 80033fc:	69ba      	ldr	r2, [r7, #24]
 80033fe:	4013      	ands	r3, r2
 8003400:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a58      	ldr	r2, [pc, #352]	; (8003568 <HAL_GPIO_Init+0x32c>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d037      	beq.n	800347a <HAL_GPIO_Init+0x23e>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a57      	ldr	r2, [pc, #348]	; (800356c <HAL_GPIO_Init+0x330>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d031      	beq.n	8003476 <HAL_GPIO_Init+0x23a>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a56      	ldr	r2, [pc, #344]	; (8003570 <HAL_GPIO_Init+0x334>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d02b      	beq.n	8003472 <HAL_GPIO_Init+0x236>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a55      	ldr	r2, [pc, #340]	; (8003574 <HAL_GPIO_Init+0x338>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d025      	beq.n	800346e <HAL_GPIO_Init+0x232>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a54      	ldr	r2, [pc, #336]	; (8003578 <HAL_GPIO_Init+0x33c>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d01f      	beq.n	800346a <HAL_GPIO_Init+0x22e>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a53      	ldr	r2, [pc, #332]	; (800357c <HAL_GPIO_Init+0x340>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d019      	beq.n	8003466 <HAL_GPIO_Init+0x22a>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a52      	ldr	r2, [pc, #328]	; (8003580 <HAL_GPIO_Init+0x344>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d013      	beq.n	8003462 <HAL_GPIO_Init+0x226>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a51      	ldr	r2, [pc, #324]	; (8003584 <HAL_GPIO_Init+0x348>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d00d      	beq.n	800345e <HAL_GPIO_Init+0x222>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4a50      	ldr	r2, [pc, #320]	; (8003588 <HAL_GPIO_Init+0x34c>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d007      	beq.n	800345a <HAL_GPIO_Init+0x21e>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a4f      	ldr	r2, [pc, #316]	; (800358c <HAL_GPIO_Init+0x350>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d101      	bne.n	8003456 <HAL_GPIO_Init+0x21a>
 8003452:	2309      	movs	r3, #9
 8003454:	e012      	b.n	800347c <HAL_GPIO_Init+0x240>
 8003456:	230a      	movs	r3, #10
 8003458:	e010      	b.n	800347c <HAL_GPIO_Init+0x240>
 800345a:	2308      	movs	r3, #8
 800345c:	e00e      	b.n	800347c <HAL_GPIO_Init+0x240>
 800345e:	2307      	movs	r3, #7
 8003460:	e00c      	b.n	800347c <HAL_GPIO_Init+0x240>
 8003462:	2306      	movs	r3, #6
 8003464:	e00a      	b.n	800347c <HAL_GPIO_Init+0x240>
 8003466:	2305      	movs	r3, #5
 8003468:	e008      	b.n	800347c <HAL_GPIO_Init+0x240>
 800346a:	2304      	movs	r3, #4
 800346c:	e006      	b.n	800347c <HAL_GPIO_Init+0x240>
 800346e:	2303      	movs	r3, #3
 8003470:	e004      	b.n	800347c <HAL_GPIO_Init+0x240>
 8003472:	2302      	movs	r3, #2
 8003474:	e002      	b.n	800347c <HAL_GPIO_Init+0x240>
 8003476:	2301      	movs	r3, #1
 8003478:	e000      	b.n	800347c <HAL_GPIO_Init+0x240>
 800347a:	2300      	movs	r3, #0
 800347c:	69fa      	ldr	r2, [r7, #28]
 800347e:	f002 0203 	and.w	r2, r2, #3
 8003482:	0092      	lsls	r2, r2, #2
 8003484:	4093      	lsls	r3, r2
 8003486:	69ba      	ldr	r2, [r7, #24]
 8003488:	4313      	orrs	r3, r2
 800348a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800348c:	4935      	ldr	r1, [pc, #212]	; (8003564 <HAL_GPIO_Init+0x328>)
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	089b      	lsrs	r3, r3, #2
 8003492:	3302      	adds	r3, #2
 8003494:	69ba      	ldr	r2, [r7, #24]
 8003496:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800349a:	4b3d      	ldr	r3, [pc, #244]	; (8003590 <HAL_GPIO_Init+0x354>)
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	43db      	mvns	r3, r3
 80034a4:	69ba      	ldr	r2, [r7, #24]
 80034a6:	4013      	ands	r3, r2
 80034a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d003      	beq.n	80034be <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80034b6:	69ba      	ldr	r2, [r7, #24]
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80034be:	4a34      	ldr	r2, [pc, #208]	; (8003590 <HAL_GPIO_Init+0x354>)
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80034c4:	4b32      	ldr	r3, [pc, #200]	; (8003590 <HAL_GPIO_Init+0x354>)
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	43db      	mvns	r3, r3
 80034ce:	69ba      	ldr	r2, [r7, #24]
 80034d0:	4013      	ands	r3, r2
 80034d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d003      	beq.n	80034e8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80034e0:	69ba      	ldr	r2, [r7, #24]
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80034e8:	4a29      	ldr	r2, [pc, #164]	; (8003590 <HAL_GPIO_Init+0x354>)
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80034ee:	4b28      	ldr	r3, [pc, #160]	; (8003590 <HAL_GPIO_Init+0x354>)
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	43db      	mvns	r3, r3
 80034f8:	69ba      	ldr	r2, [r7, #24]
 80034fa:	4013      	ands	r3, r2
 80034fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d003      	beq.n	8003512 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800350a:	69ba      	ldr	r2, [r7, #24]
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	4313      	orrs	r3, r2
 8003510:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003512:	4a1f      	ldr	r2, [pc, #124]	; (8003590 <HAL_GPIO_Init+0x354>)
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003518:	4b1d      	ldr	r3, [pc, #116]	; (8003590 <HAL_GPIO_Init+0x354>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	43db      	mvns	r3, r3
 8003522:	69ba      	ldr	r2, [r7, #24]
 8003524:	4013      	ands	r3, r2
 8003526:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d003      	beq.n	800353c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003534:	69ba      	ldr	r2, [r7, #24]
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	4313      	orrs	r3, r2
 800353a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800353c:	4a14      	ldr	r2, [pc, #80]	; (8003590 <HAL_GPIO_Init+0x354>)
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	3301      	adds	r3, #1
 8003546:	61fb      	str	r3, [r7, #28]
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	2b0f      	cmp	r3, #15
 800354c:	f67f ae84 	bls.w	8003258 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003550:	bf00      	nop
 8003552:	bf00      	nop
 8003554:	3724      	adds	r7, #36	; 0x24
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr
 800355e:	bf00      	nop
 8003560:	40023800 	.word	0x40023800
 8003564:	40013800 	.word	0x40013800
 8003568:	40020000 	.word	0x40020000
 800356c:	40020400 	.word	0x40020400
 8003570:	40020800 	.word	0x40020800
 8003574:	40020c00 	.word	0x40020c00
 8003578:	40021000 	.word	0x40021000
 800357c:	40021400 	.word	0x40021400
 8003580:	40021800 	.word	0x40021800
 8003584:	40021c00 	.word	0x40021c00
 8003588:	40022000 	.word	0x40022000
 800358c:	40022400 	.word	0x40022400
 8003590:	40013c00 	.word	0x40013c00

08003594 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	460b      	mov	r3, r1
 800359e:	807b      	strh	r3, [r7, #2]
 80035a0:	4613      	mov	r3, r2
 80035a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035a4:	787b      	ldrb	r3, [r7, #1]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d003      	beq.n	80035b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035aa:	887a      	ldrh	r2, [r7, #2]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80035b0:	e003      	b.n	80035ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80035b2:	887b      	ldrh	r3, [r7, #2]
 80035b4:	041a      	lsls	r2, r3, #16
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	619a      	str	r2, [r3, #24]
}
 80035ba:	bf00      	nop
 80035bc:	370c      	adds	r7, #12
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr

080035c6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80035c6:	b480      	push	{r7}
 80035c8:	b085      	sub	sp, #20
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
 80035ce:	460b      	mov	r3, r1
 80035d0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	695b      	ldr	r3, [r3, #20]
 80035d6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80035d8:	887a      	ldrh	r2, [r7, #2]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	4013      	ands	r3, r2
 80035de:	041a      	lsls	r2, r3, #16
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	43d9      	mvns	r1, r3
 80035e4:	887b      	ldrh	r3, [r7, #2]
 80035e6:	400b      	ands	r3, r1
 80035e8:	431a      	orrs	r2, r3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	619a      	str	r2, [r3, #24]
}
 80035ee:	bf00      	nop
 80035f0:	3714      	adds	r7, #20
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr
	...

080035fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0
 8003602:	4603      	mov	r3, r0
 8003604:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003606:	4b08      	ldr	r3, [pc, #32]	; (8003628 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003608:	695a      	ldr	r2, [r3, #20]
 800360a:	88fb      	ldrh	r3, [r7, #6]
 800360c:	4013      	ands	r3, r2
 800360e:	2b00      	cmp	r3, #0
 8003610:	d006      	beq.n	8003620 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003612:	4a05      	ldr	r2, [pc, #20]	; (8003628 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003614:	88fb      	ldrh	r3, [r7, #6]
 8003616:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003618:	88fb      	ldrh	r3, [r7, #6]
 800361a:	4618      	mov	r0, r3
 800361c:	f7fd fc88 	bl	8000f30 <HAL_GPIO_EXTI_Callback>
  }
}
 8003620:	bf00      	nop
 8003622:	3708      	adds	r7, #8
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}
 8003628:	40013c00 	.word	0x40013c00

0800362c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800362c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800362e:	b08f      	sub	sp, #60	; 0x3c
 8003630:	af0a      	add	r7, sp, #40	; 0x28
 8003632:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d101      	bne.n	800363e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e10f      	b.n	800385e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800364a:	b2db      	uxtb	r3, r3
 800364c:	2b00      	cmp	r3, #0
 800364e:	d106      	bne.n	800365e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f7fe fcc9 	bl	8001ff0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2203      	movs	r2, #3
 8003662:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800366a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800366e:	2b00      	cmp	r3, #0
 8003670:	d102      	bne.n	8003678 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4618      	mov	r0, r3
 800367e:	f003 f902 	bl	8006886 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	603b      	str	r3, [r7, #0]
 8003688:	687e      	ldr	r6, [r7, #4]
 800368a:	466d      	mov	r5, sp
 800368c:	f106 0410 	add.w	r4, r6, #16
 8003690:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003692:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003694:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003696:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003698:	e894 0003 	ldmia.w	r4, {r0, r1}
 800369c:	e885 0003 	stmia.w	r5, {r0, r1}
 80036a0:	1d33      	adds	r3, r6, #4
 80036a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036a4:	6838      	ldr	r0, [r7, #0]
 80036a6:	f003 f88d 	bl	80067c4 <USB_CoreInit>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d005      	beq.n	80036bc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2202      	movs	r2, #2
 80036b4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e0d0      	b.n	800385e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2100      	movs	r1, #0
 80036c2:	4618      	mov	r0, r3
 80036c4:	f003 f8f0 	bl	80068a8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036c8:	2300      	movs	r3, #0
 80036ca:	73fb      	strb	r3, [r7, #15]
 80036cc:	e04a      	b.n	8003764 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80036ce:	7bfa      	ldrb	r2, [r7, #15]
 80036d0:	6879      	ldr	r1, [r7, #4]
 80036d2:	4613      	mov	r3, r2
 80036d4:	00db      	lsls	r3, r3, #3
 80036d6:	4413      	add	r3, r2
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	440b      	add	r3, r1
 80036dc:	333d      	adds	r3, #61	; 0x3d
 80036de:	2201      	movs	r2, #1
 80036e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80036e2:	7bfa      	ldrb	r2, [r7, #15]
 80036e4:	6879      	ldr	r1, [r7, #4]
 80036e6:	4613      	mov	r3, r2
 80036e8:	00db      	lsls	r3, r3, #3
 80036ea:	4413      	add	r3, r2
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	440b      	add	r3, r1
 80036f0:	333c      	adds	r3, #60	; 0x3c
 80036f2:	7bfa      	ldrb	r2, [r7, #15]
 80036f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80036f6:	7bfa      	ldrb	r2, [r7, #15]
 80036f8:	7bfb      	ldrb	r3, [r7, #15]
 80036fa:	b298      	uxth	r0, r3
 80036fc:	6879      	ldr	r1, [r7, #4]
 80036fe:	4613      	mov	r3, r2
 8003700:	00db      	lsls	r3, r3, #3
 8003702:	4413      	add	r3, r2
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	440b      	add	r3, r1
 8003708:	3344      	adds	r3, #68	; 0x44
 800370a:	4602      	mov	r2, r0
 800370c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800370e:	7bfa      	ldrb	r2, [r7, #15]
 8003710:	6879      	ldr	r1, [r7, #4]
 8003712:	4613      	mov	r3, r2
 8003714:	00db      	lsls	r3, r3, #3
 8003716:	4413      	add	r3, r2
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	440b      	add	r3, r1
 800371c:	3340      	adds	r3, #64	; 0x40
 800371e:	2200      	movs	r2, #0
 8003720:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003722:	7bfa      	ldrb	r2, [r7, #15]
 8003724:	6879      	ldr	r1, [r7, #4]
 8003726:	4613      	mov	r3, r2
 8003728:	00db      	lsls	r3, r3, #3
 800372a:	4413      	add	r3, r2
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	440b      	add	r3, r1
 8003730:	3348      	adds	r3, #72	; 0x48
 8003732:	2200      	movs	r2, #0
 8003734:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003736:	7bfa      	ldrb	r2, [r7, #15]
 8003738:	6879      	ldr	r1, [r7, #4]
 800373a:	4613      	mov	r3, r2
 800373c:	00db      	lsls	r3, r3, #3
 800373e:	4413      	add	r3, r2
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	440b      	add	r3, r1
 8003744:	334c      	adds	r3, #76	; 0x4c
 8003746:	2200      	movs	r2, #0
 8003748:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800374a:	7bfa      	ldrb	r2, [r7, #15]
 800374c:	6879      	ldr	r1, [r7, #4]
 800374e:	4613      	mov	r3, r2
 8003750:	00db      	lsls	r3, r3, #3
 8003752:	4413      	add	r3, r2
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	440b      	add	r3, r1
 8003758:	3354      	adds	r3, #84	; 0x54
 800375a:	2200      	movs	r2, #0
 800375c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800375e:	7bfb      	ldrb	r3, [r7, #15]
 8003760:	3301      	adds	r3, #1
 8003762:	73fb      	strb	r3, [r7, #15]
 8003764:	7bfa      	ldrb	r2, [r7, #15]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	429a      	cmp	r2, r3
 800376c:	d3af      	bcc.n	80036ce <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800376e:	2300      	movs	r3, #0
 8003770:	73fb      	strb	r3, [r7, #15]
 8003772:	e044      	b.n	80037fe <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003774:	7bfa      	ldrb	r2, [r7, #15]
 8003776:	6879      	ldr	r1, [r7, #4]
 8003778:	4613      	mov	r3, r2
 800377a:	00db      	lsls	r3, r3, #3
 800377c:	4413      	add	r3, r2
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	440b      	add	r3, r1
 8003782:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003786:	2200      	movs	r2, #0
 8003788:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800378a:	7bfa      	ldrb	r2, [r7, #15]
 800378c:	6879      	ldr	r1, [r7, #4]
 800378e:	4613      	mov	r3, r2
 8003790:	00db      	lsls	r3, r3, #3
 8003792:	4413      	add	r3, r2
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	440b      	add	r3, r1
 8003798:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800379c:	7bfa      	ldrb	r2, [r7, #15]
 800379e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80037a0:	7bfa      	ldrb	r2, [r7, #15]
 80037a2:	6879      	ldr	r1, [r7, #4]
 80037a4:	4613      	mov	r3, r2
 80037a6:	00db      	lsls	r3, r3, #3
 80037a8:	4413      	add	r3, r2
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	440b      	add	r3, r1
 80037ae:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80037b2:	2200      	movs	r2, #0
 80037b4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80037b6:	7bfa      	ldrb	r2, [r7, #15]
 80037b8:	6879      	ldr	r1, [r7, #4]
 80037ba:	4613      	mov	r3, r2
 80037bc:	00db      	lsls	r3, r3, #3
 80037be:	4413      	add	r3, r2
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	440b      	add	r3, r1
 80037c4:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80037c8:	2200      	movs	r2, #0
 80037ca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80037cc:	7bfa      	ldrb	r2, [r7, #15]
 80037ce:	6879      	ldr	r1, [r7, #4]
 80037d0:	4613      	mov	r3, r2
 80037d2:	00db      	lsls	r3, r3, #3
 80037d4:	4413      	add	r3, r2
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	440b      	add	r3, r1
 80037da:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80037de:	2200      	movs	r2, #0
 80037e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80037e2:	7bfa      	ldrb	r2, [r7, #15]
 80037e4:	6879      	ldr	r1, [r7, #4]
 80037e6:	4613      	mov	r3, r2
 80037e8:	00db      	lsls	r3, r3, #3
 80037ea:	4413      	add	r3, r2
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	440b      	add	r3, r1
 80037f0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80037f4:	2200      	movs	r2, #0
 80037f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037f8:	7bfb      	ldrb	r3, [r7, #15]
 80037fa:	3301      	adds	r3, #1
 80037fc:	73fb      	strb	r3, [r7, #15]
 80037fe:	7bfa      	ldrb	r2, [r7, #15]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	429a      	cmp	r2, r3
 8003806:	d3b5      	bcc.n	8003774 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	603b      	str	r3, [r7, #0]
 800380e:	687e      	ldr	r6, [r7, #4]
 8003810:	466d      	mov	r5, sp
 8003812:	f106 0410 	add.w	r4, r6, #16
 8003816:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003818:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800381a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800381c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800381e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003822:	e885 0003 	stmia.w	r5, {r0, r1}
 8003826:	1d33      	adds	r3, r6, #4
 8003828:	cb0e      	ldmia	r3, {r1, r2, r3}
 800382a:	6838      	ldr	r0, [r7, #0]
 800382c:	f003 f888 	bl	8006940 <USB_DevInit>
 8003830:	4603      	mov	r3, r0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d005      	beq.n	8003842 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2202      	movs	r2, #2
 800383a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e00d      	b.n	800385e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2201      	movs	r2, #1
 800384e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4618      	mov	r0, r3
 8003858:	f003 fa53 	bl	8006d02 <USB_DevDisconnect>

  return HAL_OK;
 800385c:	2300      	movs	r3, #0
}
 800385e:	4618      	mov	r0, r3
 8003860:	3714      	adds	r7, #20
 8003862:	46bd      	mov	sp, r7
 8003864:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003868 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b086      	sub	sp, #24
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d101      	bne.n	800387a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e267      	b.n	8003d4a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0301 	and.w	r3, r3, #1
 8003882:	2b00      	cmp	r3, #0
 8003884:	d075      	beq.n	8003972 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003886:	4b88      	ldr	r3, [pc, #544]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	f003 030c 	and.w	r3, r3, #12
 800388e:	2b04      	cmp	r3, #4
 8003890:	d00c      	beq.n	80038ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003892:	4b85      	ldr	r3, [pc, #532]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800389a:	2b08      	cmp	r3, #8
 800389c:	d112      	bne.n	80038c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800389e:	4b82      	ldr	r3, [pc, #520]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038aa:	d10b      	bne.n	80038c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038ac:	4b7e      	ldr	r3, [pc, #504]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d05b      	beq.n	8003970 <HAL_RCC_OscConfig+0x108>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d157      	bne.n	8003970 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e242      	b.n	8003d4a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038cc:	d106      	bne.n	80038dc <HAL_RCC_OscConfig+0x74>
 80038ce:	4b76      	ldr	r3, [pc, #472]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a75      	ldr	r2, [pc, #468]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 80038d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038d8:	6013      	str	r3, [r2, #0]
 80038da:	e01d      	b.n	8003918 <HAL_RCC_OscConfig+0xb0>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038e4:	d10c      	bne.n	8003900 <HAL_RCC_OscConfig+0x98>
 80038e6:	4b70      	ldr	r3, [pc, #448]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a6f      	ldr	r2, [pc, #444]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 80038ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038f0:	6013      	str	r3, [r2, #0]
 80038f2:	4b6d      	ldr	r3, [pc, #436]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a6c      	ldr	r2, [pc, #432]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 80038f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038fc:	6013      	str	r3, [r2, #0]
 80038fe:	e00b      	b.n	8003918 <HAL_RCC_OscConfig+0xb0>
 8003900:	4b69      	ldr	r3, [pc, #420]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a68      	ldr	r2, [pc, #416]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 8003906:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800390a:	6013      	str	r3, [r2, #0]
 800390c:	4b66      	ldr	r3, [pc, #408]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a65      	ldr	r2, [pc, #404]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 8003912:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003916:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d013      	beq.n	8003948 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003920:	f7fe fcc6 	bl	80022b0 <HAL_GetTick>
 8003924:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003926:	e008      	b.n	800393a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003928:	f7fe fcc2 	bl	80022b0 <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	2b64      	cmp	r3, #100	; 0x64
 8003934:	d901      	bls.n	800393a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e207      	b.n	8003d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800393a:	4b5b      	ldr	r3, [pc, #364]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d0f0      	beq.n	8003928 <HAL_RCC_OscConfig+0xc0>
 8003946:	e014      	b.n	8003972 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003948:	f7fe fcb2 	bl	80022b0 <HAL_GetTick>
 800394c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800394e:	e008      	b.n	8003962 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003950:	f7fe fcae 	bl	80022b0 <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	2b64      	cmp	r3, #100	; 0x64
 800395c:	d901      	bls.n	8003962 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e1f3      	b.n	8003d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003962:	4b51      	ldr	r3, [pc, #324]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d1f0      	bne.n	8003950 <HAL_RCC_OscConfig+0xe8>
 800396e:	e000      	b.n	8003972 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003970:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0302 	and.w	r3, r3, #2
 800397a:	2b00      	cmp	r3, #0
 800397c:	d063      	beq.n	8003a46 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800397e:	4b4a      	ldr	r3, [pc, #296]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	f003 030c 	and.w	r3, r3, #12
 8003986:	2b00      	cmp	r3, #0
 8003988:	d00b      	beq.n	80039a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800398a:	4b47      	ldr	r3, [pc, #284]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003992:	2b08      	cmp	r3, #8
 8003994:	d11c      	bne.n	80039d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003996:	4b44      	ldr	r3, [pc, #272]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d116      	bne.n	80039d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039a2:	4b41      	ldr	r3, [pc, #260]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0302 	and.w	r3, r3, #2
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d005      	beq.n	80039ba <HAL_RCC_OscConfig+0x152>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d001      	beq.n	80039ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e1c7      	b.n	8003d4a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039ba:	4b3b      	ldr	r3, [pc, #236]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	00db      	lsls	r3, r3, #3
 80039c8:	4937      	ldr	r1, [pc, #220]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 80039ca:	4313      	orrs	r3, r2
 80039cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039ce:	e03a      	b.n	8003a46 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d020      	beq.n	8003a1a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039d8:	4b34      	ldr	r3, [pc, #208]	; (8003aac <HAL_RCC_OscConfig+0x244>)
 80039da:	2201      	movs	r2, #1
 80039dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039de:	f7fe fc67 	bl	80022b0 <HAL_GetTick>
 80039e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039e4:	e008      	b.n	80039f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039e6:	f7fe fc63 	bl	80022b0 <HAL_GetTick>
 80039ea:	4602      	mov	r2, r0
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	2b02      	cmp	r3, #2
 80039f2:	d901      	bls.n	80039f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80039f4:	2303      	movs	r3, #3
 80039f6:	e1a8      	b.n	8003d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039f8:	4b2b      	ldr	r3, [pc, #172]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0302 	and.w	r3, r3, #2
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d0f0      	beq.n	80039e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a04:	4b28      	ldr	r3, [pc, #160]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	691b      	ldr	r3, [r3, #16]
 8003a10:	00db      	lsls	r3, r3, #3
 8003a12:	4925      	ldr	r1, [pc, #148]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 8003a14:	4313      	orrs	r3, r2
 8003a16:	600b      	str	r3, [r1, #0]
 8003a18:	e015      	b.n	8003a46 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a1a:	4b24      	ldr	r3, [pc, #144]	; (8003aac <HAL_RCC_OscConfig+0x244>)
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a20:	f7fe fc46 	bl	80022b0 <HAL_GetTick>
 8003a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a26:	e008      	b.n	8003a3a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a28:	f7fe fc42 	bl	80022b0 <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	d901      	bls.n	8003a3a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e187      	b.n	8003d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a3a:	4b1b      	ldr	r3, [pc, #108]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0302 	and.w	r3, r3, #2
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d1f0      	bne.n	8003a28 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0308 	and.w	r3, r3, #8
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d036      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	695b      	ldr	r3, [r3, #20]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d016      	beq.n	8003a88 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a5a:	4b15      	ldr	r3, [pc, #84]	; (8003ab0 <HAL_RCC_OscConfig+0x248>)
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a60:	f7fe fc26 	bl	80022b0 <HAL_GetTick>
 8003a64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a66:	e008      	b.n	8003a7a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a68:	f7fe fc22 	bl	80022b0 <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d901      	bls.n	8003a7a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e167      	b.n	8003d4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a7a:	4b0b      	ldr	r3, [pc, #44]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 8003a7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a7e:	f003 0302 	and.w	r3, r3, #2
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d0f0      	beq.n	8003a68 <HAL_RCC_OscConfig+0x200>
 8003a86:	e01b      	b.n	8003ac0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a88:	4b09      	ldr	r3, [pc, #36]	; (8003ab0 <HAL_RCC_OscConfig+0x248>)
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a8e:	f7fe fc0f 	bl	80022b0 <HAL_GetTick>
 8003a92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a94:	e00e      	b.n	8003ab4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a96:	f7fe fc0b 	bl	80022b0 <HAL_GetTick>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	2b02      	cmp	r3, #2
 8003aa2:	d907      	bls.n	8003ab4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	e150      	b.n	8003d4a <HAL_RCC_OscConfig+0x4e2>
 8003aa8:	40023800 	.word	0x40023800
 8003aac:	42470000 	.word	0x42470000
 8003ab0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ab4:	4b88      	ldr	r3, [pc, #544]	; (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003ab6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ab8:	f003 0302 	and.w	r3, r3, #2
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d1ea      	bne.n	8003a96 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0304 	and.w	r3, r3, #4
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	f000 8097 	beq.w	8003bfc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ad2:	4b81      	ldr	r3, [pc, #516]	; (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d10f      	bne.n	8003afe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ade:	2300      	movs	r3, #0
 8003ae0:	60bb      	str	r3, [r7, #8]
 8003ae2:	4b7d      	ldr	r3, [pc, #500]	; (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae6:	4a7c      	ldr	r2, [pc, #496]	; (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aec:	6413      	str	r3, [r2, #64]	; 0x40
 8003aee:	4b7a      	ldr	r3, [pc, #488]	; (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003af6:	60bb      	str	r3, [r7, #8]
 8003af8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003afa:	2301      	movs	r3, #1
 8003afc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003afe:	4b77      	ldr	r3, [pc, #476]	; (8003cdc <HAL_RCC_OscConfig+0x474>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d118      	bne.n	8003b3c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b0a:	4b74      	ldr	r3, [pc, #464]	; (8003cdc <HAL_RCC_OscConfig+0x474>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a73      	ldr	r2, [pc, #460]	; (8003cdc <HAL_RCC_OscConfig+0x474>)
 8003b10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b16:	f7fe fbcb 	bl	80022b0 <HAL_GetTick>
 8003b1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b1c:	e008      	b.n	8003b30 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b1e:	f7fe fbc7 	bl	80022b0 <HAL_GetTick>
 8003b22:	4602      	mov	r2, r0
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d901      	bls.n	8003b30 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	e10c      	b.n	8003d4a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b30:	4b6a      	ldr	r3, [pc, #424]	; (8003cdc <HAL_RCC_OscConfig+0x474>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d0f0      	beq.n	8003b1e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d106      	bne.n	8003b52 <HAL_RCC_OscConfig+0x2ea>
 8003b44:	4b64      	ldr	r3, [pc, #400]	; (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b48:	4a63      	ldr	r2, [pc, #396]	; (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003b4a:	f043 0301 	orr.w	r3, r3, #1
 8003b4e:	6713      	str	r3, [r2, #112]	; 0x70
 8003b50:	e01c      	b.n	8003b8c <HAL_RCC_OscConfig+0x324>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	2b05      	cmp	r3, #5
 8003b58:	d10c      	bne.n	8003b74 <HAL_RCC_OscConfig+0x30c>
 8003b5a:	4b5f      	ldr	r3, [pc, #380]	; (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b5e:	4a5e      	ldr	r2, [pc, #376]	; (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003b60:	f043 0304 	orr.w	r3, r3, #4
 8003b64:	6713      	str	r3, [r2, #112]	; 0x70
 8003b66:	4b5c      	ldr	r3, [pc, #368]	; (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b6a:	4a5b      	ldr	r2, [pc, #364]	; (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003b6c:	f043 0301 	orr.w	r3, r3, #1
 8003b70:	6713      	str	r3, [r2, #112]	; 0x70
 8003b72:	e00b      	b.n	8003b8c <HAL_RCC_OscConfig+0x324>
 8003b74:	4b58      	ldr	r3, [pc, #352]	; (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b78:	4a57      	ldr	r2, [pc, #348]	; (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003b7a:	f023 0301 	bic.w	r3, r3, #1
 8003b7e:	6713      	str	r3, [r2, #112]	; 0x70
 8003b80:	4b55      	ldr	r3, [pc, #340]	; (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b84:	4a54      	ldr	r2, [pc, #336]	; (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003b86:	f023 0304 	bic.w	r3, r3, #4
 8003b8a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d015      	beq.n	8003bc0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b94:	f7fe fb8c 	bl	80022b0 <HAL_GetTick>
 8003b98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b9a:	e00a      	b.n	8003bb2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b9c:	f7fe fb88 	bl	80022b0 <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d901      	bls.n	8003bb2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e0cb      	b.n	8003d4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bb2:	4b49      	ldr	r3, [pc, #292]	; (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bb6:	f003 0302 	and.w	r3, r3, #2
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d0ee      	beq.n	8003b9c <HAL_RCC_OscConfig+0x334>
 8003bbe:	e014      	b.n	8003bea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bc0:	f7fe fb76 	bl	80022b0 <HAL_GetTick>
 8003bc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bc6:	e00a      	b.n	8003bde <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bc8:	f7fe fb72 	bl	80022b0 <HAL_GetTick>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d901      	bls.n	8003bde <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e0b5      	b.n	8003d4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bde:	4b3e      	ldr	r3, [pc, #248]	; (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003be2:	f003 0302 	and.w	r3, r3, #2
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d1ee      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003bea:	7dfb      	ldrb	r3, [r7, #23]
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d105      	bne.n	8003bfc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bf0:	4b39      	ldr	r3, [pc, #228]	; (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf4:	4a38      	ldr	r2, [pc, #224]	; (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003bf6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bfa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	699b      	ldr	r3, [r3, #24]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	f000 80a1 	beq.w	8003d48 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c06:	4b34      	ldr	r3, [pc, #208]	; (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	f003 030c 	and.w	r3, r3, #12
 8003c0e:	2b08      	cmp	r3, #8
 8003c10:	d05c      	beq.n	8003ccc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	699b      	ldr	r3, [r3, #24]
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d141      	bne.n	8003c9e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c1a:	4b31      	ldr	r3, [pc, #196]	; (8003ce0 <HAL_RCC_OscConfig+0x478>)
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c20:	f7fe fb46 	bl	80022b0 <HAL_GetTick>
 8003c24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c26:	e008      	b.n	8003c3a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c28:	f7fe fb42 	bl	80022b0 <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	d901      	bls.n	8003c3a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e087      	b.n	8003d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c3a:	4b27      	ldr	r3, [pc, #156]	; (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d1f0      	bne.n	8003c28 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	69da      	ldr	r2, [r3, #28]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a1b      	ldr	r3, [r3, #32]
 8003c4e:	431a      	orrs	r2, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c54:	019b      	lsls	r3, r3, #6
 8003c56:	431a      	orrs	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c5c:	085b      	lsrs	r3, r3, #1
 8003c5e:	3b01      	subs	r3, #1
 8003c60:	041b      	lsls	r3, r3, #16
 8003c62:	431a      	orrs	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c68:	061b      	lsls	r3, r3, #24
 8003c6a:	491b      	ldr	r1, [pc, #108]	; (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c70:	4b1b      	ldr	r3, [pc, #108]	; (8003ce0 <HAL_RCC_OscConfig+0x478>)
 8003c72:	2201      	movs	r2, #1
 8003c74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c76:	f7fe fb1b 	bl	80022b0 <HAL_GetTick>
 8003c7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c7c:	e008      	b.n	8003c90 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c7e:	f7fe fb17 	bl	80022b0 <HAL_GetTick>
 8003c82:	4602      	mov	r2, r0
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	1ad3      	subs	r3, r2, r3
 8003c88:	2b02      	cmp	r3, #2
 8003c8a:	d901      	bls.n	8003c90 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	e05c      	b.n	8003d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c90:	4b11      	ldr	r3, [pc, #68]	; (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d0f0      	beq.n	8003c7e <HAL_RCC_OscConfig+0x416>
 8003c9c:	e054      	b.n	8003d48 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c9e:	4b10      	ldr	r3, [pc, #64]	; (8003ce0 <HAL_RCC_OscConfig+0x478>)
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ca4:	f7fe fb04 	bl	80022b0 <HAL_GetTick>
 8003ca8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003caa:	e008      	b.n	8003cbe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cac:	f7fe fb00 	bl	80022b0 <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d901      	bls.n	8003cbe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e045      	b.n	8003d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cbe:	4b06      	ldr	r3, [pc, #24]	; (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d1f0      	bne.n	8003cac <HAL_RCC_OscConfig+0x444>
 8003cca:	e03d      	b.n	8003d48 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	699b      	ldr	r3, [r3, #24]
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d107      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e038      	b.n	8003d4a <HAL_RCC_OscConfig+0x4e2>
 8003cd8:	40023800 	.word	0x40023800
 8003cdc:	40007000 	.word	0x40007000
 8003ce0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ce4:	4b1b      	ldr	r3, [pc, #108]	; (8003d54 <HAL_RCC_OscConfig+0x4ec>)
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	699b      	ldr	r3, [r3, #24]
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d028      	beq.n	8003d44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d121      	bne.n	8003d44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d11a      	bne.n	8003d44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d0e:	68fa      	ldr	r2, [r7, #12]
 8003d10:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d14:	4013      	ands	r3, r2
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d1a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d111      	bne.n	8003d44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d2a:	085b      	lsrs	r3, r3, #1
 8003d2c:	3b01      	subs	r3, #1
 8003d2e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d107      	bne.n	8003d44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d3e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d001      	beq.n	8003d48 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	e000      	b.n	8003d4a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003d48:	2300      	movs	r3, #0
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3718      	adds	r7, #24
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	40023800 	.word	0x40023800

08003d58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d101      	bne.n	8003d6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e0cc      	b.n	8003f06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d6c:	4b68      	ldr	r3, [pc, #416]	; (8003f10 <HAL_RCC_ClockConfig+0x1b8>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 030f 	and.w	r3, r3, #15
 8003d74:	683a      	ldr	r2, [r7, #0]
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d90c      	bls.n	8003d94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d7a:	4b65      	ldr	r3, [pc, #404]	; (8003f10 <HAL_RCC_ClockConfig+0x1b8>)
 8003d7c:	683a      	ldr	r2, [r7, #0]
 8003d7e:	b2d2      	uxtb	r2, r2
 8003d80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d82:	4b63      	ldr	r3, [pc, #396]	; (8003f10 <HAL_RCC_ClockConfig+0x1b8>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 030f 	and.w	r3, r3, #15
 8003d8a:	683a      	ldr	r2, [r7, #0]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d001      	beq.n	8003d94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e0b8      	b.n	8003f06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0302 	and.w	r3, r3, #2
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d020      	beq.n	8003de2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0304 	and.w	r3, r3, #4
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d005      	beq.n	8003db8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003dac:	4b59      	ldr	r3, [pc, #356]	; (8003f14 <HAL_RCC_ClockConfig+0x1bc>)
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	4a58      	ldr	r2, [pc, #352]	; (8003f14 <HAL_RCC_ClockConfig+0x1bc>)
 8003db2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003db6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0308 	and.w	r3, r3, #8
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d005      	beq.n	8003dd0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003dc4:	4b53      	ldr	r3, [pc, #332]	; (8003f14 <HAL_RCC_ClockConfig+0x1bc>)
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	4a52      	ldr	r2, [pc, #328]	; (8003f14 <HAL_RCC_ClockConfig+0x1bc>)
 8003dca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003dce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dd0:	4b50      	ldr	r3, [pc, #320]	; (8003f14 <HAL_RCC_ClockConfig+0x1bc>)
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	494d      	ldr	r1, [pc, #308]	; (8003f14 <HAL_RCC_ClockConfig+0x1bc>)
 8003dde:	4313      	orrs	r3, r2
 8003de0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0301 	and.w	r3, r3, #1
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d044      	beq.n	8003e78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d107      	bne.n	8003e06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003df6:	4b47      	ldr	r3, [pc, #284]	; (8003f14 <HAL_RCC_ClockConfig+0x1bc>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d119      	bne.n	8003e36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e07f      	b.n	8003f06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d003      	beq.n	8003e16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e12:	2b03      	cmp	r3, #3
 8003e14:	d107      	bne.n	8003e26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e16:	4b3f      	ldr	r3, [pc, #252]	; (8003f14 <HAL_RCC_ClockConfig+0x1bc>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d109      	bne.n	8003e36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e06f      	b.n	8003f06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e26:	4b3b      	ldr	r3, [pc, #236]	; (8003f14 <HAL_RCC_ClockConfig+0x1bc>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0302 	and.w	r3, r3, #2
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d101      	bne.n	8003e36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e067      	b.n	8003f06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e36:	4b37      	ldr	r3, [pc, #220]	; (8003f14 <HAL_RCC_ClockConfig+0x1bc>)
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	f023 0203 	bic.w	r2, r3, #3
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	4934      	ldr	r1, [pc, #208]	; (8003f14 <HAL_RCC_ClockConfig+0x1bc>)
 8003e44:	4313      	orrs	r3, r2
 8003e46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e48:	f7fe fa32 	bl	80022b0 <HAL_GetTick>
 8003e4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e4e:	e00a      	b.n	8003e66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e50:	f7fe fa2e 	bl	80022b0 <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d901      	bls.n	8003e66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e04f      	b.n	8003f06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e66:	4b2b      	ldr	r3, [pc, #172]	; (8003f14 <HAL_RCC_ClockConfig+0x1bc>)
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	f003 020c 	and.w	r2, r3, #12
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d1eb      	bne.n	8003e50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e78:	4b25      	ldr	r3, [pc, #148]	; (8003f10 <HAL_RCC_ClockConfig+0x1b8>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 030f 	and.w	r3, r3, #15
 8003e80:	683a      	ldr	r2, [r7, #0]
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d20c      	bcs.n	8003ea0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e86:	4b22      	ldr	r3, [pc, #136]	; (8003f10 <HAL_RCC_ClockConfig+0x1b8>)
 8003e88:	683a      	ldr	r2, [r7, #0]
 8003e8a:	b2d2      	uxtb	r2, r2
 8003e8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e8e:	4b20      	ldr	r3, [pc, #128]	; (8003f10 <HAL_RCC_ClockConfig+0x1b8>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 030f 	and.w	r3, r3, #15
 8003e96:	683a      	ldr	r2, [r7, #0]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d001      	beq.n	8003ea0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e032      	b.n	8003f06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0304 	and.w	r3, r3, #4
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d008      	beq.n	8003ebe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003eac:	4b19      	ldr	r3, [pc, #100]	; (8003f14 <HAL_RCC_ClockConfig+0x1bc>)
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	4916      	ldr	r1, [pc, #88]	; (8003f14 <HAL_RCC_ClockConfig+0x1bc>)
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 0308 	and.w	r3, r3, #8
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d009      	beq.n	8003ede <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003eca:	4b12      	ldr	r3, [pc, #72]	; (8003f14 <HAL_RCC_ClockConfig+0x1bc>)
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	691b      	ldr	r3, [r3, #16]
 8003ed6:	00db      	lsls	r3, r3, #3
 8003ed8:	490e      	ldr	r1, [pc, #56]	; (8003f14 <HAL_RCC_ClockConfig+0x1bc>)
 8003eda:	4313      	orrs	r3, r2
 8003edc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003ede:	f000 f821 	bl	8003f24 <HAL_RCC_GetSysClockFreq>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	4b0b      	ldr	r3, [pc, #44]	; (8003f14 <HAL_RCC_ClockConfig+0x1bc>)
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	091b      	lsrs	r3, r3, #4
 8003eea:	f003 030f 	and.w	r3, r3, #15
 8003eee:	490a      	ldr	r1, [pc, #40]	; (8003f18 <HAL_RCC_ClockConfig+0x1c0>)
 8003ef0:	5ccb      	ldrb	r3, [r1, r3]
 8003ef2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ef6:	4a09      	ldr	r2, [pc, #36]	; (8003f1c <HAL_RCC_ClockConfig+0x1c4>)
 8003ef8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003efa:	4b09      	ldr	r3, [pc, #36]	; (8003f20 <HAL_RCC_ClockConfig+0x1c8>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4618      	mov	r0, r3
 8003f00:	f7fe f992 	bl	8002228 <HAL_InitTick>

  return HAL_OK;
 8003f04:	2300      	movs	r3, #0
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3710      	adds	r7, #16
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	40023c00 	.word	0x40023c00
 8003f14:	40023800 	.word	0x40023800
 8003f18:	08006e38 	.word	0x08006e38
 8003f1c:	2000119c 	.word	0x2000119c
 8003f20:	200011a0 	.word	0x200011a0

08003f24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f28:	b094      	sub	sp, #80	; 0x50
 8003f2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	647b      	str	r3, [r7, #68]	; 0x44
 8003f30:	2300      	movs	r3, #0
 8003f32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f34:	2300      	movs	r3, #0
 8003f36:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f3c:	4b79      	ldr	r3, [pc, #484]	; (8004124 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f003 030c 	and.w	r3, r3, #12
 8003f44:	2b08      	cmp	r3, #8
 8003f46:	d00d      	beq.n	8003f64 <HAL_RCC_GetSysClockFreq+0x40>
 8003f48:	2b08      	cmp	r3, #8
 8003f4a:	f200 80e1 	bhi.w	8004110 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d002      	beq.n	8003f58 <HAL_RCC_GetSysClockFreq+0x34>
 8003f52:	2b04      	cmp	r3, #4
 8003f54:	d003      	beq.n	8003f5e <HAL_RCC_GetSysClockFreq+0x3a>
 8003f56:	e0db      	b.n	8004110 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f58:	4b73      	ldr	r3, [pc, #460]	; (8004128 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f5a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003f5c:	e0db      	b.n	8004116 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f5e:	4b73      	ldr	r3, [pc, #460]	; (800412c <HAL_RCC_GetSysClockFreq+0x208>)
 8003f60:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f62:	e0d8      	b.n	8004116 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f64:	4b6f      	ldr	r3, [pc, #444]	; (8004124 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f6c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f6e:	4b6d      	ldr	r3, [pc, #436]	; (8004124 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d063      	beq.n	8004042 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f7a:	4b6a      	ldr	r3, [pc, #424]	; (8004124 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	099b      	lsrs	r3, r3, #6
 8003f80:	2200      	movs	r2, #0
 8003f82:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f84:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f8c:	633b      	str	r3, [r7, #48]	; 0x30
 8003f8e:	2300      	movs	r3, #0
 8003f90:	637b      	str	r3, [r7, #52]	; 0x34
 8003f92:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003f96:	4622      	mov	r2, r4
 8003f98:	462b      	mov	r3, r5
 8003f9a:	f04f 0000 	mov.w	r0, #0
 8003f9e:	f04f 0100 	mov.w	r1, #0
 8003fa2:	0159      	lsls	r1, r3, #5
 8003fa4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fa8:	0150      	lsls	r0, r2, #5
 8003faa:	4602      	mov	r2, r0
 8003fac:	460b      	mov	r3, r1
 8003fae:	4621      	mov	r1, r4
 8003fb0:	1a51      	subs	r1, r2, r1
 8003fb2:	6139      	str	r1, [r7, #16]
 8003fb4:	4629      	mov	r1, r5
 8003fb6:	eb63 0301 	sbc.w	r3, r3, r1
 8003fba:	617b      	str	r3, [r7, #20]
 8003fbc:	f04f 0200 	mov.w	r2, #0
 8003fc0:	f04f 0300 	mov.w	r3, #0
 8003fc4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003fc8:	4659      	mov	r1, fp
 8003fca:	018b      	lsls	r3, r1, #6
 8003fcc:	4651      	mov	r1, sl
 8003fce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003fd2:	4651      	mov	r1, sl
 8003fd4:	018a      	lsls	r2, r1, #6
 8003fd6:	4651      	mov	r1, sl
 8003fd8:	ebb2 0801 	subs.w	r8, r2, r1
 8003fdc:	4659      	mov	r1, fp
 8003fde:	eb63 0901 	sbc.w	r9, r3, r1
 8003fe2:	f04f 0200 	mov.w	r2, #0
 8003fe6:	f04f 0300 	mov.w	r3, #0
 8003fea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003fee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ff2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ff6:	4690      	mov	r8, r2
 8003ff8:	4699      	mov	r9, r3
 8003ffa:	4623      	mov	r3, r4
 8003ffc:	eb18 0303 	adds.w	r3, r8, r3
 8004000:	60bb      	str	r3, [r7, #8]
 8004002:	462b      	mov	r3, r5
 8004004:	eb49 0303 	adc.w	r3, r9, r3
 8004008:	60fb      	str	r3, [r7, #12]
 800400a:	f04f 0200 	mov.w	r2, #0
 800400e:	f04f 0300 	mov.w	r3, #0
 8004012:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004016:	4629      	mov	r1, r5
 8004018:	024b      	lsls	r3, r1, #9
 800401a:	4621      	mov	r1, r4
 800401c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004020:	4621      	mov	r1, r4
 8004022:	024a      	lsls	r2, r1, #9
 8004024:	4610      	mov	r0, r2
 8004026:	4619      	mov	r1, r3
 8004028:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800402a:	2200      	movs	r2, #0
 800402c:	62bb      	str	r3, [r7, #40]	; 0x28
 800402e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004030:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004034:	f7fc fcfa 	bl	8000a2c <__aeabi_uldivmod>
 8004038:	4602      	mov	r2, r0
 800403a:	460b      	mov	r3, r1
 800403c:	4613      	mov	r3, r2
 800403e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004040:	e058      	b.n	80040f4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004042:	4b38      	ldr	r3, [pc, #224]	; (8004124 <HAL_RCC_GetSysClockFreq+0x200>)
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	099b      	lsrs	r3, r3, #6
 8004048:	2200      	movs	r2, #0
 800404a:	4618      	mov	r0, r3
 800404c:	4611      	mov	r1, r2
 800404e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004052:	623b      	str	r3, [r7, #32]
 8004054:	2300      	movs	r3, #0
 8004056:	627b      	str	r3, [r7, #36]	; 0x24
 8004058:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800405c:	4642      	mov	r2, r8
 800405e:	464b      	mov	r3, r9
 8004060:	f04f 0000 	mov.w	r0, #0
 8004064:	f04f 0100 	mov.w	r1, #0
 8004068:	0159      	lsls	r1, r3, #5
 800406a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800406e:	0150      	lsls	r0, r2, #5
 8004070:	4602      	mov	r2, r0
 8004072:	460b      	mov	r3, r1
 8004074:	4641      	mov	r1, r8
 8004076:	ebb2 0a01 	subs.w	sl, r2, r1
 800407a:	4649      	mov	r1, r9
 800407c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004080:	f04f 0200 	mov.w	r2, #0
 8004084:	f04f 0300 	mov.w	r3, #0
 8004088:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800408c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004090:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004094:	ebb2 040a 	subs.w	r4, r2, sl
 8004098:	eb63 050b 	sbc.w	r5, r3, fp
 800409c:	f04f 0200 	mov.w	r2, #0
 80040a0:	f04f 0300 	mov.w	r3, #0
 80040a4:	00eb      	lsls	r3, r5, #3
 80040a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040aa:	00e2      	lsls	r2, r4, #3
 80040ac:	4614      	mov	r4, r2
 80040ae:	461d      	mov	r5, r3
 80040b0:	4643      	mov	r3, r8
 80040b2:	18e3      	adds	r3, r4, r3
 80040b4:	603b      	str	r3, [r7, #0]
 80040b6:	464b      	mov	r3, r9
 80040b8:	eb45 0303 	adc.w	r3, r5, r3
 80040bc:	607b      	str	r3, [r7, #4]
 80040be:	f04f 0200 	mov.w	r2, #0
 80040c2:	f04f 0300 	mov.w	r3, #0
 80040c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80040ca:	4629      	mov	r1, r5
 80040cc:	028b      	lsls	r3, r1, #10
 80040ce:	4621      	mov	r1, r4
 80040d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80040d4:	4621      	mov	r1, r4
 80040d6:	028a      	lsls	r2, r1, #10
 80040d8:	4610      	mov	r0, r2
 80040da:	4619      	mov	r1, r3
 80040dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040de:	2200      	movs	r2, #0
 80040e0:	61bb      	str	r3, [r7, #24]
 80040e2:	61fa      	str	r2, [r7, #28]
 80040e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040e8:	f7fc fca0 	bl	8000a2c <__aeabi_uldivmod>
 80040ec:	4602      	mov	r2, r0
 80040ee:	460b      	mov	r3, r1
 80040f0:	4613      	mov	r3, r2
 80040f2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80040f4:	4b0b      	ldr	r3, [pc, #44]	; (8004124 <HAL_RCC_GetSysClockFreq+0x200>)
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	0c1b      	lsrs	r3, r3, #16
 80040fa:	f003 0303 	and.w	r3, r3, #3
 80040fe:	3301      	adds	r3, #1
 8004100:	005b      	lsls	r3, r3, #1
 8004102:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004104:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004106:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004108:	fbb2 f3f3 	udiv	r3, r2, r3
 800410c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800410e:	e002      	b.n	8004116 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004110:	4b05      	ldr	r3, [pc, #20]	; (8004128 <HAL_RCC_GetSysClockFreq+0x204>)
 8004112:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004114:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004116:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004118:	4618      	mov	r0, r3
 800411a:	3750      	adds	r7, #80	; 0x50
 800411c:	46bd      	mov	sp, r7
 800411e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004122:	bf00      	nop
 8004124:	40023800 	.word	0x40023800
 8004128:	00f42400 	.word	0x00f42400
 800412c:	007a1200 	.word	0x007a1200

08004130 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004130:	b480      	push	{r7}
 8004132:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004134:	4b03      	ldr	r3, [pc, #12]	; (8004144 <HAL_RCC_GetHCLKFreq+0x14>)
 8004136:	681b      	ldr	r3, [r3, #0]
}
 8004138:	4618      	mov	r0, r3
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr
 8004142:	bf00      	nop
 8004144:	2000119c 	.word	0x2000119c

08004148 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800414c:	f7ff fff0 	bl	8004130 <HAL_RCC_GetHCLKFreq>
 8004150:	4602      	mov	r2, r0
 8004152:	4b05      	ldr	r3, [pc, #20]	; (8004168 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	0a9b      	lsrs	r3, r3, #10
 8004158:	f003 0307 	and.w	r3, r3, #7
 800415c:	4903      	ldr	r1, [pc, #12]	; (800416c <HAL_RCC_GetPCLK1Freq+0x24>)
 800415e:	5ccb      	ldrb	r3, [r1, r3]
 8004160:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004164:	4618      	mov	r0, r3
 8004166:	bd80      	pop	{r7, pc}
 8004168:	40023800 	.word	0x40023800
 800416c:	08006e48 	.word	0x08006e48

08004170 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004174:	f7ff ffdc 	bl	8004130 <HAL_RCC_GetHCLKFreq>
 8004178:	4602      	mov	r2, r0
 800417a:	4b05      	ldr	r3, [pc, #20]	; (8004190 <HAL_RCC_GetPCLK2Freq+0x20>)
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	0b5b      	lsrs	r3, r3, #13
 8004180:	f003 0307 	and.w	r3, r3, #7
 8004184:	4903      	ldr	r1, [pc, #12]	; (8004194 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004186:	5ccb      	ldrb	r3, [r1, r3]
 8004188:	fa22 f303 	lsr.w	r3, r2, r3
}
 800418c:	4618      	mov	r0, r3
 800418e:	bd80      	pop	{r7, pc}
 8004190:	40023800 	.word	0x40023800
 8004194:	08006e48 	.word	0x08006e48

08004198 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b082      	sub	sp, #8
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d101      	bne.n	80041aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e041      	b.n	800422e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d106      	bne.n	80041c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f7fd fd50 	bl	8001c64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2202      	movs	r2, #2
 80041c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	3304      	adds	r3, #4
 80041d4:	4619      	mov	r1, r3
 80041d6:	4610      	mov	r0, r2
 80041d8:	f001 fa84 	bl	80056e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800422c:	2300      	movs	r3, #0
}
 800422e:	4618      	mov	r0, r3
 8004230:	3708      	adds	r7, #8
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}

08004236 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004236:	b580      	push	{r7, lr}
 8004238:	b082      	sub	sp, #8
 800423a:	af00      	add	r7, sp, #0
 800423c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d101      	bne.n	8004248 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e041      	b.n	80042cc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800424e:	b2db      	uxtb	r3, r3
 8004250:	2b00      	cmp	r3, #0
 8004252:	d106      	bne.n	8004262 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f000 f839 	bl	80042d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2202      	movs	r2, #2
 8004266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	3304      	adds	r3, #4
 8004272:	4619      	mov	r1, r3
 8004274:	4610      	mov	r0, r2
 8004276:	f001 fa35 	bl	80056e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2201      	movs	r2, #1
 800427e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2201      	movs	r2, #1
 8004286:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2201      	movs	r2, #1
 800428e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2201      	movs	r2, #1
 8004296:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2201      	movs	r2, #1
 800429e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2201      	movs	r2, #1
 80042a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2201      	movs	r2, #1
 80042ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2201      	movs	r2, #1
 80042b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2201      	movs	r2, #1
 80042be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2201      	movs	r2, #1
 80042c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042ca:	2300      	movs	r3, #0
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3708      	adds	r7, #8
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80042dc:	bf00      	nop
 80042de:	370c      	adds	r7, #12
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr

080042e8 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042f2:	2300      	movs	r3, #0
 80042f4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d109      	bne.n	8004310 <HAL_TIM_PWM_Start_IT+0x28>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004302:	b2db      	uxtb	r3, r3
 8004304:	2b01      	cmp	r3, #1
 8004306:	bf14      	ite	ne
 8004308:	2301      	movne	r3, #1
 800430a:	2300      	moveq	r3, #0
 800430c:	b2db      	uxtb	r3, r3
 800430e:	e022      	b.n	8004356 <HAL_TIM_PWM_Start_IT+0x6e>
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	2b04      	cmp	r3, #4
 8004314:	d109      	bne.n	800432a <HAL_TIM_PWM_Start_IT+0x42>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800431c:	b2db      	uxtb	r3, r3
 800431e:	2b01      	cmp	r3, #1
 8004320:	bf14      	ite	ne
 8004322:	2301      	movne	r3, #1
 8004324:	2300      	moveq	r3, #0
 8004326:	b2db      	uxtb	r3, r3
 8004328:	e015      	b.n	8004356 <HAL_TIM_PWM_Start_IT+0x6e>
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	2b08      	cmp	r3, #8
 800432e:	d109      	bne.n	8004344 <HAL_TIM_PWM_Start_IT+0x5c>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004336:	b2db      	uxtb	r3, r3
 8004338:	2b01      	cmp	r3, #1
 800433a:	bf14      	ite	ne
 800433c:	2301      	movne	r3, #1
 800433e:	2300      	moveq	r3, #0
 8004340:	b2db      	uxtb	r3, r3
 8004342:	e008      	b.n	8004356 <HAL_TIM_PWM_Start_IT+0x6e>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800434a:	b2db      	uxtb	r3, r3
 800434c:	2b01      	cmp	r3, #1
 800434e:	bf14      	ite	ne
 8004350:	2301      	movne	r3, #1
 8004352:	2300      	moveq	r3, #0
 8004354:	b2db      	uxtb	r3, r3
 8004356:	2b00      	cmp	r3, #0
 8004358:	d001      	beq.n	800435e <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e0c7      	b.n	80044ee <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d104      	bne.n	800436e <HAL_TIM_PWM_Start_IT+0x86>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2202      	movs	r2, #2
 8004368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800436c:	e013      	b.n	8004396 <HAL_TIM_PWM_Start_IT+0xae>
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	2b04      	cmp	r3, #4
 8004372:	d104      	bne.n	800437e <HAL_TIM_PWM_Start_IT+0x96>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2202      	movs	r2, #2
 8004378:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800437c:	e00b      	b.n	8004396 <HAL_TIM_PWM_Start_IT+0xae>
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	2b08      	cmp	r3, #8
 8004382:	d104      	bne.n	800438e <HAL_TIM_PWM_Start_IT+0xa6>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2202      	movs	r2, #2
 8004388:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800438c:	e003      	b.n	8004396 <HAL_TIM_PWM_Start_IT+0xae>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2202      	movs	r2, #2
 8004392:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	2b0c      	cmp	r3, #12
 800439a:	d841      	bhi.n	8004420 <HAL_TIM_PWM_Start_IT+0x138>
 800439c:	a201      	add	r2, pc, #4	; (adr r2, 80043a4 <HAL_TIM_PWM_Start_IT+0xbc>)
 800439e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043a2:	bf00      	nop
 80043a4:	080043d9 	.word	0x080043d9
 80043a8:	08004421 	.word	0x08004421
 80043ac:	08004421 	.word	0x08004421
 80043b0:	08004421 	.word	0x08004421
 80043b4:	080043eb 	.word	0x080043eb
 80043b8:	08004421 	.word	0x08004421
 80043bc:	08004421 	.word	0x08004421
 80043c0:	08004421 	.word	0x08004421
 80043c4:	080043fd 	.word	0x080043fd
 80043c8:	08004421 	.word	0x08004421
 80043cc:	08004421 	.word	0x08004421
 80043d0:	08004421 	.word	0x08004421
 80043d4:	0800440f 	.word	0x0800440f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	68da      	ldr	r2, [r3, #12]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f042 0202 	orr.w	r2, r2, #2
 80043e6:	60da      	str	r2, [r3, #12]
      break;
 80043e8:	e01d      	b.n	8004426 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	68da      	ldr	r2, [r3, #12]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f042 0204 	orr.w	r2, r2, #4
 80043f8:	60da      	str	r2, [r3, #12]
      break;
 80043fa:	e014      	b.n	8004426 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	68da      	ldr	r2, [r3, #12]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f042 0208 	orr.w	r2, r2, #8
 800440a:	60da      	str	r2, [r3, #12]
      break;
 800440c:	e00b      	b.n	8004426 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	68da      	ldr	r2, [r3, #12]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f042 0210 	orr.w	r2, r2, #16
 800441c:	60da      	str	r2, [r3, #12]
      break;
 800441e:	e002      	b.n	8004426 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	73fb      	strb	r3, [r7, #15]
      break;
 8004424:	bf00      	nop
  }

  if (status == HAL_OK)
 8004426:	7bfb      	ldrb	r3, [r7, #15]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d15f      	bne.n	80044ec <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	2201      	movs	r2, #1
 8004432:	6839      	ldr	r1, [r7, #0]
 8004434:	4618      	mov	r0, r3
 8004436:	f001 fdfb 	bl	8006030 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a2e      	ldr	r2, [pc, #184]	; (80044f8 <HAL_TIM_PWM_Start_IT+0x210>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d004      	beq.n	800444e <HAL_TIM_PWM_Start_IT+0x166>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a2c      	ldr	r2, [pc, #176]	; (80044fc <HAL_TIM_PWM_Start_IT+0x214>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d101      	bne.n	8004452 <HAL_TIM_PWM_Start_IT+0x16a>
 800444e:	2301      	movs	r3, #1
 8004450:	e000      	b.n	8004454 <HAL_TIM_PWM_Start_IT+0x16c>
 8004452:	2300      	movs	r3, #0
 8004454:	2b00      	cmp	r3, #0
 8004456:	d007      	beq.n	8004468 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004466:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a22      	ldr	r2, [pc, #136]	; (80044f8 <HAL_TIM_PWM_Start_IT+0x210>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d022      	beq.n	80044b8 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800447a:	d01d      	beq.n	80044b8 <HAL_TIM_PWM_Start_IT+0x1d0>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a1f      	ldr	r2, [pc, #124]	; (8004500 <HAL_TIM_PWM_Start_IT+0x218>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d018      	beq.n	80044b8 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a1e      	ldr	r2, [pc, #120]	; (8004504 <HAL_TIM_PWM_Start_IT+0x21c>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d013      	beq.n	80044b8 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a1c      	ldr	r2, [pc, #112]	; (8004508 <HAL_TIM_PWM_Start_IT+0x220>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d00e      	beq.n	80044b8 <HAL_TIM_PWM_Start_IT+0x1d0>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a17      	ldr	r2, [pc, #92]	; (80044fc <HAL_TIM_PWM_Start_IT+0x214>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d009      	beq.n	80044b8 <HAL_TIM_PWM_Start_IT+0x1d0>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a18      	ldr	r2, [pc, #96]	; (800450c <HAL_TIM_PWM_Start_IT+0x224>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d004      	beq.n	80044b8 <HAL_TIM_PWM_Start_IT+0x1d0>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a17      	ldr	r2, [pc, #92]	; (8004510 <HAL_TIM_PWM_Start_IT+0x228>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d111      	bne.n	80044dc <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	f003 0307 	and.w	r3, r3, #7
 80044c2:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	2b06      	cmp	r3, #6
 80044c8:	d010      	beq.n	80044ec <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f042 0201 	orr.w	r2, r2, #1
 80044d8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044da:	e007      	b.n	80044ec <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f042 0201 	orr.w	r2, r2, #1
 80044ea:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80044ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3710      	adds	r7, #16
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	40010000 	.word	0x40010000
 80044fc:	40010400 	.word	0x40010400
 8004500:	40000400 	.word	0x40000400
 8004504:	40000800 	.word	0x40000800
 8004508:	40000c00 	.word	0x40000c00
 800450c:	40014000 	.word	0x40014000
 8004510:	40001800 	.word	0x40001800

08004514 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b086      	sub	sp, #24
 8004518:	af00      	add	r7, sp, #0
 800451a:	60f8      	str	r0, [r7, #12]
 800451c:	60b9      	str	r1, [r7, #8]
 800451e:	607a      	str	r2, [r7, #4]
 8004520:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8004522:	2300      	movs	r3, #0
 8004524:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d109      	bne.n	8004540 <HAL_TIM_PWM_Start_DMA+0x2c>
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004532:	b2db      	uxtb	r3, r3
 8004534:	2b02      	cmp	r3, #2
 8004536:	bf0c      	ite	eq
 8004538:	2301      	moveq	r3, #1
 800453a:	2300      	movne	r3, #0
 800453c:	b2db      	uxtb	r3, r3
 800453e:	e022      	b.n	8004586 <HAL_TIM_PWM_Start_DMA+0x72>
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	2b04      	cmp	r3, #4
 8004544:	d109      	bne.n	800455a <HAL_TIM_PWM_Start_DMA+0x46>
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800454c:	b2db      	uxtb	r3, r3
 800454e:	2b02      	cmp	r3, #2
 8004550:	bf0c      	ite	eq
 8004552:	2301      	moveq	r3, #1
 8004554:	2300      	movne	r3, #0
 8004556:	b2db      	uxtb	r3, r3
 8004558:	e015      	b.n	8004586 <HAL_TIM_PWM_Start_DMA+0x72>
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	2b08      	cmp	r3, #8
 800455e:	d109      	bne.n	8004574 <HAL_TIM_PWM_Start_DMA+0x60>
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004566:	b2db      	uxtb	r3, r3
 8004568:	2b02      	cmp	r3, #2
 800456a:	bf0c      	ite	eq
 800456c:	2301      	moveq	r3, #1
 800456e:	2300      	movne	r3, #0
 8004570:	b2db      	uxtb	r3, r3
 8004572:	e008      	b.n	8004586 <HAL_TIM_PWM_Start_DMA+0x72>
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800457a:	b2db      	uxtb	r3, r3
 800457c:	2b02      	cmp	r3, #2
 800457e:	bf0c      	ite	eq
 8004580:	2301      	moveq	r3, #1
 8004582:	2300      	movne	r3, #0
 8004584:	b2db      	uxtb	r3, r3
 8004586:	2b00      	cmp	r3, #0
 8004588:	d001      	beq.n	800458e <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 800458a:	2302      	movs	r3, #2
 800458c:	e171      	b.n	8004872 <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d109      	bne.n	80045a8 <HAL_TIM_PWM_Start_DMA+0x94>
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800459a:	b2db      	uxtb	r3, r3
 800459c:	2b01      	cmp	r3, #1
 800459e:	bf0c      	ite	eq
 80045a0:	2301      	moveq	r3, #1
 80045a2:	2300      	movne	r3, #0
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	e022      	b.n	80045ee <HAL_TIM_PWM_Start_DMA+0xda>
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	2b04      	cmp	r3, #4
 80045ac:	d109      	bne.n	80045c2 <HAL_TIM_PWM_Start_DMA+0xae>
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	bf0c      	ite	eq
 80045ba:	2301      	moveq	r3, #1
 80045bc:	2300      	movne	r3, #0
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	e015      	b.n	80045ee <HAL_TIM_PWM_Start_DMA+0xda>
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	2b08      	cmp	r3, #8
 80045c6:	d109      	bne.n	80045dc <HAL_TIM_PWM_Start_DMA+0xc8>
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	bf0c      	ite	eq
 80045d4:	2301      	moveq	r3, #1
 80045d6:	2300      	movne	r3, #0
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	e008      	b.n	80045ee <HAL_TIM_PWM_Start_DMA+0xda>
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	bf0c      	ite	eq
 80045e8:	2301      	moveq	r3, #1
 80045ea:	2300      	movne	r3, #0
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d024      	beq.n	800463c <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d104      	bne.n	8004602 <HAL_TIM_PWM_Start_DMA+0xee>
 80045f8:	887b      	ldrh	r3, [r7, #2]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d001      	beq.n	8004602 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e137      	b.n	8004872 <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d104      	bne.n	8004612 <HAL_TIM_PWM_Start_DMA+0xfe>
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2202      	movs	r2, #2
 800460c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004610:	e016      	b.n	8004640 <HAL_TIM_PWM_Start_DMA+0x12c>
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	2b04      	cmp	r3, #4
 8004616:	d104      	bne.n	8004622 <HAL_TIM_PWM_Start_DMA+0x10e>
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2202      	movs	r2, #2
 800461c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004620:	e00e      	b.n	8004640 <HAL_TIM_PWM_Start_DMA+0x12c>
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	2b08      	cmp	r3, #8
 8004626:	d104      	bne.n	8004632 <HAL_TIM_PWM_Start_DMA+0x11e>
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2202      	movs	r2, #2
 800462c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004630:	e006      	b.n	8004640 <HAL_TIM_PWM_Start_DMA+0x12c>
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2202      	movs	r2, #2
 8004636:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800463a:	e001      	b.n	8004640 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	e118      	b.n	8004872 <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	2b0c      	cmp	r3, #12
 8004644:	f200 80ae 	bhi.w	80047a4 <HAL_TIM_PWM_Start_DMA+0x290>
 8004648:	a201      	add	r2, pc, #4	; (adr r2, 8004650 <HAL_TIM_PWM_Start_DMA+0x13c>)
 800464a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800464e:	bf00      	nop
 8004650:	08004685 	.word	0x08004685
 8004654:	080047a5 	.word	0x080047a5
 8004658:	080047a5 	.word	0x080047a5
 800465c:	080047a5 	.word	0x080047a5
 8004660:	080046cd 	.word	0x080046cd
 8004664:	080047a5 	.word	0x080047a5
 8004668:	080047a5 	.word	0x080047a5
 800466c:	080047a5 	.word	0x080047a5
 8004670:	08004715 	.word	0x08004715
 8004674:	080047a5 	.word	0x080047a5
 8004678:	080047a5 	.word	0x080047a5
 800467c:	080047a5 	.word	0x080047a5
 8004680:	0800475d 	.word	0x0800475d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004688:	4a7c      	ldr	r2, [pc, #496]	; (800487c <HAL_TIM_PWM_Start_DMA+0x368>)
 800468a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004690:	4a7b      	ldr	r2, [pc, #492]	; (8004880 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8004692:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004698:	4a7a      	ldr	r2, [pc, #488]	; (8004884 <HAL_TIM_PWM_Start_DMA+0x370>)
 800469a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80046a0:	6879      	ldr	r1, [r7, #4]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	3334      	adds	r3, #52	; 0x34
 80046a8:	461a      	mov	r2, r3
 80046aa:	887b      	ldrh	r3, [r7, #2]
 80046ac:	f7fd fff0 	bl	8002690 <HAL_DMA_Start_IT>
 80046b0:	4603      	mov	r3, r0
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d001      	beq.n	80046ba <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e0db      	b.n	8004872 <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	68da      	ldr	r2, [r3, #12]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046c8:	60da      	str	r2, [r3, #12]
      break;
 80046ca:	e06e      	b.n	80047aa <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046d0:	4a6a      	ldr	r2, [pc, #424]	; (800487c <HAL_TIM_PWM_Start_DMA+0x368>)
 80046d2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046d8:	4a69      	ldr	r2, [pc, #420]	; (8004880 <HAL_TIM_PWM_Start_DMA+0x36c>)
 80046da:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e0:	4a68      	ldr	r2, [pc, #416]	; (8004884 <HAL_TIM_PWM_Start_DMA+0x370>)
 80046e2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80046e8:	6879      	ldr	r1, [r7, #4]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	3338      	adds	r3, #56	; 0x38
 80046f0:	461a      	mov	r2, r3
 80046f2:	887b      	ldrh	r3, [r7, #2]
 80046f4:	f7fd ffcc 	bl	8002690 <HAL_DMA_Start_IT>
 80046f8:	4603      	mov	r3, r0
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d001      	beq.n	8004702 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e0b7      	b.n	8004872 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	68da      	ldr	r2, [r3, #12]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004710:	60da      	str	r2, [r3, #12]
      break;
 8004712:	e04a      	b.n	80047aa <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004718:	4a58      	ldr	r2, [pc, #352]	; (800487c <HAL_TIM_PWM_Start_DMA+0x368>)
 800471a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004720:	4a57      	ldr	r2, [pc, #348]	; (8004880 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8004722:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004728:	4a56      	ldr	r2, [pc, #344]	; (8004884 <HAL_TIM_PWM_Start_DMA+0x370>)
 800472a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8004730:	6879      	ldr	r1, [r7, #4]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	333c      	adds	r3, #60	; 0x3c
 8004738:	461a      	mov	r2, r3
 800473a:	887b      	ldrh	r3, [r7, #2]
 800473c:	f7fd ffa8 	bl	8002690 <HAL_DMA_Start_IT>
 8004740:	4603      	mov	r3, r0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d001      	beq.n	800474a <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e093      	b.n	8004872 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	68da      	ldr	r2, [r3, #12]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004758:	60da      	str	r2, [r3, #12]
      break;
 800475a:	e026      	b.n	80047aa <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004760:	4a46      	ldr	r2, [pc, #280]	; (800487c <HAL_TIM_PWM_Start_DMA+0x368>)
 8004762:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004768:	4a45      	ldr	r2, [pc, #276]	; (8004880 <HAL_TIM_PWM_Start_DMA+0x36c>)
 800476a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004770:	4a44      	ldr	r2, [pc, #272]	; (8004884 <HAL_TIM_PWM_Start_DMA+0x370>)
 8004772:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004778:	6879      	ldr	r1, [r7, #4]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	3340      	adds	r3, #64	; 0x40
 8004780:	461a      	mov	r2, r3
 8004782:	887b      	ldrh	r3, [r7, #2]
 8004784:	f7fd ff84 	bl	8002690 <HAL_DMA_Start_IT>
 8004788:	4603      	mov	r3, r0
 800478a:	2b00      	cmp	r3, #0
 800478c:	d001      	beq.n	8004792 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e06f      	b.n	8004872 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	68da      	ldr	r2, [r3, #12]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80047a0:	60da      	str	r2, [r3, #12]
      break;
 80047a2:	e002      	b.n	80047aa <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	75fb      	strb	r3, [r7, #23]
      break;
 80047a8:	bf00      	nop
  }

  if (status == HAL_OK)
 80047aa:	7dfb      	ldrb	r3, [r7, #23]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d15f      	bne.n	8004870 <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	2201      	movs	r2, #1
 80047b6:	68b9      	ldr	r1, [r7, #8]
 80047b8:	4618      	mov	r0, r3
 80047ba:	f001 fc39 	bl	8006030 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a31      	ldr	r2, [pc, #196]	; (8004888 <HAL_TIM_PWM_Start_DMA+0x374>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d004      	beq.n	80047d2 <HAL_TIM_PWM_Start_DMA+0x2be>
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a2f      	ldr	r2, [pc, #188]	; (800488c <HAL_TIM_PWM_Start_DMA+0x378>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d101      	bne.n	80047d6 <HAL_TIM_PWM_Start_DMA+0x2c2>
 80047d2:	2301      	movs	r3, #1
 80047d4:	e000      	b.n	80047d8 <HAL_TIM_PWM_Start_DMA+0x2c4>
 80047d6:	2300      	movs	r3, #0
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d007      	beq.n	80047ec <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80047ea:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a25      	ldr	r2, [pc, #148]	; (8004888 <HAL_TIM_PWM_Start_DMA+0x374>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d022      	beq.n	800483c <HAL_TIM_PWM_Start_DMA+0x328>
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047fe:	d01d      	beq.n	800483c <HAL_TIM_PWM_Start_DMA+0x328>
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a22      	ldr	r2, [pc, #136]	; (8004890 <HAL_TIM_PWM_Start_DMA+0x37c>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d018      	beq.n	800483c <HAL_TIM_PWM_Start_DMA+0x328>
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a21      	ldr	r2, [pc, #132]	; (8004894 <HAL_TIM_PWM_Start_DMA+0x380>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d013      	beq.n	800483c <HAL_TIM_PWM_Start_DMA+0x328>
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a1f      	ldr	r2, [pc, #124]	; (8004898 <HAL_TIM_PWM_Start_DMA+0x384>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d00e      	beq.n	800483c <HAL_TIM_PWM_Start_DMA+0x328>
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a1a      	ldr	r2, [pc, #104]	; (800488c <HAL_TIM_PWM_Start_DMA+0x378>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d009      	beq.n	800483c <HAL_TIM_PWM_Start_DMA+0x328>
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a1b      	ldr	r2, [pc, #108]	; (800489c <HAL_TIM_PWM_Start_DMA+0x388>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d004      	beq.n	800483c <HAL_TIM_PWM_Start_DMA+0x328>
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a1a      	ldr	r2, [pc, #104]	; (80048a0 <HAL_TIM_PWM_Start_DMA+0x38c>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d111      	bne.n	8004860 <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	f003 0307 	and.w	r3, r3, #7
 8004846:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	2b06      	cmp	r3, #6
 800484c:	d010      	beq.n	8004870 <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f042 0201 	orr.w	r2, r2, #1
 800485c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800485e:	e007      	b.n	8004870 <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f042 0201 	orr.w	r2, r2, #1
 800486e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004870:	7dfb      	ldrb	r3, [r7, #23]
}
 8004872:	4618      	mov	r0, r3
 8004874:	3718      	adds	r7, #24
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
 800487a:	bf00      	nop
 800487c:	080055d3 	.word	0x080055d3
 8004880:	0800567b 	.word	0x0800567b
 8004884:	08005541 	.word	0x08005541
 8004888:	40010000 	.word	0x40010000
 800488c:	40010400 	.word	0x40010400
 8004890:	40000400 	.word	0x40000400
 8004894:	40000800 	.word	0x40000800
 8004898:	40000c00 	.word	0x40000c00
 800489c:	40014000 	.word	0x40014000
 80048a0:	40001800 	.word	0x40001800

080048a4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b082      	sub	sp, #8
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d101      	bne.n	80048b6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e041      	b.n	800493a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d106      	bne.n	80048d0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f000 f839 	bl	8004942 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2202      	movs	r2, #2
 80048d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	3304      	adds	r3, #4
 80048e0:	4619      	mov	r1, r3
 80048e2:	4610      	mov	r0, r2
 80048e4:	f000 fefe 	bl	80056e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2201      	movs	r2, #1
 80048f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2201      	movs	r2, #1
 80048fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2201      	movs	r2, #1
 8004904:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2201      	movs	r2, #1
 800490c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2201      	movs	r2, #1
 8004914:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004938:	2300      	movs	r3, #0
}
 800493a:	4618      	mov	r0, r3
 800493c:	3708      	adds	r7, #8
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}

08004942 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004942:	b480      	push	{r7}
 8004944:	b083      	sub	sp, #12
 8004946:	af00      	add	r7, sp, #0
 8004948:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800494a:	bf00      	nop
 800494c:	370c      	adds	r7, #12
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr
	...

08004958 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b084      	sub	sp, #16
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d104      	bne.n	8004972 <HAL_TIM_IC_Start+0x1a>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800496e:	b2db      	uxtb	r3, r3
 8004970:	e013      	b.n	800499a <HAL_TIM_IC_Start+0x42>
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	2b04      	cmp	r3, #4
 8004976:	d104      	bne.n	8004982 <HAL_TIM_IC_Start+0x2a>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800497e:	b2db      	uxtb	r3, r3
 8004980:	e00b      	b.n	800499a <HAL_TIM_IC_Start+0x42>
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	2b08      	cmp	r3, #8
 8004986:	d104      	bne.n	8004992 <HAL_TIM_IC_Start+0x3a>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800498e:	b2db      	uxtb	r3, r3
 8004990:	e003      	b.n	800499a <HAL_TIM_IC_Start+0x42>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004998:	b2db      	uxtb	r3, r3
 800499a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d104      	bne.n	80049ac <HAL_TIM_IC_Start+0x54>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	e013      	b.n	80049d4 <HAL_TIM_IC_Start+0x7c>
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	2b04      	cmp	r3, #4
 80049b0:	d104      	bne.n	80049bc <HAL_TIM_IC_Start+0x64>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	e00b      	b.n	80049d4 <HAL_TIM_IC_Start+0x7c>
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	2b08      	cmp	r3, #8
 80049c0:	d104      	bne.n	80049cc <HAL_TIM_IC_Start+0x74>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	e003      	b.n	80049d4 <HAL_TIM_IC_Start+0x7c>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80049d6:	7bfb      	ldrb	r3, [r7, #15]
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d102      	bne.n	80049e2 <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80049dc:	7bbb      	ldrb	r3, [r7, #14]
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d001      	beq.n	80049e6 <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	e081      	b.n	8004aea <HAL_TIM_IC_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d104      	bne.n	80049f6 <HAL_TIM_IC_Start+0x9e>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2202      	movs	r2, #2
 80049f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049f4:	e013      	b.n	8004a1e <HAL_TIM_IC_Start+0xc6>
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	2b04      	cmp	r3, #4
 80049fa:	d104      	bne.n	8004a06 <HAL_TIM_IC_Start+0xae>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2202      	movs	r2, #2
 8004a00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a04:	e00b      	b.n	8004a1e <HAL_TIM_IC_Start+0xc6>
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	2b08      	cmp	r3, #8
 8004a0a:	d104      	bne.n	8004a16 <HAL_TIM_IC_Start+0xbe>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2202      	movs	r2, #2
 8004a10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a14:	e003      	b.n	8004a1e <HAL_TIM_IC_Start+0xc6>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2202      	movs	r2, #2
 8004a1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d104      	bne.n	8004a2e <HAL_TIM_IC_Start+0xd6>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2202      	movs	r2, #2
 8004a28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a2c:	e013      	b.n	8004a56 <HAL_TIM_IC_Start+0xfe>
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	2b04      	cmp	r3, #4
 8004a32:	d104      	bne.n	8004a3e <HAL_TIM_IC_Start+0xe6>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2202      	movs	r2, #2
 8004a38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a3c:	e00b      	b.n	8004a56 <HAL_TIM_IC_Start+0xfe>
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	2b08      	cmp	r3, #8
 8004a42:	d104      	bne.n	8004a4e <HAL_TIM_IC_Start+0xf6>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2202      	movs	r2, #2
 8004a48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a4c:	e003      	b.n	8004a56 <HAL_TIM_IC_Start+0xfe>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2202      	movs	r2, #2
 8004a52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	6839      	ldr	r1, [r7, #0]
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f001 fae6 	bl	8006030 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a22      	ldr	r2, [pc, #136]	; (8004af4 <HAL_TIM_IC_Start+0x19c>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d022      	beq.n	8004ab4 <HAL_TIM_IC_Start+0x15c>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a76:	d01d      	beq.n	8004ab4 <HAL_TIM_IC_Start+0x15c>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a1e      	ldr	r2, [pc, #120]	; (8004af8 <HAL_TIM_IC_Start+0x1a0>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d018      	beq.n	8004ab4 <HAL_TIM_IC_Start+0x15c>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a1d      	ldr	r2, [pc, #116]	; (8004afc <HAL_TIM_IC_Start+0x1a4>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d013      	beq.n	8004ab4 <HAL_TIM_IC_Start+0x15c>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a1b      	ldr	r2, [pc, #108]	; (8004b00 <HAL_TIM_IC_Start+0x1a8>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d00e      	beq.n	8004ab4 <HAL_TIM_IC_Start+0x15c>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a1a      	ldr	r2, [pc, #104]	; (8004b04 <HAL_TIM_IC_Start+0x1ac>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d009      	beq.n	8004ab4 <HAL_TIM_IC_Start+0x15c>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a18      	ldr	r2, [pc, #96]	; (8004b08 <HAL_TIM_IC_Start+0x1b0>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d004      	beq.n	8004ab4 <HAL_TIM_IC_Start+0x15c>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a17      	ldr	r2, [pc, #92]	; (8004b0c <HAL_TIM_IC_Start+0x1b4>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d111      	bne.n	8004ad8 <HAL_TIM_IC_Start+0x180>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	f003 0307 	and.w	r3, r3, #7
 8004abe:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	2b06      	cmp	r3, #6
 8004ac4:	d010      	beq.n	8004ae8 <HAL_TIM_IC_Start+0x190>
    {
      __HAL_TIM_ENABLE(htim);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f042 0201 	orr.w	r2, r2, #1
 8004ad4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ad6:	e007      	b.n	8004ae8 <HAL_TIM_IC_Start+0x190>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f042 0201 	orr.w	r2, r2, #1
 8004ae6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ae8:	2300      	movs	r3, #0
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3710      	adds	r7, #16
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	bf00      	nop
 8004af4:	40010000 	.word	0x40010000
 8004af8:	40000400 	.word	0x40000400
 8004afc:	40000800 	.word	0x40000800
 8004b00:	40000c00 	.word	0x40000c00
 8004b04:	40010400 	.word	0x40010400
 8004b08:	40014000 	.word	0x40014000
 8004b0c:	40001800 	.word	0x40001800

08004b10 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b084      	sub	sp, #16
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d104      	bne.n	8004b2e <HAL_TIM_IC_Start_IT+0x1e>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	e013      	b.n	8004b56 <HAL_TIM_IC_Start_IT+0x46>
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	2b04      	cmp	r3, #4
 8004b32:	d104      	bne.n	8004b3e <HAL_TIM_IC_Start_IT+0x2e>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	e00b      	b.n	8004b56 <HAL_TIM_IC_Start_IT+0x46>
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	2b08      	cmp	r3, #8
 8004b42:	d104      	bne.n	8004b4e <HAL_TIM_IC_Start_IT+0x3e>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	e003      	b.n	8004b56 <HAL_TIM_IC_Start_IT+0x46>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d104      	bne.n	8004b68 <HAL_TIM_IC_Start_IT+0x58>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	e013      	b.n	8004b90 <HAL_TIM_IC_Start_IT+0x80>
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	2b04      	cmp	r3, #4
 8004b6c:	d104      	bne.n	8004b78 <HAL_TIM_IC_Start_IT+0x68>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	e00b      	b.n	8004b90 <HAL_TIM_IC_Start_IT+0x80>
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	2b08      	cmp	r3, #8
 8004b7c:	d104      	bne.n	8004b88 <HAL_TIM_IC_Start_IT+0x78>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	e003      	b.n	8004b90 <HAL_TIM_IC_Start_IT+0x80>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b92:	7bbb      	ldrb	r3, [r7, #14]
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d102      	bne.n	8004b9e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004b98:	7b7b      	ldrb	r3, [r7, #13]
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d001      	beq.n	8004ba2 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e0cc      	b.n	8004d3c <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d104      	bne.n	8004bb2 <HAL_TIM_IC_Start_IT+0xa2>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2202      	movs	r2, #2
 8004bac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bb0:	e013      	b.n	8004bda <HAL_TIM_IC_Start_IT+0xca>
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	2b04      	cmp	r3, #4
 8004bb6:	d104      	bne.n	8004bc2 <HAL_TIM_IC_Start_IT+0xb2>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2202      	movs	r2, #2
 8004bbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bc0:	e00b      	b.n	8004bda <HAL_TIM_IC_Start_IT+0xca>
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	2b08      	cmp	r3, #8
 8004bc6:	d104      	bne.n	8004bd2 <HAL_TIM_IC_Start_IT+0xc2>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2202      	movs	r2, #2
 8004bcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bd0:	e003      	b.n	8004bda <HAL_TIM_IC_Start_IT+0xca>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2202      	movs	r2, #2
 8004bd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d104      	bne.n	8004bea <HAL_TIM_IC_Start_IT+0xda>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2202      	movs	r2, #2
 8004be4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004be8:	e013      	b.n	8004c12 <HAL_TIM_IC_Start_IT+0x102>
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	2b04      	cmp	r3, #4
 8004bee:	d104      	bne.n	8004bfa <HAL_TIM_IC_Start_IT+0xea>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2202      	movs	r2, #2
 8004bf4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004bf8:	e00b      	b.n	8004c12 <HAL_TIM_IC_Start_IT+0x102>
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	2b08      	cmp	r3, #8
 8004bfe:	d104      	bne.n	8004c0a <HAL_TIM_IC_Start_IT+0xfa>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2202      	movs	r2, #2
 8004c04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c08:	e003      	b.n	8004c12 <HAL_TIM_IC_Start_IT+0x102>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2202      	movs	r2, #2
 8004c0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	2b0c      	cmp	r3, #12
 8004c16:	d841      	bhi.n	8004c9c <HAL_TIM_IC_Start_IT+0x18c>
 8004c18:	a201      	add	r2, pc, #4	; (adr r2, 8004c20 <HAL_TIM_IC_Start_IT+0x110>)
 8004c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c1e:	bf00      	nop
 8004c20:	08004c55 	.word	0x08004c55
 8004c24:	08004c9d 	.word	0x08004c9d
 8004c28:	08004c9d 	.word	0x08004c9d
 8004c2c:	08004c9d 	.word	0x08004c9d
 8004c30:	08004c67 	.word	0x08004c67
 8004c34:	08004c9d 	.word	0x08004c9d
 8004c38:	08004c9d 	.word	0x08004c9d
 8004c3c:	08004c9d 	.word	0x08004c9d
 8004c40:	08004c79 	.word	0x08004c79
 8004c44:	08004c9d 	.word	0x08004c9d
 8004c48:	08004c9d 	.word	0x08004c9d
 8004c4c:	08004c9d 	.word	0x08004c9d
 8004c50:	08004c8b 	.word	0x08004c8b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	68da      	ldr	r2, [r3, #12]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f042 0202 	orr.w	r2, r2, #2
 8004c62:	60da      	str	r2, [r3, #12]
      break;
 8004c64:	e01d      	b.n	8004ca2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	68da      	ldr	r2, [r3, #12]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f042 0204 	orr.w	r2, r2, #4
 8004c74:	60da      	str	r2, [r3, #12]
      break;
 8004c76:	e014      	b.n	8004ca2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	68da      	ldr	r2, [r3, #12]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f042 0208 	orr.w	r2, r2, #8
 8004c86:	60da      	str	r2, [r3, #12]
      break;
 8004c88:	e00b      	b.n	8004ca2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	68da      	ldr	r2, [r3, #12]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f042 0210 	orr.w	r2, r2, #16
 8004c98:	60da      	str	r2, [r3, #12]
      break;
 8004c9a:	e002      	b.n	8004ca2 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	73fb      	strb	r3, [r7, #15]
      break;
 8004ca0:	bf00      	nop
  }

  if (status == HAL_OK)
 8004ca2:	7bfb      	ldrb	r3, [r7, #15]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d148      	bne.n	8004d3a <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	2201      	movs	r2, #1
 8004cae:	6839      	ldr	r1, [r7, #0]
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f001 f9bd 	bl	8006030 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a22      	ldr	r2, [pc, #136]	; (8004d44 <HAL_TIM_IC_Start_IT+0x234>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d022      	beq.n	8004d06 <HAL_TIM_IC_Start_IT+0x1f6>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cc8:	d01d      	beq.n	8004d06 <HAL_TIM_IC_Start_IT+0x1f6>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a1e      	ldr	r2, [pc, #120]	; (8004d48 <HAL_TIM_IC_Start_IT+0x238>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d018      	beq.n	8004d06 <HAL_TIM_IC_Start_IT+0x1f6>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a1c      	ldr	r2, [pc, #112]	; (8004d4c <HAL_TIM_IC_Start_IT+0x23c>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d013      	beq.n	8004d06 <HAL_TIM_IC_Start_IT+0x1f6>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a1b      	ldr	r2, [pc, #108]	; (8004d50 <HAL_TIM_IC_Start_IT+0x240>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d00e      	beq.n	8004d06 <HAL_TIM_IC_Start_IT+0x1f6>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a19      	ldr	r2, [pc, #100]	; (8004d54 <HAL_TIM_IC_Start_IT+0x244>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d009      	beq.n	8004d06 <HAL_TIM_IC_Start_IT+0x1f6>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a18      	ldr	r2, [pc, #96]	; (8004d58 <HAL_TIM_IC_Start_IT+0x248>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d004      	beq.n	8004d06 <HAL_TIM_IC_Start_IT+0x1f6>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a16      	ldr	r2, [pc, #88]	; (8004d5c <HAL_TIM_IC_Start_IT+0x24c>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d111      	bne.n	8004d2a <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	f003 0307 	and.w	r3, r3, #7
 8004d10:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	2b06      	cmp	r3, #6
 8004d16:	d010      	beq.n	8004d3a <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f042 0201 	orr.w	r2, r2, #1
 8004d26:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d28:	e007      	b.n	8004d3a <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f042 0201 	orr.w	r2, r2, #1
 8004d38:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004d3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3710      	adds	r7, #16
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}
 8004d44:	40010000 	.word	0x40010000
 8004d48:	40000400 	.word	0x40000400
 8004d4c:	40000800 	.word	0x40000800
 8004d50:	40000c00 	.word	0x40000c00
 8004d54:	40010400 	.word	0x40010400
 8004d58:	40014000 	.word	0x40014000
 8004d5c:	40001800 	.word	0x40001800

08004d60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b082      	sub	sp, #8
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	691b      	ldr	r3, [r3, #16]
 8004d6e:	f003 0302 	and.w	r3, r3, #2
 8004d72:	2b02      	cmp	r3, #2
 8004d74:	d122      	bne.n	8004dbc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	f003 0302 	and.w	r3, r3, #2
 8004d80:	2b02      	cmp	r3, #2
 8004d82:	d11b      	bne.n	8004dbc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f06f 0202 	mvn.w	r2, #2
 8004d8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2201      	movs	r2, #1
 8004d92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	699b      	ldr	r3, [r3, #24]
 8004d9a:	f003 0303 	and.w	r3, r3, #3
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d003      	beq.n	8004daa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f7fb ffc4 	bl	8000d30 <HAL_TIM_IC_CaptureCallback>
 8004da8:	e005      	b.n	8004db6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f000 fb96 	bl	80054dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f000 fb9d 	bl	80054f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2200      	movs	r2, #0
 8004dba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	f003 0304 	and.w	r3, r3, #4
 8004dc6:	2b04      	cmp	r3, #4
 8004dc8:	d122      	bne.n	8004e10 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	68db      	ldr	r3, [r3, #12]
 8004dd0:	f003 0304 	and.w	r3, r3, #4
 8004dd4:	2b04      	cmp	r3, #4
 8004dd6:	d11b      	bne.n	8004e10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f06f 0204 	mvn.w	r2, #4
 8004de0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2202      	movs	r2, #2
 8004de6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	699b      	ldr	r3, [r3, #24]
 8004dee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d003      	beq.n	8004dfe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f7fb ff9a 	bl	8000d30 <HAL_TIM_IC_CaptureCallback>
 8004dfc:	e005      	b.n	8004e0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f000 fb6c 	bl	80054dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f000 fb73 	bl	80054f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	691b      	ldr	r3, [r3, #16]
 8004e16:	f003 0308 	and.w	r3, r3, #8
 8004e1a:	2b08      	cmp	r3, #8
 8004e1c:	d122      	bne.n	8004e64 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	f003 0308 	and.w	r3, r3, #8
 8004e28:	2b08      	cmp	r3, #8
 8004e2a:	d11b      	bne.n	8004e64 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f06f 0208 	mvn.w	r2, #8
 8004e34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2204      	movs	r2, #4
 8004e3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	69db      	ldr	r3, [r3, #28]
 8004e42:	f003 0303 	and.w	r3, r3, #3
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d003      	beq.n	8004e52 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f7fb ff70 	bl	8000d30 <HAL_TIM_IC_CaptureCallback>
 8004e50:	e005      	b.n	8004e5e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f000 fb42 	bl	80054dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f000 fb49 	bl	80054f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	691b      	ldr	r3, [r3, #16]
 8004e6a:	f003 0310 	and.w	r3, r3, #16
 8004e6e:	2b10      	cmp	r3, #16
 8004e70:	d122      	bne.n	8004eb8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	f003 0310 	and.w	r3, r3, #16
 8004e7c:	2b10      	cmp	r3, #16
 8004e7e:	d11b      	bne.n	8004eb8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f06f 0210 	mvn.w	r2, #16
 8004e88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2208      	movs	r2, #8
 8004e8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	69db      	ldr	r3, [r3, #28]
 8004e96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d003      	beq.n	8004ea6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f7fb ff46 	bl	8000d30 <HAL_TIM_IC_CaptureCallback>
 8004ea4:	e005      	b.n	8004eb2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f000 fb18 	bl	80054dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f000 fb1f 	bl	80054f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	691b      	ldr	r3, [r3, #16]
 8004ebe:	f003 0301 	and.w	r3, r3, #1
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d10e      	bne.n	8004ee4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	f003 0301 	and.w	r3, r3, #1
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d107      	bne.n	8004ee4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f06f 0201 	mvn.w	r2, #1
 8004edc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f000 faf2 	bl	80054c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eee:	2b80      	cmp	r3, #128	; 0x80
 8004ef0:	d10e      	bne.n	8004f10 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004efc:	2b80      	cmp	r3, #128	; 0x80
 8004efe:	d107      	bne.n	8004f10 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f001 f98e 	bl	800622c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f1a:	2b40      	cmp	r3, #64	; 0x40
 8004f1c:	d10e      	bne.n	8004f3c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f28:	2b40      	cmp	r3, #64	; 0x40
 8004f2a:	d107      	bne.n	8004f3c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f000 faee 	bl	8005518 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	691b      	ldr	r3, [r3, #16]
 8004f42:	f003 0320 	and.w	r3, r3, #32
 8004f46:	2b20      	cmp	r3, #32
 8004f48:	d10e      	bne.n	8004f68 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	f003 0320 	and.w	r3, r3, #32
 8004f54:	2b20      	cmp	r3, #32
 8004f56:	d107      	bne.n	8004f68 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f06f 0220 	mvn.w	r2, #32
 8004f60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f001 f958 	bl	8006218 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f68:	bf00      	nop
 8004f6a:	3708      	adds	r7, #8
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}

08004f70 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b086      	sub	sp, #24
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	60b9      	str	r1, [r7, #8]
 8004f7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d101      	bne.n	8004f8e <HAL_TIM_IC_ConfigChannel+0x1e>
 8004f8a:	2302      	movs	r3, #2
 8004f8c:	e088      	b.n	80050a0 <HAL_TIM_IC_ConfigChannel+0x130>
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2201      	movs	r2, #1
 8004f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d11b      	bne.n	8004fd4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	6818      	ldr	r0, [r3, #0]
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	6819      	ldr	r1, [r3, #0]
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	685a      	ldr	r2, [r3, #4]
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	f000 fe7c 	bl	8005ca8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	699a      	ldr	r2, [r3, #24]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f022 020c 	bic.w	r2, r2, #12
 8004fbe:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	6999      	ldr	r1, [r3, #24]
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	689a      	ldr	r2, [r3, #8]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	430a      	orrs	r2, r1
 8004fd0:	619a      	str	r2, [r3, #24]
 8004fd2:	e060      	b.n	8005096 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2b04      	cmp	r3, #4
 8004fd8:	d11c      	bne.n	8005014 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	6818      	ldr	r0, [r3, #0]
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	6819      	ldr	r1, [r3, #0]
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	685a      	ldr	r2, [r3, #4]
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	68db      	ldr	r3, [r3, #12]
 8004fea:	f000 ff00 	bl	8005dee <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	699a      	ldr	r2, [r3, #24]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004ffc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	6999      	ldr	r1, [r3, #24]
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	021a      	lsls	r2, r3, #8
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	430a      	orrs	r2, r1
 8005010:	619a      	str	r2, [r3, #24]
 8005012:	e040      	b.n	8005096 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2b08      	cmp	r3, #8
 8005018:	d11b      	bne.n	8005052 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	6818      	ldr	r0, [r3, #0]
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	6819      	ldr	r1, [r3, #0]
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	685a      	ldr	r2, [r3, #4]
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	68db      	ldr	r3, [r3, #12]
 800502a:	f000 ff4d 	bl	8005ec8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	69da      	ldr	r2, [r3, #28]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f022 020c 	bic.w	r2, r2, #12
 800503c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	69d9      	ldr	r1, [r3, #28]
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	689a      	ldr	r2, [r3, #8]
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	430a      	orrs	r2, r1
 800504e:	61da      	str	r2, [r3, #28]
 8005050:	e021      	b.n	8005096 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2b0c      	cmp	r3, #12
 8005056:	d11c      	bne.n	8005092 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	6818      	ldr	r0, [r3, #0]
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	6819      	ldr	r1, [r3, #0]
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	685a      	ldr	r2, [r3, #4]
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	f000 ff6a 	bl	8005f40 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	69da      	ldr	r2, [r3, #28]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800507a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	69d9      	ldr	r1, [r3, #28]
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	021a      	lsls	r2, r3, #8
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	430a      	orrs	r2, r1
 800508e:	61da      	str	r2, [r3, #28]
 8005090:	e001      	b.n	8005096 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2200      	movs	r2, #0
 800509a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800509e:	7dfb      	ldrb	r3, [r7, #23]
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3718      	adds	r7, #24
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b086      	sub	sp, #24
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	60f8      	str	r0, [r7, #12]
 80050b0:	60b9      	str	r1, [r7, #8]
 80050b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050b4:	2300      	movs	r3, #0
 80050b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d101      	bne.n	80050c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80050c2:	2302      	movs	r3, #2
 80050c4:	e0ae      	b.n	8005224 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2201      	movs	r2, #1
 80050ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2b0c      	cmp	r3, #12
 80050d2:	f200 809f 	bhi.w	8005214 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80050d6:	a201      	add	r2, pc, #4	; (adr r2, 80050dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80050d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050dc:	08005111 	.word	0x08005111
 80050e0:	08005215 	.word	0x08005215
 80050e4:	08005215 	.word	0x08005215
 80050e8:	08005215 	.word	0x08005215
 80050ec:	08005151 	.word	0x08005151
 80050f0:	08005215 	.word	0x08005215
 80050f4:	08005215 	.word	0x08005215
 80050f8:	08005215 	.word	0x08005215
 80050fc:	08005193 	.word	0x08005193
 8005100:	08005215 	.word	0x08005215
 8005104:	08005215 	.word	0x08005215
 8005108:	08005215 	.word	0x08005215
 800510c:	080051d3 	.word	0x080051d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	68b9      	ldr	r1, [r7, #8]
 8005116:	4618      	mov	r0, r3
 8005118:	f000 fb84 	bl	8005824 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	699a      	ldr	r2, [r3, #24]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f042 0208 	orr.w	r2, r2, #8
 800512a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	699a      	ldr	r2, [r3, #24]
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f022 0204 	bic.w	r2, r2, #4
 800513a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	6999      	ldr	r1, [r3, #24]
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	691a      	ldr	r2, [r3, #16]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	430a      	orrs	r2, r1
 800514c:	619a      	str	r2, [r3, #24]
      break;
 800514e:	e064      	b.n	800521a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	68b9      	ldr	r1, [r7, #8]
 8005156:	4618      	mov	r0, r3
 8005158:	f000 fbd4 	bl	8005904 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	699a      	ldr	r2, [r3, #24]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800516a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	699a      	ldr	r2, [r3, #24]
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800517a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	6999      	ldr	r1, [r3, #24]
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	691b      	ldr	r3, [r3, #16]
 8005186:	021a      	lsls	r2, r3, #8
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	430a      	orrs	r2, r1
 800518e:	619a      	str	r2, [r3, #24]
      break;
 8005190:	e043      	b.n	800521a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	68b9      	ldr	r1, [r7, #8]
 8005198:	4618      	mov	r0, r3
 800519a:	f000 fc29 	bl	80059f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	69da      	ldr	r2, [r3, #28]
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f042 0208 	orr.w	r2, r2, #8
 80051ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	69da      	ldr	r2, [r3, #28]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f022 0204 	bic.w	r2, r2, #4
 80051bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	69d9      	ldr	r1, [r3, #28]
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	691a      	ldr	r2, [r3, #16]
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	430a      	orrs	r2, r1
 80051ce:	61da      	str	r2, [r3, #28]
      break;
 80051d0:	e023      	b.n	800521a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	68b9      	ldr	r1, [r7, #8]
 80051d8:	4618      	mov	r0, r3
 80051da:	f000 fc7d 	bl	8005ad8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	69da      	ldr	r2, [r3, #28]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	69da      	ldr	r2, [r3, #28]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	69d9      	ldr	r1, [r3, #28]
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	691b      	ldr	r3, [r3, #16]
 8005208:	021a      	lsls	r2, r3, #8
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	430a      	orrs	r2, r1
 8005210:	61da      	str	r2, [r3, #28]
      break;
 8005212:	e002      	b.n	800521a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005214:	2301      	movs	r3, #1
 8005216:	75fb      	strb	r3, [r7, #23]
      break;
 8005218:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2200      	movs	r2, #0
 800521e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005222:	7dfb      	ldrb	r3, [r7, #23]
}
 8005224:	4618      	mov	r0, r3
 8005226:	3718      	adds	r7, #24
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}

0800522c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b084      	sub	sp, #16
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005236:	2300      	movs	r3, #0
 8005238:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005240:	2b01      	cmp	r3, #1
 8005242:	d101      	bne.n	8005248 <HAL_TIM_ConfigClockSource+0x1c>
 8005244:	2302      	movs	r3, #2
 8005246:	e0b4      	b.n	80053b2 <HAL_TIM_ConfigClockSource+0x186>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2201      	movs	r2, #1
 800524c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2202      	movs	r2, #2
 8005254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005266:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800526e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	68ba      	ldr	r2, [r7, #8]
 8005276:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005280:	d03e      	beq.n	8005300 <HAL_TIM_ConfigClockSource+0xd4>
 8005282:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005286:	f200 8087 	bhi.w	8005398 <HAL_TIM_ConfigClockSource+0x16c>
 800528a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800528e:	f000 8086 	beq.w	800539e <HAL_TIM_ConfigClockSource+0x172>
 8005292:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005296:	d87f      	bhi.n	8005398 <HAL_TIM_ConfigClockSource+0x16c>
 8005298:	2b70      	cmp	r3, #112	; 0x70
 800529a:	d01a      	beq.n	80052d2 <HAL_TIM_ConfigClockSource+0xa6>
 800529c:	2b70      	cmp	r3, #112	; 0x70
 800529e:	d87b      	bhi.n	8005398 <HAL_TIM_ConfigClockSource+0x16c>
 80052a0:	2b60      	cmp	r3, #96	; 0x60
 80052a2:	d050      	beq.n	8005346 <HAL_TIM_ConfigClockSource+0x11a>
 80052a4:	2b60      	cmp	r3, #96	; 0x60
 80052a6:	d877      	bhi.n	8005398 <HAL_TIM_ConfigClockSource+0x16c>
 80052a8:	2b50      	cmp	r3, #80	; 0x50
 80052aa:	d03c      	beq.n	8005326 <HAL_TIM_ConfigClockSource+0xfa>
 80052ac:	2b50      	cmp	r3, #80	; 0x50
 80052ae:	d873      	bhi.n	8005398 <HAL_TIM_ConfigClockSource+0x16c>
 80052b0:	2b40      	cmp	r3, #64	; 0x40
 80052b2:	d058      	beq.n	8005366 <HAL_TIM_ConfigClockSource+0x13a>
 80052b4:	2b40      	cmp	r3, #64	; 0x40
 80052b6:	d86f      	bhi.n	8005398 <HAL_TIM_ConfigClockSource+0x16c>
 80052b8:	2b30      	cmp	r3, #48	; 0x30
 80052ba:	d064      	beq.n	8005386 <HAL_TIM_ConfigClockSource+0x15a>
 80052bc:	2b30      	cmp	r3, #48	; 0x30
 80052be:	d86b      	bhi.n	8005398 <HAL_TIM_ConfigClockSource+0x16c>
 80052c0:	2b20      	cmp	r3, #32
 80052c2:	d060      	beq.n	8005386 <HAL_TIM_ConfigClockSource+0x15a>
 80052c4:	2b20      	cmp	r3, #32
 80052c6:	d867      	bhi.n	8005398 <HAL_TIM_ConfigClockSource+0x16c>
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d05c      	beq.n	8005386 <HAL_TIM_ConfigClockSource+0x15a>
 80052cc:	2b10      	cmp	r3, #16
 80052ce:	d05a      	beq.n	8005386 <HAL_TIM_ConfigClockSource+0x15a>
 80052d0:	e062      	b.n	8005398 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6818      	ldr	r0, [r3, #0]
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	6899      	ldr	r1, [r3, #8]
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	685a      	ldr	r2, [r3, #4]
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	f000 fe85 	bl	8005ff0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80052f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	68ba      	ldr	r2, [r7, #8]
 80052fc:	609a      	str	r2, [r3, #8]
      break;
 80052fe:	e04f      	b.n	80053a0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6818      	ldr	r0, [r3, #0]
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	6899      	ldr	r1, [r3, #8]
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	685a      	ldr	r2, [r3, #4]
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	68db      	ldr	r3, [r3, #12]
 8005310:	f000 fe6e 	bl	8005ff0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	689a      	ldr	r2, [r3, #8]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005322:	609a      	str	r2, [r3, #8]
      break;
 8005324:	e03c      	b.n	80053a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6818      	ldr	r0, [r3, #0]
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	6859      	ldr	r1, [r3, #4]
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	68db      	ldr	r3, [r3, #12]
 8005332:	461a      	mov	r2, r3
 8005334:	f000 fd2c 	bl	8005d90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	2150      	movs	r1, #80	; 0x50
 800533e:	4618      	mov	r0, r3
 8005340:	f000 fe3b 	bl	8005fba <TIM_ITRx_SetConfig>
      break;
 8005344:	e02c      	b.n	80053a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6818      	ldr	r0, [r3, #0]
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	6859      	ldr	r1, [r3, #4]
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	461a      	mov	r2, r3
 8005354:	f000 fd88 	bl	8005e68 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	2160      	movs	r1, #96	; 0x60
 800535e:	4618      	mov	r0, r3
 8005360:	f000 fe2b 	bl	8005fba <TIM_ITRx_SetConfig>
      break;
 8005364:	e01c      	b.n	80053a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6818      	ldr	r0, [r3, #0]
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	6859      	ldr	r1, [r3, #4]
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	68db      	ldr	r3, [r3, #12]
 8005372:	461a      	mov	r2, r3
 8005374:	f000 fd0c 	bl	8005d90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	2140      	movs	r1, #64	; 0x40
 800537e:	4618      	mov	r0, r3
 8005380:	f000 fe1b 	bl	8005fba <TIM_ITRx_SetConfig>
      break;
 8005384:	e00c      	b.n	80053a0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4619      	mov	r1, r3
 8005390:	4610      	mov	r0, r2
 8005392:	f000 fe12 	bl	8005fba <TIM_ITRx_SetConfig>
      break;
 8005396:	e003      	b.n	80053a0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	73fb      	strb	r3, [r7, #15]
      break;
 800539c:	e000      	b.n	80053a0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800539e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2200      	movs	r2, #0
 80053ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80053b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3710      	adds	r7, #16
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}

080053ba <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80053ba:	b580      	push	{r7, lr}
 80053bc:	b082      	sub	sp, #8
 80053be:	af00      	add	r7, sp, #0
 80053c0:	6078      	str	r0, [r7, #4]
 80053c2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053ca:	2b01      	cmp	r3, #1
 80053cc:	d101      	bne.n	80053d2 <HAL_TIM_SlaveConfigSynchro+0x18>
 80053ce:	2302      	movs	r3, #2
 80053d0:	e031      	b.n	8005436 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2201      	movs	r2, #1
 80053d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2202      	movs	r2, #2
 80053de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80053e2:	6839      	ldr	r1, [r7, #0]
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f000 fbcd 	bl	8005b84 <TIM_SlaveTimer_SetConfig>
 80053ea:	4603      	mov	r3, r0
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d009      	beq.n	8005404 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2201      	movs	r2, #1
 80053f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	e018      	b.n	8005436 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	68da      	ldr	r2, [r3, #12]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005412:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	68da      	ldr	r2, [r3, #12]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005422:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2201      	movs	r2, #1
 8005428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2200      	movs	r2, #0
 8005430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005434:	2300      	movs	r3, #0
}
 8005436:	4618      	mov	r0, r3
 8005438:	3708      	adds	r7, #8
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}
	...

08005440 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005440:	b480      	push	{r7}
 8005442:	b085      	sub	sp, #20
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800544a:	2300      	movs	r3, #0
 800544c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	2b0c      	cmp	r3, #12
 8005452:	d831      	bhi.n	80054b8 <HAL_TIM_ReadCapturedValue+0x78>
 8005454:	a201      	add	r2, pc, #4	; (adr r2, 800545c <HAL_TIM_ReadCapturedValue+0x1c>)
 8005456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800545a:	bf00      	nop
 800545c:	08005491 	.word	0x08005491
 8005460:	080054b9 	.word	0x080054b9
 8005464:	080054b9 	.word	0x080054b9
 8005468:	080054b9 	.word	0x080054b9
 800546c:	0800549b 	.word	0x0800549b
 8005470:	080054b9 	.word	0x080054b9
 8005474:	080054b9 	.word	0x080054b9
 8005478:	080054b9 	.word	0x080054b9
 800547c:	080054a5 	.word	0x080054a5
 8005480:	080054b9 	.word	0x080054b9
 8005484:	080054b9 	.word	0x080054b9
 8005488:	080054b9 	.word	0x080054b9
 800548c:	080054af 	.word	0x080054af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005496:	60fb      	str	r3, [r7, #12]

      break;
 8005498:	e00f      	b.n	80054ba <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a0:	60fb      	str	r3, [r7, #12]

      break;
 80054a2:	e00a      	b.n	80054ba <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054aa:	60fb      	str	r3, [r7, #12]

      break;
 80054ac:	e005      	b.n	80054ba <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b4:	60fb      	str	r3, [r7, #12]

      break;
 80054b6:	e000      	b.n	80054ba <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80054b8:	bf00      	nop
  }

  return tmpreg;
 80054ba:	68fb      	ldr	r3, [r7, #12]
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3714      	adds	r7, #20
 80054c0:	46bd      	mov	sp, r7
 80054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c6:	4770      	bx	lr

080054c8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b083      	sub	sp, #12
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80054d0:	bf00      	nop
 80054d2:	370c      	adds	r7, #12
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr

080054dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054dc:	b480      	push	{r7}
 80054de:	b083      	sub	sp, #12
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80054e4:	bf00      	nop
 80054e6:	370c      	adds	r7, #12
 80054e8:	46bd      	mov	sp, r7
 80054ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ee:	4770      	bx	lr

080054f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b083      	sub	sp, #12
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80054f8:	bf00      	nop
 80054fa:	370c      	adds	r7, #12
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr

08005504 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005504:	b480      	push	{r7}
 8005506:	b083      	sub	sp, #12
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800550c:	bf00      	nop
 800550e:	370c      	adds	r7, #12
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr

08005518 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005518:	b480      	push	{r7}
 800551a:	b083      	sub	sp, #12
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005520:	bf00      	nop
 8005522:	370c      	adds	r7, #12
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr

0800552c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800552c:	b480      	push	{r7}
 800552e:	b083      	sub	sp, #12
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8005534:	bf00      	nop
 8005536:	370c      	adds	r7, #12
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr

08005540 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b084      	sub	sp, #16
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800554c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	429a      	cmp	r2, r3
 8005556:	d107      	bne.n	8005568 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2201      	movs	r2, #1
 800555c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2201      	movs	r2, #1
 8005562:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005566:	e02a      	b.n	80055be <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800556c:	687a      	ldr	r2, [r7, #4]
 800556e:	429a      	cmp	r2, r3
 8005570:	d107      	bne.n	8005582 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2202      	movs	r2, #2
 8005576:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2201      	movs	r2, #1
 800557c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005580:	e01d      	b.n	80055be <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005586:	687a      	ldr	r2, [r7, #4]
 8005588:	429a      	cmp	r2, r3
 800558a:	d107      	bne.n	800559c <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2204      	movs	r2, #4
 8005590:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2201      	movs	r2, #1
 8005596:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800559a:	e010      	b.n	80055be <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d107      	bne.n	80055b6 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2208      	movs	r2, #8
 80055aa:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2201      	movs	r2, #1
 80055b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80055b4:	e003      	b.n	80055be <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2201      	movs	r2, #1
 80055ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80055be:	68f8      	ldr	r0, [r7, #12]
 80055c0:	f7ff ffb4 	bl	800552c <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2200      	movs	r2, #0
 80055c8:	771a      	strb	r2, [r3, #28]
}
 80055ca:	bf00      	nop
 80055cc:	3710      	adds	r7, #16
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}

080055d2 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80055d2:	b580      	push	{r7, lr}
 80055d4:	b084      	sub	sp, #16
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055de:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e4:	687a      	ldr	r2, [r7, #4]
 80055e6:	429a      	cmp	r2, r3
 80055e8:	d10b      	bne.n	8005602 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2201      	movs	r2, #1
 80055ee:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	69db      	ldr	r3, [r3, #28]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d136      	bne.n	8005666 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2201      	movs	r2, #1
 80055fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005600:	e031      	b.n	8005666 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	429a      	cmp	r2, r3
 800560a:	d10b      	bne.n	8005624 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2202      	movs	r2, #2
 8005610:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	69db      	ldr	r3, [r3, #28]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d125      	bne.n	8005666 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2201      	movs	r2, #1
 800561e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005622:	e020      	b.n	8005666 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	429a      	cmp	r2, r3
 800562c:	d10b      	bne.n	8005646 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2204      	movs	r2, #4
 8005632:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	69db      	ldr	r3, [r3, #28]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d114      	bne.n	8005666 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2201      	movs	r2, #1
 8005640:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005644:	e00f      	b.n	8005666 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800564a:	687a      	ldr	r2, [r7, #4]
 800564c:	429a      	cmp	r2, r3
 800564e:	d10a      	bne.n	8005666 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2208      	movs	r2, #8
 8005654:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	69db      	ldr	r3, [r3, #28]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d103      	bne.n	8005666 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2201      	movs	r2, #1
 8005662:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005666:	68f8      	ldr	r0, [r7, #12]
 8005668:	f7ff ff42 	bl	80054f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2200      	movs	r2, #0
 8005670:	771a      	strb	r2, [r3, #28]
}
 8005672:	bf00      	nop
 8005674:	3710      	adds	r7, #16
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}

0800567a <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800567a:	b580      	push	{r7, lr}
 800567c:	b084      	sub	sp, #16
 800567e:	af00      	add	r7, sp, #0
 8005680:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005686:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	429a      	cmp	r2, r3
 8005690:	d103      	bne.n	800569a <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2201      	movs	r2, #1
 8005696:	771a      	strb	r2, [r3, #28]
 8005698:	e019      	b.n	80056ce <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d103      	bne.n	80056ac <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2202      	movs	r2, #2
 80056a8:	771a      	strb	r2, [r3, #28]
 80056aa:	e010      	b.n	80056ce <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056b0:	687a      	ldr	r2, [r7, #4]
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d103      	bne.n	80056be <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2204      	movs	r2, #4
 80056ba:	771a      	strb	r2, [r3, #28]
 80056bc:	e007      	b.n	80056ce <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056c2:	687a      	ldr	r2, [r7, #4]
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d102      	bne.n	80056ce <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2208      	movs	r2, #8
 80056cc:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80056ce:	68f8      	ldr	r0, [r7, #12]
 80056d0:	f7ff ff18 	bl	8005504 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2200      	movs	r2, #0
 80056d8:	771a      	strb	r2, [r3, #28]
}
 80056da:	bf00      	nop
 80056dc:	3710      	adds	r7, #16
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}
	...

080056e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b085      	sub	sp, #20
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
 80056ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	4a40      	ldr	r2, [pc, #256]	; (80057f8 <TIM_Base_SetConfig+0x114>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d013      	beq.n	8005724 <TIM_Base_SetConfig+0x40>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005702:	d00f      	beq.n	8005724 <TIM_Base_SetConfig+0x40>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	4a3d      	ldr	r2, [pc, #244]	; (80057fc <TIM_Base_SetConfig+0x118>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d00b      	beq.n	8005724 <TIM_Base_SetConfig+0x40>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	4a3c      	ldr	r2, [pc, #240]	; (8005800 <TIM_Base_SetConfig+0x11c>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d007      	beq.n	8005724 <TIM_Base_SetConfig+0x40>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	4a3b      	ldr	r2, [pc, #236]	; (8005804 <TIM_Base_SetConfig+0x120>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d003      	beq.n	8005724 <TIM_Base_SetConfig+0x40>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	4a3a      	ldr	r2, [pc, #232]	; (8005808 <TIM_Base_SetConfig+0x124>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d108      	bne.n	8005736 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800572a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	68fa      	ldr	r2, [r7, #12]
 8005732:	4313      	orrs	r3, r2
 8005734:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	4a2f      	ldr	r2, [pc, #188]	; (80057f8 <TIM_Base_SetConfig+0x114>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d02b      	beq.n	8005796 <TIM_Base_SetConfig+0xb2>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005744:	d027      	beq.n	8005796 <TIM_Base_SetConfig+0xb2>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4a2c      	ldr	r2, [pc, #176]	; (80057fc <TIM_Base_SetConfig+0x118>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d023      	beq.n	8005796 <TIM_Base_SetConfig+0xb2>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4a2b      	ldr	r2, [pc, #172]	; (8005800 <TIM_Base_SetConfig+0x11c>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d01f      	beq.n	8005796 <TIM_Base_SetConfig+0xb2>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	4a2a      	ldr	r2, [pc, #168]	; (8005804 <TIM_Base_SetConfig+0x120>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d01b      	beq.n	8005796 <TIM_Base_SetConfig+0xb2>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4a29      	ldr	r2, [pc, #164]	; (8005808 <TIM_Base_SetConfig+0x124>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d017      	beq.n	8005796 <TIM_Base_SetConfig+0xb2>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	4a28      	ldr	r2, [pc, #160]	; (800580c <TIM_Base_SetConfig+0x128>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d013      	beq.n	8005796 <TIM_Base_SetConfig+0xb2>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4a27      	ldr	r2, [pc, #156]	; (8005810 <TIM_Base_SetConfig+0x12c>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d00f      	beq.n	8005796 <TIM_Base_SetConfig+0xb2>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	4a26      	ldr	r2, [pc, #152]	; (8005814 <TIM_Base_SetConfig+0x130>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d00b      	beq.n	8005796 <TIM_Base_SetConfig+0xb2>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4a25      	ldr	r2, [pc, #148]	; (8005818 <TIM_Base_SetConfig+0x134>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d007      	beq.n	8005796 <TIM_Base_SetConfig+0xb2>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	4a24      	ldr	r2, [pc, #144]	; (800581c <TIM_Base_SetConfig+0x138>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d003      	beq.n	8005796 <TIM_Base_SetConfig+0xb2>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	4a23      	ldr	r2, [pc, #140]	; (8005820 <TIM_Base_SetConfig+0x13c>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d108      	bne.n	80057a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800579c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	68db      	ldr	r3, [r3, #12]
 80057a2:	68fa      	ldr	r2, [r7, #12]
 80057a4:	4313      	orrs	r3, r2
 80057a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	695b      	ldr	r3, [r3, #20]
 80057b2:	4313      	orrs	r3, r2
 80057b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	68fa      	ldr	r2, [r7, #12]
 80057ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	689a      	ldr	r2, [r3, #8]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	4a0a      	ldr	r2, [pc, #40]	; (80057f8 <TIM_Base_SetConfig+0x114>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d003      	beq.n	80057dc <TIM_Base_SetConfig+0xf8>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	4a0c      	ldr	r2, [pc, #48]	; (8005808 <TIM_Base_SetConfig+0x124>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d103      	bne.n	80057e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	691a      	ldr	r2, [r3, #16]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2201      	movs	r2, #1
 80057e8:	615a      	str	r2, [r3, #20]
}
 80057ea:	bf00      	nop
 80057ec:	3714      	adds	r7, #20
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr
 80057f6:	bf00      	nop
 80057f8:	40010000 	.word	0x40010000
 80057fc:	40000400 	.word	0x40000400
 8005800:	40000800 	.word	0x40000800
 8005804:	40000c00 	.word	0x40000c00
 8005808:	40010400 	.word	0x40010400
 800580c:	40014000 	.word	0x40014000
 8005810:	40014400 	.word	0x40014400
 8005814:	40014800 	.word	0x40014800
 8005818:	40001800 	.word	0x40001800
 800581c:	40001c00 	.word	0x40001c00
 8005820:	40002000 	.word	0x40002000

08005824 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005824:	b480      	push	{r7}
 8005826:	b087      	sub	sp, #28
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6a1b      	ldr	r3, [r3, #32]
 8005832:	f023 0201 	bic.w	r2, r3, #1
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6a1b      	ldr	r3, [r3, #32]
 800583e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	699b      	ldr	r3, [r3, #24]
 800584a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005852:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f023 0303 	bic.w	r3, r3, #3
 800585a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	68fa      	ldr	r2, [r7, #12]
 8005862:	4313      	orrs	r3, r2
 8005864:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	f023 0302 	bic.w	r3, r3, #2
 800586c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	697a      	ldr	r2, [r7, #20]
 8005874:	4313      	orrs	r3, r2
 8005876:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	4a20      	ldr	r2, [pc, #128]	; (80058fc <TIM_OC1_SetConfig+0xd8>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d003      	beq.n	8005888 <TIM_OC1_SetConfig+0x64>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	4a1f      	ldr	r2, [pc, #124]	; (8005900 <TIM_OC1_SetConfig+0xdc>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d10c      	bne.n	80058a2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	f023 0308 	bic.w	r3, r3, #8
 800588e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	68db      	ldr	r3, [r3, #12]
 8005894:	697a      	ldr	r2, [r7, #20]
 8005896:	4313      	orrs	r3, r2
 8005898:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	f023 0304 	bic.w	r3, r3, #4
 80058a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a15      	ldr	r2, [pc, #84]	; (80058fc <TIM_OC1_SetConfig+0xd8>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d003      	beq.n	80058b2 <TIM_OC1_SetConfig+0x8e>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a14      	ldr	r2, [pc, #80]	; (8005900 <TIM_OC1_SetConfig+0xdc>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d111      	bne.n	80058d6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80058c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	695b      	ldr	r3, [r3, #20]
 80058c6:	693a      	ldr	r2, [r7, #16]
 80058c8:	4313      	orrs	r3, r2
 80058ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	699b      	ldr	r3, [r3, #24]
 80058d0:	693a      	ldr	r2, [r7, #16]
 80058d2:	4313      	orrs	r3, r2
 80058d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	693a      	ldr	r2, [r7, #16]
 80058da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	68fa      	ldr	r2, [r7, #12]
 80058e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	685a      	ldr	r2, [r3, #4]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	697a      	ldr	r2, [r7, #20]
 80058ee:	621a      	str	r2, [r3, #32]
}
 80058f0:	bf00      	nop
 80058f2:	371c      	adds	r7, #28
 80058f4:	46bd      	mov	sp, r7
 80058f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fa:	4770      	bx	lr
 80058fc:	40010000 	.word	0x40010000
 8005900:	40010400 	.word	0x40010400

08005904 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005904:	b480      	push	{r7}
 8005906:	b087      	sub	sp, #28
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6a1b      	ldr	r3, [r3, #32]
 8005912:	f023 0210 	bic.w	r2, r3, #16
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6a1b      	ldr	r3, [r3, #32]
 800591e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	699b      	ldr	r3, [r3, #24]
 800592a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005932:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800593a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	021b      	lsls	r3, r3, #8
 8005942:	68fa      	ldr	r2, [r7, #12]
 8005944:	4313      	orrs	r3, r2
 8005946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	f023 0320 	bic.w	r3, r3, #32
 800594e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	011b      	lsls	r3, r3, #4
 8005956:	697a      	ldr	r2, [r7, #20]
 8005958:	4313      	orrs	r3, r2
 800595a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	4a22      	ldr	r2, [pc, #136]	; (80059e8 <TIM_OC2_SetConfig+0xe4>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d003      	beq.n	800596c <TIM_OC2_SetConfig+0x68>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	4a21      	ldr	r2, [pc, #132]	; (80059ec <TIM_OC2_SetConfig+0xe8>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d10d      	bne.n	8005988 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005972:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	68db      	ldr	r3, [r3, #12]
 8005978:	011b      	lsls	r3, r3, #4
 800597a:	697a      	ldr	r2, [r7, #20]
 800597c:	4313      	orrs	r3, r2
 800597e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005986:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	4a17      	ldr	r2, [pc, #92]	; (80059e8 <TIM_OC2_SetConfig+0xe4>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d003      	beq.n	8005998 <TIM_OC2_SetConfig+0x94>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	4a16      	ldr	r2, [pc, #88]	; (80059ec <TIM_OC2_SetConfig+0xe8>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d113      	bne.n	80059c0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800599e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80059a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	695b      	ldr	r3, [r3, #20]
 80059ac:	009b      	lsls	r3, r3, #2
 80059ae:	693a      	ldr	r2, [r7, #16]
 80059b0:	4313      	orrs	r3, r2
 80059b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	699b      	ldr	r3, [r3, #24]
 80059b8:	009b      	lsls	r3, r3, #2
 80059ba:	693a      	ldr	r2, [r7, #16]
 80059bc:	4313      	orrs	r3, r2
 80059be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	693a      	ldr	r2, [r7, #16]
 80059c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	68fa      	ldr	r2, [r7, #12]
 80059ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	685a      	ldr	r2, [r3, #4]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	697a      	ldr	r2, [r7, #20]
 80059d8:	621a      	str	r2, [r3, #32]
}
 80059da:	bf00      	nop
 80059dc:	371c      	adds	r7, #28
 80059de:	46bd      	mov	sp, r7
 80059e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e4:	4770      	bx	lr
 80059e6:	bf00      	nop
 80059e8:	40010000 	.word	0x40010000
 80059ec:	40010400 	.word	0x40010400

080059f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b087      	sub	sp, #28
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6a1b      	ldr	r3, [r3, #32]
 80059fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6a1b      	ldr	r3, [r3, #32]
 8005a0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	69db      	ldr	r3, [r3, #28]
 8005a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f023 0303 	bic.w	r3, r3, #3
 8005a26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	68fa      	ldr	r2, [r7, #12]
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	689b      	ldr	r3, [r3, #8]
 8005a3e:	021b      	lsls	r3, r3, #8
 8005a40:	697a      	ldr	r2, [r7, #20]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4a21      	ldr	r2, [pc, #132]	; (8005ad0 <TIM_OC3_SetConfig+0xe0>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d003      	beq.n	8005a56 <TIM_OC3_SetConfig+0x66>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a20      	ldr	r2, [pc, #128]	; (8005ad4 <TIM_OC3_SetConfig+0xe4>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d10d      	bne.n	8005a72 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	68db      	ldr	r3, [r3, #12]
 8005a62:	021b      	lsls	r3, r3, #8
 8005a64:	697a      	ldr	r2, [r7, #20]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	4a16      	ldr	r2, [pc, #88]	; (8005ad0 <TIM_OC3_SetConfig+0xe0>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d003      	beq.n	8005a82 <TIM_OC3_SetConfig+0x92>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4a15      	ldr	r2, [pc, #84]	; (8005ad4 <TIM_OC3_SetConfig+0xe4>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d113      	bne.n	8005aaa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	695b      	ldr	r3, [r3, #20]
 8005a96:	011b      	lsls	r3, r3, #4
 8005a98:	693a      	ldr	r2, [r7, #16]
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	699b      	ldr	r3, [r3, #24]
 8005aa2:	011b      	lsls	r3, r3, #4
 8005aa4:	693a      	ldr	r2, [r7, #16]
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	693a      	ldr	r2, [r7, #16]
 8005aae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	68fa      	ldr	r2, [r7, #12]
 8005ab4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	685a      	ldr	r2, [r3, #4]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	697a      	ldr	r2, [r7, #20]
 8005ac2:	621a      	str	r2, [r3, #32]
}
 8005ac4:	bf00      	nop
 8005ac6:	371c      	adds	r7, #28
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr
 8005ad0:	40010000 	.word	0x40010000
 8005ad4:	40010400 	.word	0x40010400

08005ad8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b087      	sub	sp, #28
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
 8005ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6a1b      	ldr	r3, [r3, #32]
 8005ae6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6a1b      	ldr	r3, [r3, #32]
 8005af2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	69db      	ldr	r3, [r3, #28]
 8005afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	021b      	lsls	r3, r3, #8
 8005b16:	68fa      	ldr	r2, [r7, #12]
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	689b      	ldr	r3, [r3, #8]
 8005b28:	031b      	lsls	r3, r3, #12
 8005b2a:	693a      	ldr	r2, [r7, #16]
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	4a12      	ldr	r2, [pc, #72]	; (8005b7c <TIM_OC4_SetConfig+0xa4>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d003      	beq.n	8005b40 <TIM_OC4_SetConfig+0x68>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	4a11      	ldr	r2, [pc, #68]	; (8005b80 <TIM_OC4_SetConfig+0xa8>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d109      	bne.n	8005b54 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b46:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	695b      	ldr	r3, [r3, #20]
 8005b4c:	019b      	lsls	r3, r3, #6
 8005b4e:	697a      	ldr	r2, [r7, #20]
 8005b50:	4313      	orrs	r3, r2
 8005b52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	697a      	ldr	r2, [r7, #20]
 8005b58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	68fa      	ldr	r2, [r7, #12]
 8005b5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	685a      	ldr	r2, [r3, #4]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	693a      	ldr	r2, [r7, #16]
 8005b6c:	621a      	str	r2, [r3, #32]
}
 8005b6e:	bf00      	nop
 8005b70:	371c      	adds	r7, #28
 8005b72:	46bd      	mov	sp, r7
 8005b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b78:	4770      	bx	lr
 8005b7a:	bf00      	nop
 8005b7c:	40010000 	.word	0x40010000
 8005b80:	40010400 	.word	0x40010400

08005b84 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b086      	sub	sp, #24
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ba0:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	693a      	ldr	r2, [r7, #16]
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	f023 0307 	bic.w	r3, r3, #7
 8005bb2:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	693a      	ldr	r2, [r7, #16]
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	693a      	ldr	r2, [r7, #16]
 8005bc4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	2b70      	cmp	r3, #112	; 0x70
 8005bcc:	d01a      	beq.n	8005c04 <TIM_SlaveTimer_SetConfig+0x80>
 8005bce:	2b70      	cmp	r3, #112	; 0x70
 8005bd0:	d860      	bhi.n	8005c94 <TIM_SlaveTimer_SetConfig+0x110>
 8005bd2:	2b60      	cmp	r3, #96	; 0x60
 8005bd4:	d054      	beq.n	8005c80 <TIM_SlaveTimer_SetConfig+0xfc>
 8005bd6:	2b60      	cmp	r3, #96	; 0x60
 8005bd8:	d85c      	bhi.n	8005c94 <TIM_SlaveTimer_SetConfig+0x110>
 8005bda:	2b50      	cmp	r3, #80	; 0x50
 8005bdc:	d046      	beq.n	8005c6c <TIM_SlaveTimer_SetConfig+0xe8>
 8005bde:	2b50      	cmp	r3, #80	; 0x50
 8005be0:	d858      	bhi.n	8005c94 <TIM_SlaveTimer_SetConfig+0x110>
 8005be2:	2b40      	cmp	r3, #64	; 0x40
 8005be4:	d019      	beq.n	8005c1a <TIM_SlaveTimer_SetConfig+0x96>
 8005be6:	2b40      	cmp	r3, #64	; 0x40
 8005be8:	d854      	bhi.n	8005c94 <TIM_SlaveTimer_SetConfig+0x110>
 8005bea:	2b30      	cmp	r3, #48	; 0x30
 8005bec:	d055      	beq.n	8005c9a <TIM_SlaveTimer_SetConfig+0x116>
 8005bee:	2b30      	cmp	r3, #48	; 0x30
 8005bf0:	d850      	bhi.n	8005c94 <TIM_SlaveTimer_SetConfig+0x110>
 8005bf2:	2b20      	cmp	r3, #32
 8005bf4:	d051      	beq.n	8005c9a <TIM_SlaveTimer_SetConfig+0x116>
 8005bf6:	2b20      	cmp	r3, #32
 8005bf8:	d84c      	bhi.n	8005c94 <TIM_SlaveTimer_SetConfig+0x110>
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d04d      	beq.n	8005c9a <TIM_SlaveTimer_SetConfig+0x116>
 8005bfe:	2b10      	cmp	r3, #16
 8005c00:	d04b      	beq.n	8005c9a <TIM_SlaveTimer_SetConfig+0x116>
 8005c02:	e047      	b.n	8005c94 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6818      	ldr	r0, [r3, #0]
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	68d9      	ldr	r1, [r3, #12]
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	689a      	ldr	r2, [r3, #8]
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	691b      	ldr	r3, [r3, #16]
 8005c14:	f000 f9ec 	bl	8005ff0 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8005c18:	e040      	b.n	8005c9c <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	2b05      	cmp	r3, #5
 8005c20:	d101      	bne.n	8005c26 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
 8005c24:	e03b      	b.n	8005c9e <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	6a1b      	ldr	r3, [r3, #32]
 8005c2c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	6a1a      	ldr	r2, [r3, #32]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f022 0201 	bic.w	r2, r2, #1
 8005c3c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	699b      	ldr	r3, [r3, #24]
 8005c44:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c4c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	691b      	ldr	r3, [r3, #16]
 8005c52:	011b      	lsls	r3, r3, #4
 8005c54:	68ba      	ldr	r2, [r7, #8]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	68ba      	ldr	r2, [r7, #8]
 8005c60:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	68fa      	ldr	r2, [r7, #12]
 8005c68:	621a      	str	r2, [r3, #32]
      break;
 8005c6a:	e017      	b.n	8005c9c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6818      	ldr	r0, [r3, #0]
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	6899      	ldr	r1, [r3, #8]
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	691b      	ldr	r3, [r3, #16]
 8005c78:	461a      	mov	r2, r3
 8005c7a:	f000 f889 	bl	8005d90 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8005c7e:	e00d      	b.n	8005c9c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6818      	ldr	r0, [r3, #0]
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	6899      	ldr	r1, [r3, #8]
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	691b      	ldr	r3, [r3, #16]
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	f000 f8eb 	bl	8005e68 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8005c92:	e003      	b.n	8005c9c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8005c94:	2301      	movs	r3, #1
 8005c96:	75fb      	strb	r3, [r7, #23]
      break;
 8005c98:	e000      	b.n	8005c9c <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8005c9a:	bf00      	nop
  }

  return status;
 8005c9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3718      	adds	r7, #24
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
	...

08005ca8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b087      	sub	sp, #28
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	60f8      	str	r0, [r7, #12]
 8005cb0:	60b9      	str	r1, [r7, #8]
 8005cb2:	607a      	str	r2, [r7, #4]
 8005cb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	6a1b      	ldr	r3, [r3, #32]
 8005cba:	f023 0201 	bic.w	r2, r3, #1
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	699b      	ldr	r3, [r3, #24]
 8005cc6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	6a1b      	ldr	r3, [r3, #32]
 8005ccc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	4a28      	ldr	r2, [pc, #160]	; (8005d74 <TIM_TI1_SetConfig+0xcc>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d01b      	beq.n	8005d0e <TIM_TI1_SetConfig+0x66>
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cdc:	d017      	beq.n	8005d0e <TIM_TI1_SetConfig+0x66>
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	4a25      	ldr	r2, [pc, #148]	; (8005d78 <TIM_TI1_SetConfig+0xd0>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d013      	beq.n	8005d0e <TIM_TI1_SetConfig+0x66>
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	4a24      	ldr	r2, [pc, #144]	; (8005d7c <TIM_TI1_SetConfig+0xd4>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d00f      	beq.n	8005d0e <TIM_TI1_SetConfig+0x66>
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	4a23      	ldr	r2, [pc, #140]	; (8005d80 <TIM_TI1_SetConfig+0xd8>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d00b      	beq.n	8005d0e <TIM_TI1_SetConfig+0x66>
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	4a22      	ldr	r2, [pc, #136]	; (8005d84 <TIM_TI1_SetConfig+0xdc>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d007      	beq.n	8005d0e <TIM_TI1_SetConfig+0x66>
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	4a21      	ldr	r2, [pc, #132]	; (8005d88 <TIM_TI1_SetConfig+0xe0>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d003      	beq.n	8005d0e <TIM_TI1_SetConfig+0x66>
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	4a20      	ldr	r2, [pc, #128]	; (8005d8c <TIM_TI1_SetConfig+0xe4>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d101      	bne.n	8005d12 <TIM_TI1_SetConfig+0x6a>
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e000      	b.n	8005d14 <TIM_TI1_SetConfig+0x6c>
 8005d12:	2300      	movs	r3, #0
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d008      	beq.n	8005d2a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	f023 0303 	bic.w	r3, r3, #3
 8005d1e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005d20:	697a      	ldr	r2, [r7, #20]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	4313      	orrs	r3, r2
 8005d26:	617b      	str	r3, [r7, #20]
 8005d28:	e003      	b.n	8005d32 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	f043 0301 	orr.w	r3, r3, #1
 8005d30:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d38:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	011b      	lsls	r3, r3, #4
 8005d3e:	b2db      	uxtb	r3, r3
 8005d40:	697a      	ldr	r2, [r7, #20]
 8005d42:	4313      	orrs	r3, r2
 8005d44:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	f023 030a 	bic.w	r3, r3, #10
 8005d4c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	f003 030a 	and.w	r3, r3, #10
 8005d54:	693a      	ldr	r2, [r7, #16]
 8005d56:	4313      	orrs	r3, r2
 8005d58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	697a      	ldr	r2, [r7, #20]
 8005d5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	693a      	ldr	r2, [r7, #16]
 8005d64:	621a      	str	r2, [r3, #32]
}
 8005d66:	bf00      	nop
 8005d68:	371c      	adds	r7, #28
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr
 8005d72:	bf00      	nop
 8005d74:	40010000 	.word	0x40010000
 8005d78:	40000400 	.word	0x40000400
 8005d7c:	40000800 	.word	0x40000800
 8005d80:	40000c00 	.word	0x40000c00
 8005d84:	40010400 	.word	0x40010400
 8005d88:	40014000 	.word	0x40014000
 8005d8c:	40001800 	.word	0x40001800

08005d90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b087      	sub	sp, #28
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	60f8      	str	r0, [r7, #12]
 8005d98:	60b9      	str	r1, [r7, #8]
 8005d9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	6a1b      	ldr	r3, [r3, #32]
 8005da0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	6a1b      	ldr	r3, [r3, #32]
 8005da6:	f023 0201 	bic.w	r2, r3, #1
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	699b      	ldr	r3, [r3, #24]
 8005db2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005dba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	011b      	lsls	r3, r3, #4
 8005dc0:	693a      	ldr	r2, [r7, #16]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	f023 030a 	bic.w	r3, r3, #10
 8005dcc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005dce:	697a      	ldr	r2, [r7, #20]
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	693a      	ldr	r2, [r7, #16]
 8005dda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	697a      	ldr	r2, [r7, #20]
 8005de0:	621a      	str	r2, [r3, #32]
}
 8005de2:	bf00      	nop
 8005de4:	371c      	adds	r7, #28
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr

08005dee <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005dee:	b480      	push	{r7}
 8005df0:	b087      	sub	sp, #28
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	60f8      	str	r0, [r7, #12]
 8005df6:	60b9      	str	r1, [r7, #8]
 8005df8:	607a      	str	r2, [r7, #4]
 8005dfa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	6a1b      	ldr	r3, [r3, #32]
 8005e00:	f023 0210 	bic.w	r2, r3, #16
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	699b      	ldr	r3, [r3, #24]
 8005e0c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	6a1b      	ldr	r3, [r3, #32]
 8005e12:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e1a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	021b      	lsls	r3, r3, #8
 8005e20:	697a      	ldr	r2, [r7, #20]
 8005e22:	4313      	orrs	r3, r2
 8005e24:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e2c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	031b      	lsls	r3, r3, #12
 8005e32:	b29b      	uxth	r3, r3
 8005e34:	697a      	ldr	r2, [r7, #20]
 8005e36:	4313      	orrs	r3, r2
 8005e38:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e40:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	011b      	lsls	r3, r3, #4
 8005e46:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005e4a:	693a      	ldr	r2, [r7, #16]
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	697a      	ldr	r2, [r7, #20]
 8005e54:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	693a      	ldr	r2, [r7, #16]
 8005e5a:	621a      	str	r2, [r3, #32]
}
 8005e5c:	bf00      	nop
 8005e5e:	371c      	adds	r7, #28
 8005e60:	46bd      	mov	sp, r7
 8005e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e66:	4770      	bx	lr

08005e68 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b087      	sub	sp, #28
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	60f8      	str	r0, [r7, #12]
 8005e70:	60b9      	str	r1, [r7, #8]
 8005e72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	6a1b      	ldr	r3, [r3, #32]
 8005e78:	f023 0210 	bic.w	r2, r3, #16
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	699b      	ldr	r3, [r3, #24]
 8005e84:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	6a1b      	ldr	r3, [r3, #32]
 8005e8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e92:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	031b      	lsls	r3, r3, #12
 8005e98:	697a      	ldr	r2, [r7, #20]
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005ea4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	011b      	lsls	r3, r3, #4
 8005eaa:	693a      	ldr	r2, [r7, #16]
 8005eac:	4313      	orrs	r3, r2
 8005eae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	697a      	ldr	r2, [r7, #20]
 8005eb4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	693a      	ldr	r2, [r7, #16]
 8005eba:	621a      	str	r2, [r3, #32]
}
 8005ebc:	bf00      	nop
 8005ebe:	371c      	adds	r7, #28
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr

08005ec8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b087      	sub	sp, #28
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	60f8      	str	r0, [r7, #12]
 8005ed0:	60b9      	str	r1, [r7, #8]
 8005ed2:	607a      	str	r2, [r7, #4]
 8005ed4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	6a1b      	ldr	r3, [r3, #32]
 8005eda:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	69db      	ldr	r3, [r3, #28]
 8005ee6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	6a1b      	ldr	r3, [r3, #32]
 8005eec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	f023 0303 	bic.w	r3, r3, #3
 8005ef4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005ef6:	697a      	ldr	r2, [r7, #20]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	4313      	orrs	r3, r2
 8005efc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f04:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	011b      	lsls	r3, r3, #4
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	697a      	ldr	r2, [r7, #20]
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005f18:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	021b      	lsls	r3, r3, #8
 8005f1e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005f22:	693a      	ldr	r2, [r7, #16]
 8005f24:	4313      	orrs	r3, r2
 8005f26:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	697a      	ldr	r2, [r7, #20]
 8005f2c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	693a      	ldr	r2, [r7, #16]
 8005f32:	621a      	str	r2, [r3, #32]
}
 8005f34:	bf00      	nop
 8005f36:	371c      	adds	r7, #28
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr

08005f40 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b087      	sub	sp, #28
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	60f8      	str	r0, [r7, #12]
 8005f48:	60b9      	str	r1, [r7, #8]
 8005f4a:	607a      	str	r2, [r7, #4]
 8005f4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	6a1b      	ldr	r3, [r3, #32]
 8005f52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	69db      	ldr	r3, [r3, #28]
 8005f5e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	6a1b      	ldr	r3, [r3, #32]
 8005f64:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f6c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	021b      	lsls	r3, r3, #8
 8005f72:	697a      	ldr	r2, [r7, #20]
 8005f74:	4313      	orrs	r3, r2
 8005f76:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f7e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	031b      	lsls	r3, r3, #12
 8005f84:	b29b      	uxth	r3, r3
 8005f86:	697a      	ldr	r2, [r7, #20]
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005f92:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	031b      	lsls	r3, r3, #12
 8005f98:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005f9c:	693a      	ldr	r2, [r7, #16]
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	697a      	ldr	r2, [r7, #20]
 8005fa6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	693a      	ldr	r2, [r7, #16]
 8005fac:	621a      	str	r2, [r3, #32]
}
 8005fae:	bf00      	nop
 8005fb0:	371c      	adds	r7, #28
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr

08005fba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005fba:	b480      	push	{r7}
 8005fbc:	b085      	sub	sp, #20
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	6078      	str	r0, [r7, #4]
 8005fc2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fd0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005fd2:	683a      	ldr	r2, [r7, #0]
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	f043 0307 	orr.w	r3, r3, #7
 8005fdc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	68fa      	ldr	r2, [r7, #12]
 8005fe2:	609a      	str	r2, [r3, #8]
}
 8005fe4:	bf00      	nop
 8005fe6:	3714      	adds	r7, #20
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr

08005ff0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b087      	sub	sp, #28
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	60f8      	str	r0, [r7, #12]
 8005ff8:	60b9      	str	r1, [r7, #8]
 8005ffa:	607a      	str	r2, [r7, #4]
 8005ffc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800600a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	021a      	lsls	r2, r3, #8
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	431a      	orrs	r2, r3
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	4313      	orrs	r3, r2
 8006018:	697a      	ldr	r2, [r7, #20]
 800601a:	4313      	orrs	r3, r2
 800601c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	697a      	ldr	r2, [r7, #20]
 8006022:	609a      	str	r2, [r3, #8]
}
 8006024:	bf00      	nop
 8006026:	371c      	adds	r7, #28
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr

08006030 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006030:	b480      	push	{r7}
 8006032:	b087      	sub	sp, #28
 8006034:	af00      	add	r7, sp, #0
 8006036:	60f8      	str	r0, [r7, #12]
 8006038:	60b9      	str	r1, [r7, #8]
 800603a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	f003 031f 	and.w	r3, r3, #31
 8006042:	2201      	movs	r2, #1
 8006044:	fa02 f303 	lsl.w	r3, r2, r3
 8006048:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	6a1a      	ldr	r2, [r3, #32]
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	43db      	mvns	r3, r3
 8006052:	401a      	ands	r2, r3
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6a1a      	ldr	r2, [r3, #32]
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	f003 031f 	and.w	r3, r3, #31
 8006062:	6879      	ldr	r1, [r7, #4]
 8006064:	fa01 f303 	lsl.w	r3, r1, r3
 8006068:	431a      	orrs	r2, r3
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	621a      	str	r2, [r3, #32]
}
 800606e:	bf00      	nop
 8006070:	371c      	adds	r7, #28
 8006072:	46bd      	mov	sp, r7
 8006074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006078:	4770      	bx	lr
	...

0800607c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800607c:	b480      	push	{r7}
 800607e:	b085      	sub	sp, #20
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
 8006084:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800608c:	2b01      	cmp	r3, #1
 800608e:	d101      	bne.n	8006094 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006090:	2302      	movs	r3, #2
 8006092:	e05a      	b.n	800614a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2201      	movs	r2, #1
 8006098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2202      	movs	r2, #2
 80060a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	689b      	ldr	r3, [r3, #8]
 80060b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	68fa      	ldr	r2, [r7, #12]
 80060c2:	4313      	orrs	r3, r2
 80060c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	68fa      	ldr	r2, [r7, #12]
 80060cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a21      	ldr	r2, [pc, #132]	; (8006158 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d022      	beq.n	800611e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060e0:	d01d      	beq.n	800611e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a1d      	ldr	r2, [pc, #116]	; (800615c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d018      	beq.n	800611e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a1b      	ldr	r2, [pc, #108]	; (8006160 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d013      	beq.n	800611e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a1a      	ldr	r2, [pc, #104]	; (8006164 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d00e      	beq.n	800611e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a18      	ldr	r2, [pc, #96]	; (8006168 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d009      	beq.n	800611e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a17      	ldr	r2, [pc, #92]	; (800616c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d004      	beq.n	800611e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a15      	ldr	r2, [pc, #84]	; (8006170 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d10c      	bne.n	8006138 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006124:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	68ba      	ldr	r2, [r7, #8]
 800612c:	4313      	orrs	r3, r2
 800612e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	68ba      	ldr	r2, [r7, #8]
 8006136:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2201      	movs	r2, #1
 800613c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2200      	movs	r2, #0
 8006144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006148:	2300      	movs	r3, #0
}
 800614a:	4618      	mov	r0, r3
 800614c:	3714      	adds	r7, #20
 800614e:	46bd      	mov	sp, r7
 8006150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006154:	4770      	bx	lr
 8006156:	bf00      	nop
 8006158:	40010000 	.word	0x40010000
 800615c:	40000400 	.word	0x40000400
 8006160:	40000800 	.word	0x40000800
 8006164:	40000c00 	.word	0x40000c00
 8006168:	40010400 	.word	0x40010400
 800616c:	40014000 	.word	0x40014000
 8006170:	40001800 	.word	0x40001800

08006174 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006174:	b480      	push	{r7}
 8006176:	b085      	sub	sp, #20
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
 800617c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800617e:	2300      	movs	r3, #0
 8006180:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006188:	2b01      	cmp	r3, #1
 800618a:	d101      	bne.n	8006190 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800618c:	2302      	movs	r3, #2
 800618e:	e03d      	b.n	800620c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2201      	movs	r2, #1
 8006194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	68db      	ldr	r3, [r3, #12]
 80061a2:	4313      	orrs	r3, r2
 80061a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	689b      	ldr	r3, [r3, #8]
 80061b0:	4313      	orrs	r3, r2
 80061b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	4313      	orrs	r3, r2
 80061c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4313      	orrs	r3, r2
 80061ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	691b      	ldr	r3, [r3, #16]
 80061da:	4313      	orrs	r3, r2
 80061dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	695b      	ldr	r3, [r3, #20]
 80061e8:	4313      	orrs	r3, r2
 80061ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	69db      	ldr	r3, [r3, #28]
 80061f6:	4313      	orrs	r3, r2
 80061f8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	68fa      	ldr	r2, [r7, #12]
 8006200:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2200      	movs	r2, #0
 8006206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800620a:	2300      	movs	r3, #0
}
 800620c:	4618      	mov	r0, r3
 800620e:	3714      	adds	r7, #20
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr

08006218 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006218:	b480      	push	{r7}
 800621a:	b083      	sub	sp, #12
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006220:	bf00      	nop
 8006222:	370c      	adds	r7, #12
 8006224:	46bd      	mov	sp, r7
 8006226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622a:	4770      	bx	lr

0800622c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800622c:	b480      	push	{r7}
 800622e:	b083      	sub	sp, #12
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006234:	bf00      	nop
 8006236:	370c      	adds	r7, #12
 8006238:	46bd      	mov	sp, r7
 800623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623e:	4770      	bx	lr

08006240 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b082      	sub	sp, #8
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d101      	bne.n	8006252 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800624e:	2301      	movs	r3, #1
 8006250:	e03f      	b.n	80062d2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006258:	b2db      	uxtb	r3, r3
 800625a:	2b00      	cmp	r3, #0
 800625c:	d106      	bne.n	800626c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2200      	movs	r2, #0
 8006262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f7fb fe7a 	bl	8001f60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2224      	movs	r2, #36	; 0x24
 8006270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	68da      	ldr	r2, [r3, #12]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006282:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f000 f829 	bl	80062dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	691a      	ldr	r2, [r3, #16]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006298:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	695a      	ldr	r2, [r3, #20]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80062a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	68da      	ldr	r2, [r3, #12]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80062b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2200      	movs	r2, #0
 80062be:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2220      	movs	r2, #32
 80062c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2220      	movs	r2, #32
 80062cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80062d0:	2300      	movs	r3, #0
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3708      	adds	r7, #8
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}
	...

080062dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80062e0:	b0c0      	sub	sp, #256	; 0x100
 80062e2:	af00      	add	r7, sp, #0
 80062e4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	691b      	ldr	r3, [r3, #16]
 80062f0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80062f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062f8:	68d9      	ldr	r1, [r3, #12]
 80062fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062fe:	681a      	ldr	r2, [r3, #0]
 8006300:	ea40 0301 	orr.w	r3, r0, r1
 8006304:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006306:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800630a:	689a      	ldr	r2, [r3, #8]
 800630c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006310:	691b      	ldr	r3, [r3, #16]
 8006312:	431a      	orrs	r2, r3
 8006314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006318:	695b      	ldr	r3, [r3, #20]
 800631a:	431a      	orrs	r2, r3
 800631c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006320:	69db      	ldr	r3, [r3, #28]
 8006322:	4313      	orrs	r3, r2
 8006324:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	68db      	ldr	r3, [r3, #12]
 8006330:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006334:	f021 010c 	bic.w	r1, r1, #12
 8006338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006342:	430b      	orrs	r3, r1
 8006344:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	695b      	ldr	r3, [r3, #20]
 800634e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006356:	6999      	ldr	r1, [r3, #24]
 8006358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800635c:	681a      	ldr	r2, [r3, #0]
 800635e:	ea40 0301 	orr.w	r3, r0, r1
 8006362:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006368:	681a      	ldr	r2, [r3, #0]
 800636a:	4b8f      	ldr	r3, [pc, #572]	; (80065a8 <UART_SetConfig+0x2cc>)
 800636c:	429a      	cmp	r2, r3
 800636e:	d005      	beq.n	800637c <UART_SetConfig+0xa0>
 8006370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006374:	681a      	ldr	r2, [r3, #0]
 8006376:	4b8d      	ldr	r3, [pc, #564]	; (80065ac <UART_SetConfig+0x2d0>)
 8006378:	429a      	cmp	r2, r3
 800637a:	d104      	bne.n	8006386 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800637c:	f7fd fef8 	bl	8004170 <HAL_RCC_GetPCLK2Freq>
 8006380:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006384:	e003      	b.n	800638e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006386:	f7fd fedf 	bl	8004148 <HAL_RCC_GetPCLK1Freq>
 800638a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800638e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006392:	69db      	ldr	r3, [r3, #28]
 8006394:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006398:	f040 810c 	bne.w	80065b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800639c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063a0:	2200      	movs	r2, #0
 80063a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80063a6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80063aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80063ae:	4622      	mov	r2, r4
 80063b0:	462b      	mov	r3, r5
 80063b2:	1891      	adds	r1, r2, r2
 80063b4:	65b9      	str	r1, [r7, #88]	; 0x58
 80063b6:	415b      	adcs	r3, r3
 80063b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80063ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80063be:	4621      	mov	r1, r4
 80063c0:	eb12 0801 	adds.w	r8, r2, r1
 80063c4:	4629      	mov	r1, r5
 80063c6:	eb43 0901 	adc.w	r9, r3, r1
 80063ca:	f04f 0200 	mov.w	r2, #0
 80063ce:	f04f 0300 	mov.w	r3, #0
 80063d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80063d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80063da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80063de:	4690      	mov	r8, r2
 80063e0:	4699      	mov	r9, r3
 80063e2:	4623      	mov	r3, r4
 80063e4:	eb18 0303 	adds.w	r3, r8, r3
 80063e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80063ec:	462b      	mov	r3, r5
 80063ee:	eb49 0303 	adc.w	r3, r9, r3
 80063f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80063f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	2200      	movs	r2, #0
 80063fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006402:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006406:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800640a:	460b      	mov	r3, r1
 800640c:	18db      	adds	r3, r3, r3
 800640e:	653b      	str	r3, [r7, #80]	; 0x50
 8006410:	4613      	mov	r3, r2
 8006412:	eb42 0303 	adc.w	r3, r2, r3
 8006416:	657b      	str	r3, [r7, #84]	; 0x54
 8006418:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800641c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006420:	f7fa fb04 	bl	8000a2c <__aeabi_uldivmod>
 8006424:	4602      	mov	r2, r0
 8006426:	460b      	mov	r3, r1
 8006428:	4b61      	ldr	r3, [pc, #388]	; (80065b0 <UART_SetConfig+0x2d4>)
 800642a:	fba3 2302 	umull	r2, r3, r3, r2
 800642e:	095b      	lsrs	r3, r3, #5
 8006430:	011c      	lsls	r4, r3, #4
 8006432:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006436:	2200      	movs	r2, #0
 8006438:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800643c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006440:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006444:	4642      	mov	r2, r8
 8006446:	464b      	mov	r3, r9
 8006448:	1891      	adds	r1, r2, r2
 800644a:	64b9      	str	r1, [r7, #72]	; 0x48
 800644c:	415b      	adcs	r3, r3
 800644e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006450:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006454:	4641      	mov	r1, r8
 8006456:	eb12 0a01 	adds.w	sl, r2, r1
 800645a:	4649      	mov	r1, r9
 800645c:	eb43 0b01 	adc.w	fp, r3, r1
 8006460:	f04f 0200 	mov.w	r2, #0
 8006464:	f04f 0300 	mov.w	r3, #0
 8006468:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800646c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006470:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006474:	4692      	mov	sl, r2
 8006476:	469b      	mov	fp, r3
 8006478:	4643      	mov	r3, r8
 800647a:	eb1a 0303 	adds.w	r3, sl, r3
 800647e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006482:	464b      	mov	r3, r9
 8006484:	eb4b 0303 	adc.w	r3, fp, r3
 8006488:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800648c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	2200      	movs	r2, #0
 8006494:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006498:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800649c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80064a0:	460b      	mov	r3, r1
 80064a2:	18db      	adds	r3, r3, r3
 80064a4:	643b      	str	r3, [r7, #64]	; 0x40
 80064a6:	4613      	mov	r3, r2
 80064a8:	eb42 0303 	adc.w	r3, r2, r3
 80064ac:	647b      	str	r3, [r7, #68]	; 0x44
 80064ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80064b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80064b6:	f7fa fab9 	bl	8000a2c <__aeabi_uldivmod>
 80064ba:	4602      	mov	r2, r0
 80064bc:	460b      	mov	r3, r1
 80064be:	4611      	mov	r1, r2
 80064c0:	4b3b      	ldr	r3, [pc, #236]	; (80065b0 <UART_SetConfig+0x2d4>)
 80064c2:	fba3 2301 	umull	r2, r3, r3, r1
 80064c6:	095b      	lsrs	r3, r3, #5
 80064c8:	2264      	movs	r2, #100	; 0x64
 80064ca:	fb02 f303 	mul.w	r3, r2, r3
 80064ce:	1acb      	subs	r3, r1, r3
 80064d0:	00db      	lsls	r3, r3, #3
 80064d2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80064d6:	4b36      	ldr	r3, [pc, #216]	; (80065b0 <UART_SetConfig+0x2d4>)
 80064d8:	fba3 2302 	umull	r2, r3, r3, r2
 80064dc:	095b      	lsrs	r3, r3, #5
 80064de:	005b      	lsls	r3, r3, #1
 80064e0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80064e4:	441c      	add	r4, r3
 80064e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064ea:	2200      	movs	r2, #0
 80064ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80064f0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80064f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80064f8:	4642      	mov	r2, r8
 80064fa:	464b      	mov	r3, r9
 80064fc:	1891      	adds	r1, r2, r2
 80064fe:	63b9      	str	r1, [r7, #56]	; 0x38
 8006500:	415b      	adcs	r3, r3
 8006502:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006504:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006508:	4641      	mov	r1, r8
 800650a:	1851      	adds	r1, r2, r1
 800650c:	6339      	str	r1, [r7, #48]	; 0x30
 800650e:	4649      	mov	r1, r9
 8006510:	414b      	adcs	r3, r1
 8006512:	637b      	str	r3, [r7, #52]	; 0x34
 8006514:	f04f 0200 	mov.w	r2, #0
 8006518:	f04f 0300 	mov.w	r3, #0
 800651c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006520:	4659      	mov	r1, fp
 8006522:	00cb      	lsls	r3, r1, #3
 8006524:	4651      	mov	r1, sl
 8006526:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800652a:	4651      	mov	r1, sl
 800652c:	00ca      	lsls	r2, r1, #3
 800652e:	4610      	mov	r0, r2
 8006530:	4619      	mov	r1, r3
 8006532:	4603      	mov	r3, r0
 8006534:	4642      	mov	r2, r8
 8006536:	189b      	adds	r3, r3, r2
 8006538:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800653c:	464b      	mov	r3, r9
 800653e:	460a      	mov	r2, r1
 8006540:	eb42 0303 	adc.w	r3, r2, r3
 8006544:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	2200      	movs	r2, #0
 8006550:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006554:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006558:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800655c:	460b      	mov	r3, r1
 800655e:	18db      	adds	r3, r3, r3
 8006560:	62bb      	str	r3, [r7, #40]	; 0x28
 8006562:	4613      	mov	r3, r2
 8006564:	eb42 0303 	adc.w	r3, r2, r3
 8006568:	62fb      	str	r3, [r7, #44]	; 0x2c
 800656a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800656e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006572:	f7fa fa5b 	bl	8000a2c <__aeabi_uldivmod>
 8006576:	4602      	mov	r2, r0
 8006578:	460b      	mov	r3, r1
 800657a:	4b0d      	ldr	r3, [pc, #52]	; (80065b0 <UART_SetConfig+0x2d4>)
 800657c:	fba3 1302 	umull	r1, r3, r3, r2
 8006580:	095b      	lsrs	r3, r3, #5
 8006582:	2164      	movs	r1, #100	; 0x64
 8006584:	fb01 f303 	mul.w	r3, r1, r3
 8006588:	1ad3      	subs	r3, r2, r3
 800658a:	00db      	lsls	r3, r3, #3
 800658c:	3332      	adds	r3, #50	; 0x32
 800658e:	4a08      	ldr	r2, [pc, #32]	; (80065b0 <UART_SetConfig+0x2d4>)
 8006590:	fba2 2303 	umull	r2, r3, r2, r3
 8006594:	095b      	lsrs	r3, r3, #5
 8006596:	f003 0207 	and.w	r2, r3, #7
 800659a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4422      	add	r2, r4
 80065a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80065a4:	e105      	b.n	80067b2 <UART_SetConfig+0x4d6>
 80065a6:	bf00      	nop
 80065a8:	40011000 	.word	0x40011000
 80065ac:	40011400 	.word	0x40011400
 80065b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80065b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065b8:	2200      	movs	r2, #0
 80065ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80065be:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80065c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80065c6:	4642      	mov	r2, r8
 80065c8:	464b      	mov	r3, r9
 80065ca:	1891      	adds	r1, r2, r2
 80065cc:	6239      	str	r1, [r7, #32]
 80065ce:	415b      	adcs	r3, r3
 80065d0:	627b      	str	r3, [r7, #36]	; 0x24
 80065d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80065d6:	4641      	mov	r1, r8
 80065d8:	1854      	adds	r4, r2, r1
 80065da:	4649      	mov	r1, r9
 80065dc:	eb43 0501 	adc.w	r5, r3, r1
 80065e0:	f04f 0200 	mov.w	r2, #0
 80065e4:	f04f 0300 	mov.w	r3, #0
 80065e8:	00eb      	lsls	r3, r5, #3
 80065ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80065ee:	00e2      	lsls	r2, r4, #3
 80065f0:	4614      	mov	r4, r2
 80065f2:	461d      	mov	r5, r3
 80065f4:	4643      	mov	r3, r8
 80065f6:	18e3      	adds	r3, r4, r3
 80065f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80065fc:	464b      	mov	r3, r9
 80065fe:	eb45 0303 	adc.w	r3, r5, r3
 8006602:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	2200      	movs	r2, #0
 800660e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006612:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006616:	f04f 0200 	mov.w	r2, #0
 800661a:	f04f 0300 	mov.w	r3, #0
 800661e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006622:	4629      	mov	r1, r5
 8006624:	008b      	lsls	r3, r1, #2
 8006626:	4621      	mov	r1, r4
 8006628:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800662c:	4621      	mov	r1, r4
 800662e:	008a      	lsls	r2, r1, #2
 8006630:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006634:	f7fa f9fa 	bl	8000a2c <__aeabi_uldivmod>
 8006638:	4602      	mov	r2, r0
 800663a:	460b      	mov	r3, r1
 800663c:	4b60      	ldr	r3, [pc, #384]	; (80067c0 <UART_SetConfig+0x4e4>)
 800663e:	fba3 2302 	umull	r2, r3, r3, r2
 8006642:	095b      	lsrs	r3, r3, #5
 8006644:	011c      	lsls	r4, r3, #4
 8006646:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800664a:	2200      	movs	r2, #0
 800664c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006650:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006654:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006658:	4642      	mov	r2, r8
 800665a:	464b      	mov	r3, r9
 800665c:	1891      	adds	r1, r2, r2
 800665e:	61b9      	str	r1, [r7, #24]
 8006660:	415b      	adcs	r3, r3
 8006662:	61fb      	str	r3, [r7, #28]
 8006664:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006668:	4641      	mov	r1, r8
 800666a:	1851      	adds	r1, r2, r1
 800666c:	6139      	str	r1, [r7, #16]
 800666e:	4649      	mov	r1, r9
 8006670:	414b      	adcs	r3, r1
 8006672:	617b      	str	r3, [r7, #20]
 8006674:	f04f 0200 	mov.w	r2, #0
 8006678:	f04f 0300 	mov.w	r3, #0
 800667c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006680:	4659      	mov	r1, fp
 8006682:	00cb      	lsls	r3, r1, #3
 8006684:	4651      	mov	r1, sl
 8006686:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800668a:	4651      	mov	r1, sl
 800668c:	00ca      	lsls	r2, r1, #3
 800668e:	4610      	mov	r0, r2
 8006690:	4619      	mov	r1, r3
 8006692:	4603      	mov	r3, r0
 8006694:	4642      	mov	r2, r8
 8006696:	189b      	adds	r3, r3, r2
 8006698:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800669c:	464b      	mov	r3, r9
 800669e:	460a      	mov	r2, r1
 80066a0:	eb42 0303 	adc.w	r3, r2, r3
 80066a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80066a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	2200      	movs	r2, #0
 80066b0:	67bb      	str	r3, [r7, #120]	; 0x78
 80066b2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80066b4:	f04f 0200 	mov.w	r2, #0
 80066b8:	f04f 0300 	mov.w	r3, #0
 80066bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80066c0:	4649      	mov	r1, r9
 80066c2:	008b      	lsls	r3, r1, #2
 80066c4:	4641      	mov	r1, r8
 80066c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80066ca:	4641      	mov	r1, r8
 80066cc:	008a      	lsls	r2, r1, #2
 80066ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80066d2:	f7fa f9ab 	bl	8000a2c <__aeabi_uldivmod>
 80066d6:	4602      	mov	r2, r0
 80066d8:	460b      	mov	r3, r1
 80066da:	4b39      	ldr	r3, [pc, #228]	; (80067c0 <UART_SetConfig+0x4e4>)
 80066dc:	fba3 1302 	umull	r1, r3, r3, r2
 80066e0:	095b      	lsrs	r3, r3, #5
 80066e2:	2164      	movs	r1, #100	; 0x64
 80066e4:	fb01 f303 	mul.w	r3, r1, r3
 80066e8:	1ad3      	subs	r3, r2, r3
 80066ea:	011b      	lsls	r3, r3, #4
 80066ec:	3332      	adds	r3, #50	; 0x32
 80066ee:	4a34      	ldr	r2, [pc, #208]	; (80067c0 <UART_SetConfig+0x4e4>)
 80066f0:	fba2 2303 	umull	r2, r3, r2, r3
 80066f4:	095b      	lsrs	r3, r3, #5
 80066f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80066fa:	441c      	add	r4, r3
 80066fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006700:	2200      	movs	r2, #0
 8006702:	673b      	str	r3, [r7, #112]	; 0x70
 8006704:	677a      	str	r2, [r7, #116]	; 0x74
 8006706:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800670a:	4642      	mov	r2, r8
 800670c:	464b      	mov	r3, r9
 800670e:	1891      	adds	r1, r2, r2
 8006710:	60b9      	str	r1, [r7, #8]
 8006712:	415b      	adcs	r3, r3
 8006714:	60fb      	str	r3, [r7, #12]
 8006716:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800671a:	4641      	mov	r1, r8
 800671c:	1851      	adds	r1, r2, r1
 800671e:	6039      	str	r1, [r7, #0]
 8006720:	4649      	mov	r1, r9
 8006722:	414b      	adcs	r3, r1
 8006724:	607b      	str	r3, [r7, #4]
 8006726:	f04f 0200 	mov.w	r2, #0
 800672a:	f04f 0300 	mov.w	r3, #0
 800672e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006732:	4659      	mov	r1, fp
 8006734:	00cb      	lsls	r3, r1, #3
 8006736:	4651      	mov	r1, sl
 8006738:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800673c:	4651      	mov	r1, sl
 800673e:	00ca      	lsls	r2, r1, #3
 8006740:	4610      	mov	r0, r2
 8006742:	4619      	mov	r1, r3
 8006744:	4603      	mov	r3, r0
 8006746:	4642      	mov	r2, r8
 8006748:	189b      	adds	r3, r3, r2
 800674a:	66bb      	str	r3, [r7, #104]	; 0x68
 800674c:	464b      	mov	r3, r9
 800674e:	460a      	mov	r2, r1
 8006750:	eb42 0303 	adc.w	r3, r2, r3
 8006754:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006756:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	2200      	movs	r2, #0
 800675e:	663b      	str	r3, [r7, #96]	; 0x60
 8006760:	667a      	str	r2, [r7, #100]	; 0x64
 8006762:	f04f 0200 	mov.w	r2, #0
 8006766:	f04f 0300 	mov.w	r3, #0
 800676a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800676e:	4649      	mov	r1, r9
 8006770:	008b      	lsls	r3, r1, #2
 8006772:	4641      	mov	r1, r8
 8006774:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006778:	4641      	mov	r1, r8
 800677a:	008a      	lsls	r2, r1, #2
 800677c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006780:	f7fa f954 	bl	8000a2c <__aeabi_uldivmod>
 8006784:	4602      	mov	r2, r0
 8006786:	460b      	mov	r3, r1
 8006788:	4b0d      	ldr	r3, [pc, #52]	; (80067c0 <UART_SetConfig+0x4e4>)
 800678a:	fba3 1302 	umull	r1, r3, r3, r2
 800678e:	095b      	lsrs	r3, r3, #5
 8006790:	2164      	movs	r1, #100	; 0x64
 8006792:	fb01 f303 	mul.w	r3, r1, r3
 8006796:	1ad3      	subs	r3, r2, r3
 8006798:	011b      	lsls	r3, r3, #4
 800679a:	3332      	adds	r3, #50	; 0x32
 800679c:	4a08      	ldr	r2, [pc, #32]	; (80067c0 <UART_SetConfig+0x4e4>)
 800679e:	fba2 2303 	umull	r2, r3, r2, r3
 80067a2:	095b      	lsrs	r3, r3, #5
 80067a4:	f003 020f 	and.w	r2, r3, #15
 80067a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4422      	add	r2, r4
 80067b0:	609a      	str	r2, [r3, #8]
}
 80067b2:	bf00      	nop
 80067b4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80067b8:	46bd      	mov	sp, r7
 80067ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80067be:	bf00      	nop
 80067c0:	51eb851f 	.word	0x51eb851f

080067c4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80067c4:	b084      	sub	sp, #16
 80067c6:	b580      	push	{r7, lr}
 80067c8:	b084      	sub	sp, #16
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	6078      	str	r0, [r7, #4]
 80067ce:	f107 001c 	add.w	r0, r7, #28
 80067d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80067d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d8:	2b01      	cmp	r3, #1
 80067da:	d122      	bne.n	8006822 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067e0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	68db      	ldr	r3, [r3, #12]
 80067ec:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80067f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067f4:	687a      	ldr	r2, [r7, #4]
 80067f6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	68db      	ldr	r3, [r3, #12]
 80067fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006804:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006806:	2b01      	cmp	r3, #1
 8006808:	d105      	bne.n	8006816 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	68db      	ldr	r3, [r3, #12]
 800680e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f000 faa2 	bl	8006d60 <USB_CoreReset>
 800681c:	4603      	mov	r3, r0
 800681e:	73fb      	strb	r3, [r7, #15]
 8006820:	e01a      	b.n	8006858 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	68db      	ldr	r3, [r3, #12]
 8006826:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f000 fa96 	bl	8006d60 <USB_CoreReset>
 8006834:	4603      	mov	r3, r0
 8006836:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006838:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800683a:	2b00      	cmp	r3, #0
 800683c:	d106      	bne.n	800684c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006842:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	639a      	str	r2, [r3, #56]	; 0x38
 800684a:	e005      	b.n	8006858 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006850:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800685a:	2b01      	cmp	r3, #1
 800685c:	d10b      	bne.n	8006876 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	689b      	ldr	r3, [r3, #8]
 8006862:	f043 0206 	orr.w	r2, r3, #6
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	f043 0220 	orr.w	r2, r3, #32
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006876:	7bfb      	ldrb	r3, [r7, #15]
}
 8006878:	4618      	mov	r0, r3
 800687a:	3710      	adds	r7, #16
 800687c:	46bd      	mov	sp, r7
 800687e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006882:	b004      	add	sp, #16
 8006884:	4770      	bx	lr

08006886 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006886:	b480      	push	{r7}
 8006888:	b083      	sub	sp, #12
 800688a:	af00      	add	r7, sp, #0
 800688c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	689b      	ldr	r3, [r3, #8]
 8006892:	f023 0201 	bic.w	r2, r3, #1
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800689a:	2300      	movs	r3, #0
}
 800689c:	4618      	mov	r0, r3
 800689e:	370c      	adds	r7, #12
 80068a0:	46bd      	mov	sp, r7
 80068a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a6:	4770      	bx	lr

080068a8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b084      	sub	sp, #16
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
 80068b0:	460b      	mov	r3, r1
 80068b2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80068b4:	2300      	movs	r3, #0
 80068b6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	68db      	ldr	r3, [r3, #12]
 80068bc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80068c4:	78fb      	ldrb	r3, [r7, #3]
 80068c6:	2b01      	cmp	r3, #1
 80068c8:	d115      	bne.n	80068f6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	68db      	ldr	r3, [r3, #12]
 80068ce:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80068d6:	2001      	movs	r0, #1
 80068d8:	f7fb fcf6 	bl	80022c8 <HAL_Delay>
      ms++;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	3301      	adds	r3, #1
 80068e0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f000 fa2e 	bl	8006d44 <USB_GetMode>
 80068e8:	4603      	mov	r3, r0
 80068ea:	2b01      	cmp	r3, #1
 80068ec:	d01e      	beq.n	800692c <USB_SetCurrentMode+0x84>
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	2b31      	cmp	r3, #49	; 0x31
 80068f2:	d9f0      	bls.n	80068d6 <USB_SetCurrentMode+0x2e>
 80068f4:	e01a      	b.n	800692c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80068f6:	78fb      	ldrb	r3, [r7, #3]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d115      	bne.n	8006928 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	68db      	ldr	r3, [r3, #12]
 8006900:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006908:	2001      	movs	r0, #1
 800690a:	f7fb fcdd 	bl	80022c8 <HAL_Delay>
      ms++;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	3301      	adds	r3, #1
 8006912:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f000 fa15 	bl	8006d44 <USB_GetMode>
 800691a:	4603      	mov	r3, r0
 800691c:	2b00      	cmp	r3, #0
 800691e:	d005      	beq.n	800692c <USB_SetCurrentMode+0x84>
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	2b31      	cmp	r3, #49	; 0x31
 8006924:	d9f0      	bls.n	8006908 <USB_SetCurrentMode+0x60>
 8006926:	e001      	b.n	800692c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006928:	2301      	movs	r3, #1
 800692a:	e005      	b.n	8006938 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	2b32      	cmp	r3, #50	; 0x32
 8006930:	d101      	bne.n	8006936 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006932:	2301      	movs	r3, #1
 8006934:	e000      	b.n	8006938 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006936:	2300      	movs	r3, #0
}
 8006938:	4618      	mov	r0, r3
 800693a:	3710      	adds	r7, #16
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}

08006940 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006940:	b084      	sub	sp, #16
 8006942:	b580      	push	{r7, lr}
 8006944:	b086      	sub	sp, #24
 8006946:	af00      	add	r7, sp, #0
 8006948:	6078      	str	r0, [r7, #4]
 800694a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800694e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006952:	2300      	movs	r3, #0
 8006954:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800695a:	2300      	movs	r3, #0
 800695c:	613b      	str	r3, [r7, #16]
 800695e:	e009      	b.n	8006974 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006960:	687a      	ldr	r2, [r7, #4]
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	3340      	adds	r3, #64	; 0x40
 8006966:	009b      	lsls	r3, r3, #2
 8006968:	4413      	add	r3, r2
 800696a:	2200      	movs	r2, #0
 800696c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	3301      	adds	r3, #1
 8006972:	613b      	str	r3, [r7, #16]
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	2b0e      	cmp	r3, #14
 8006978:	d9f2      	bls.n	8006960 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800697a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800697c:	2b00      	cmp	r3, #0
 800697e:	d11c      	bne.n	80069ba <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	68fa      	ldr	r2, [r7, #12]
 800698a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800698e:	f043 0302 	orr.w	r3, r3, #2
 8006992:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006998:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069a4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069b0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	639a      	str	r2, [r3, #56]	; 0x38
 80069b8:	e00b      	b.n	80069d2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069be:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ca:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80069d8:	461a      	mov	r2, r3
 80069da:	2300      	movs	r3, #0
 80069dc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069e4:	4619      	mov	r1, r3
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069ec:	461a      	mov	r2, r3
 80069ee:	680b      	ldr	r3, [r1, #0]
 80069f0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80069f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069f4:	2b01      	cmp	r3, #1
 80069f6:	d10c      	bne.n	8006a12 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80069f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d104      	bne.n	8006a08 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80069fe:	2100      	movs	r1, #0
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f000 f965 	bl	8006cd0 <USB_SetDevSpeed>
 8006a06:	e008      	b.n	8006a1a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006a08:	2101      	movs	r1, #1
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f000 f960 	bl	8006cd0 <USB_SetDevSpeed>
 8006a10:	e003      	b.n	8006a1a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006a12:	2103      	movs	r1, #3
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f000 f95b 	bl	8006cd0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006a1a:	2110      	movs	r1, #16
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f000 f8f3 	bl	8006c08 <USB_FlushTxFifo>
 8006a22:	4603      	mov	r3, r0
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d001      	beq.n	8006a2c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006a28:	2301      	movs	r3, #1
 8006a2a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f000 f91f 	bl	8006c70 <USB_FlushRxFifo>
 8006a32:	4603      	mov	r3, r0
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d001      	beq.n	8006a3c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006a38:	2301      	movs	r3, #1
 8006a3a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a42:	461a      	mov	r2, r3
 8006a44:	2300      	movs	r3, #0
 8006a46:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a4e:	461a      	mov	r2, r3
 8006a50:	2300      	movs	r3, #0
 8006a52:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a5a:	461a      	mov	r2, r3
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a60:	2300      	movs	r3, #0
 8006a62:	613b      	str	r3, [r7, #16]
 8006a64:	e043      	b.n	8006aee <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	015a      	lsls	r2, r3, #5
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	4413      	add	r3, r2
 8006a6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a7c:	d118      	bne.n	8006ab0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d10a      	bne.n	8006a9a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	015a      	lsls	r2, r3, #5
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	4413      	add	r3, r2
 8006a8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a90:	461a      	mov	r2, r3
 8006a92:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006a96:	6013      	str	r3, [r2, #0]
 8006a98:	e013      	b.n	8006ac2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	015a      	lsls	r2, r3, #5
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	4413      	add	r3, r2
 8006aa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006aa6:	461a      	mov	r2, r3
 8006aa8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006aac:	6013      	str	r3, [r2, #0]
 8006aae:	e008      	b.n	8006ac2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	015a      	lsls	r2, r3, #5
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	4413      	add	r3, r2
 8006ab8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006abc:	461a      	mov	r2, r3
 8006abe:	2300      	movs	r3, #0
 8006ac0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	015a      	lsls	r2, r3, #5
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	4413      	add	r3, r2
 8006aca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ace:	461a      	mov	r2, r3
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	015a      	lsls	r2, r3, #5
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	4413      	add	r3, r2
 8006adc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ae0:	461a      	mov	r2, r3
 8006ae2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006ae6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	3301      	adds	r3, #1
 8006aec:	613b      	str	r3, [r7, #16]
 8006aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af0:	693a      	ldr	r2, [r7, #16]
 8006af2:	429a      	cmp	r2, r3
 8006af4:	d3b7      	bcc.n	8006a66 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006af6:	2300      	movs	r3, #0
 8006af8:	613b      	str	r3, [r7, #16]
 8006afa:	e043      	b.n	8006b84 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	015a      	lsls	r2, r3, #5
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	4413      	add	r3, r2
 8006b04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b12:	d118      	bne.n	8006b46 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d10a      	bne.n	8006b30 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	015a      	lsls	r2, r3, #5
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	4413      	add	r3, r2
 8006b22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b26:	461a      	mov	r2, r3
 8006b28:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006b2c:	6013      	str	r3, [r2, #0]
 8006b2e:	e013      	b.n	8006b58 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	015a      	lsls	r2, r3, #5
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	4413      	add	r3, r2
 8006b38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b3c:	461a      	mov	r2, r3
 8006b3e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006b42:	6013      	str	r3, [r2, #0]
 8006b44:	e008      	b.n	8006b58 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	015a      	lsls	r2, r3, #5
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	4413      	add	r3, r2
 8006b4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b52:	461a      	mov	r2, r3
 8006b54:	2300      	movs	r3, #0
 8006b56:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	015a      	lsls	r2, r3, #5
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	4413      	add	r3, r2
 8006b60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b64:	461a      	mov	r2, r3
 8006b66:	2300      	movs	r3, #0
 8006b68:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	015a      	lsls	r2, r3, #5
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	4413      	add	r3, r2
 8006b72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b76:	461a      	mov	r2, r3
 8006b78:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006b7c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	3301      	adds	r3, #1
 8006b82:	613b      	str	r3, [r7, #16]
 8006b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b86:	693a      	ldr	r2, [r7, #16]
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	d3b7      	bcc.n	8006afc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b92:	691b      	ldr	r3, [r3, #16]
 8006b94:	68fa      	ldr	r2, [r7, #12]
 8006b96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b9a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b9e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006bac:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d105      	bne.n	8006bc0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	699b      	ldr	r3, [r3, #24]
 8006bb8:	f043 0210 	orr.w	r2, r3, #16
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	699a      	ldr	r2, [r3, #24]
 8006bc4:	4b0f      	ldr	r3, [pc, #60]	; (8006c04 <USB_DevInit+0x2c4>)
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	687a      	ldr	r2, [r7, #4]
 8006bca:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006bcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d005      	beq.n	8006bde <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	699b      	ldr	r3, [r3, #24]
 8006bd6:	f043 0208 	orr.w	r2, r3, #8
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006bde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d107      	bne.n	8006bf4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	699b      	ldr	r3, [r3, #24]
 8006be8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006bec:	f043 0304 	orr.w	r3, r3, #4
 8006bf0:	687a      	ldr	r2, [r7, #4]
 8006bf2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006bf4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3718      	adds	r7, #24
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006c00:	b004      	add	sp, #16
 8006c02:	4770      	bx	lr
 8006c04:	803c3800 	.word	0x803c3800

08006c08 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b085      	sub	sp, #20
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006c12:	2300      	movs	r3, #0
 8006c14:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	3301      	adds	r3, #1
 8006c1a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	4a13      	ldr	r2, [pc, #76]	; (8006c6c <USB_FlushTxFifo+0x64>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d901      	bls.n	8006c28 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006c24:	2303      	movs	r3, #3
 8006c26:	e01b      	b.n	8006c60 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	691b      	ldr	r3, [r3, #16]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	daf2      	bge.n	8006c16 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006c30:	2300      	movs	r3, #0
 8006c32:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	019b      	lsls	r3, r3, #6
 8006c38:	f043 0220 	orr.w	r2, r3, #32
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	3301      	adds	r3, #1
 8006c44:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	4a08      	ldr	r2, [pc, #32]	; (8006c6c <USB_FlushTxFifo+0x64>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d901      	bls.n	8006c52 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006c4e:	2303      	movs	r3, #3
 8006c50:	e006      	b.n	8006c60 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	691b      	ldr	r3, [r3, #16]
 8006c56:	f003 0320 	and.w	r3, r3, #32
 8006c5a:	2b20      	cmp	r3, #32
 8006c5c:	d0f0      	beq.n	8006c40 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006c5e:	2300      	movs	r3, #0
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	3714      	adds	r7, #20
 8006c64:	46bd      	mov	sp, r7
 8006c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6a:	4770      	bx	lr
 8006c6c:	00030d40 	.word	0x00030d40

08006c70 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b085      	sub	sp, #20
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006c78:	2300      	movs	r3, #0
 8006c7a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	3301      	adds	r3, #1
 8006c80:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	4a11      	ldr	r2, [pc, #68]	; (8006ccc <USB_FlushRxFifo+0x5c>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d901      	bls.n	8006c8e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006c8a:	2303      	movs	r3, #3
 8006c8c:	e018      	b.n	8006cc0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	691b      	ldr	r3, [r3, #16]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	daf2      	bge.n	8006c7c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006c96:	2300      	movs	r3, #0
 8006c98:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2210      	movs	r2, #16
 8006c9e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	3301      	adds	r3, #1
 8006ca4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	4a08      	ldr	r2, [pc, #32]	; (8006ccc <USB_FlushRxFifo+0x5c>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d901      	bls.n	8006cb2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006cae:	2303      	movs	r3, #3
 8006cb0:	e006      	b.n	8006cc0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	691b      	ldr	r3, [r3, #16]
 8006cb6:	f003 0310 	and.w	r3, r3, #16
 8006cba:	2b10      	cmp	r3, #16
 8006cbc:	d0f0      	beq.n	8006ca0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006cbe:	2300      	movs	r3, #0
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	3714      	adds	r7, #20
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cca:	4770      	bx	lr
 8006ccc:	00030d40 	.word	0x00030d40

08006cd0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b085      	sub	sp, #20
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
 8006cd8:	460b      	mov	r3, r1
 8006cda:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ce6:	681a      	ldr	r2, [r3, #0]
 8006ce8:	78fb      	ldrb	r3, [r7, #3]
 8006cea:	68f9      	ldr	r1, [r7, #12]
 8006cec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006cf4:	2300      	movs	r3, #0
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3714      	adds	r7, #20
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d00:	4770      	bx	lr

08006d02 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006d02:	b480      	push	{r7}
 8006d04:	b085      	sub	sp, #20
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	68fa      	ldr	r2, [r7, #12]
 8006d18:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006d1c:	f023 0303 	bic.w	r3, r3, #3
 8006d20:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	68fa      	ldr	r2, [r7, #12]
 8006d2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d30:	f043 0302 	orr.w	r3, r3, #2
 8006d34:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006d36:	2300      	movs	r3, #0
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3714      	adds	r7, #20
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d42:	4770      	bx	lr

08006d44 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b083      	sub	sp, #12
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	695b      	ldr	r3, [r3, #20]
 8006d50:	f003 0301 	and.w	r3, r3, #1
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	370c      	adds	r7, #12
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5e:	4770      	bx	lr

08006d60 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b085      	sub	sp, #20
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	3301      	adds	r3, #1
 8006d70:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	4a13      	ldr	r2, [pc, #76]	; (8006dc4 <USB_CoreReset+0x64>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d901      	bls.n	8006d7e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006d7a:	2303      	movs	r3, #3
 8006d7c:	e01b      	b.n	8006db6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	691b      	ldr	r3, [r3, #16]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	daf2      	bge.n	8006d6c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006d86:	2300      	movs	r3, #0
 8006d88:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	691b      	ldr	r3, [r3, #16]
 8006d8e:	f043 0201 	orr.w	r2, r3, #1
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	3301      	adds	r3, #1
 8006d9a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	4a09      	ldr	r2, [pc, #36]	; (8006dc4 <USB_CoreReset+0x64>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d901      	bls.n	8006da8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006da4:	2303      	movs	r3, #3
 8006da6:	e006      	b.n	8006db6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	691b      	ldr	r3, [r3, #16]
 8006dac:	f003 0301 	and.w	r3, r3, #1
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d0f0      	beq.n	8006d96 <USB_CoreReset+0x36>

  return HAL_OK;
 8006db4:	2300      	movs	r3, #0
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3714      	adds	r7, #20
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc0:	4770      	bx	lr
 8006dc2:	bf00      	nop
 8006dc4:	00030d40 	.word	0x00030d40

08006dc8 <__libc_init_array>:
 8006dc8:	b570      	push	{r4, r5, r6, lr}
 8006dca:	4d0d      	ldr	r5, [pc, #52]	; (8006e00 <__libc_init_array+0x38>)
 8006dcc:	4c0d      	ldr	r4, [pc, #52]	; (8006e04 <__libc_init_array+0x3c>)
 8006dce:	1b64      	subs	r4, r4, r5
 8006dd0:	10a4      	asrs	r4, r4, #2
 8006dd2:	2600      	movs	r6, #0
 8006dd4:	42a6      	cmp	r6, r4
 8006dd6:	d109      	bne.n	8006dec <__libc_init_array+0x24>
 8006dd8:	4d0b      	ldr	r5, [pc, #44]	; (8006e08 <__libc_init_array+0x40>)
 8006dda:	4c0c      	ldr	r4, [pc, #48]	; (8006e0c <__libc_init_array+0x44>)
 8006ddc:	f000 f820 	bl	8006e20 <_init>
 8006de0:	1b64      	subs	r4, r4, r5
 8006de2:	10a4      	asrs	r4, r4, #2
 8006de4:	2600      	movs	r6, #0
 8006de6:	42a6      	cmp	r6, r4
 8006de8:	d105      	bne.n	8006df6 <__libc_init_array+0x2e>
 8006dea:	bd70      	pop	{r4, r5, r6, pc}
 8006dec:	f855 3b04 	ldr.w	r3, [r5], #4
 8006df0:	4798      	blx	r3
 8006df2:	3601      	adds	r6, #1
 8006df4:	e7ee      	b.n	8006dd4 <__libc_init_array+0xc>
 8006df6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006dfa:	4798      	blx	r3
 8006dfc:	3601      	adds	r6, #1
 8006dfe:	e7f2      	b.n	8006de6 <__libc_init_array+0x1e>
 8006e00:	08006e60 	.word	0x08006e60
 8006e04:	08006e60 	.word	0x08006e60
 8006e08:	08006e60 	.word	0x08006e60
 8006e0c:	08006e64 	.word	0x08006e64

08006e10 <memset>:
 8006e10:	4402      	add	r2, r0
 8006e12:	4603      	mov	r3, r0
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d100      	bne.n	8006e1a <memset+0xa>
 8006e18:	4770      	bx	lr
 8006e1a:	f803 1b01 	strb.w	r1, [r3], #1
 8006e1e:	e7f9      	b.n	8006e14 <memset+0x4>

08006e20 <_init>:
 8006e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e22:	bf00      	nop
 8006e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e26:	bc08      	pop	{r3}
 8006e28:	469e      	mov	lr, r3
 8006e2a:	4770      	bx	lr

08006e2c <_fini>:
 8006e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e2e:	bf00      	nop
 8006e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e32:	bc08      	pop	{r3}
 8006e34:	469e      	mov	lr, r3
 8006e36:	4770      	bx	lr
