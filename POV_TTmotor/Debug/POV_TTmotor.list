
POV_TTmotor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007284  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08007434  08007434  00017434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074f4  080074f4  00021204  2**0
                  CONTENTS
  4 .ARM          00000008  080074f4  080074f4  000174f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080074fc  080074fc  00021204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074fc  080074fc  000174fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007500  08007500  00017500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001204  20000000  08007504  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00021204  2**0
                  CONTENTS
 10 .bss          000018b8  20001204  20001204  00021204  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20002abc  20002abc  00021204  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00021204  2**0
                  CONTENTS, READONLY
 13 .debug_info   000157fc  00000000  00000000  00021234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026e4  00000000  00000000  00036a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001218  00000000  00000000  00039118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001130  00000000  00000000  0003a330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026232  00000000  00000000  0003b460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000136f2  00000000  00000000  00061692  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e5c22  00000000  00000000  00074d84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015a9a6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000055d8  00000000  00000000  0015a9f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20001204 	.word	0x20001204
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800741c 	.word	0x0800741c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20001208 	.word	0x20001208
 80001ec:	0800741c 	.word	0x0800741c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int fd, char* ptr, int len) {
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
 800059a:	60f8      	str	r0, [r7, #12]
 800059c:	60b9      	str	r1, [r7, #8]
 800059e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	b29a      	uxth	r2, r3
 80005a4:	f04f 33ff 	mov.w	r3, #4294967295
 80005a8:	68b9      	ldr	r1, [r7, #8]
 80005aa:	4804      	ldr	r0, [pc, #16]	; (80005bc <_write+0x28>)
 80005ac:	f005 f85d 	bl	800566a <HAL_UART_Transmit>
	return len;
 80005b0:	687b      	ldr	r3, [r7, #4]
}
 80005b2:	4618      	mov	r0, r3
 80005b4:	3710      	adds	r7, #16
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	200015f8 	.word	0x200015f8

080005c0 <_read>:
int _read(int fd, char* ptr, int len) {
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	60f8      	str	r0, [r7, #12]
 80005c8:	60b9      	str	r1, [r7, #8]
 80005ca:	607a      	str	r2, [r7, #4]
	HAL_UART_Receive(&huart3, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 80005cc:	f04f 33ff 	mov.w	r3, #4294967295
 80005d0:	2201      	movs	r2, #1
 80005d2:	68b9      	ldr	r1, [r7, #8]
 80005d4:	4803      	ldr	r0, [pc, #12]	; (80005e4 <_read+0x24>)
 80005d6:	f005 f8da 	bl	800578e <HAL_UART_Receive>
//	HAL_UART_Transmit(&huart3, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
	return 1;
 80005da:	2301      	movs	r3, #1
}
 80005dc:	4618      	mov	r0, r3
 80005de:	3710      	adds	r7, #16
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	200015f8 	.word	0x200015f8

080005e8 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	7f1b      	ldrb	r3, [r3, #28]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d121      	bne.n	800063c <HAL_TIM_IC_CaptureCallback+0x54>
		if(htim->Instance == htim3.Instance){
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	681a      	ldr	r2, [r3, #0]
 80005fc:	4b11      	ldr	r3, [pc, #68]	; (8000644 <HAL_TIM_IC_CaptureCallback+0x5c>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	429a      	cmp	r2, r3
 8000602:	d11b      	bne.n	800063c <HAL_TIM_IC_CaptureCallback+0x54>
//			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
			ICValue = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000604:	2100      	movs	r1, #0
 8000606:	6878      	ldr	r0, [r7, #4]
 8000608:	f004 f8e2 	bl	80047d0 <HAL_TIM_ReadCapturedValue>
 800060c:	4603      	mov	r3, r0
 800060e:	461a      	mov	r2, r3
 8000610:	4b0d      	ldr	r3, [pc, #52]	; (8000648 <HAL_TIM_IC_CaptureCallback+0x60>)
 8000612:	601a      	str	r2, [r3, #0]
			if(ICValue){
 8000614:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <HAL_TIM_IC_CaptureCallback+0x60>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	2b00      	cmp	r3, #0
 800061a:	d00f      	beq.n	800063c <HAL_TIM_IC_CaptureCallback+0x54>
				loopTime = (ICValue / 100) / (LED_WIDTH/LED_STRIPS);
 800061c:	4b0a      	ldr	r3, [pc, #40]	; (8000648 <HAL_TIM_IC_CaptureCallback+0x60>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a0a      	ldr	r2, [pc, #40]	; (800064c <HAL_TIM_IC_CaptureCallback+0x64>)
 8000622:	fb82 1203 	smull	r1, r2, r2, r3
 8000626:	11d2      	asrs	r2, r2, #7
 8000628:	17db      	asrs	r3, r3, #31
 800062a:	1ad3      	subs	r3, r2, r3
 800062c:	4a08      	ldr	r2, [pc, #32]	; (8000650 <HAL_TIM_IC_CaptureCallback+0x68>)
 800062e:	6013      	str	r3, [r2, #0]
				printf("%d\r\n", loopTime);
 8000630:	4b07      	ldr	r3, [pc, #28]	; (8000650 <HAL_TIM_IC_CaptureCallback+0x68>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4619      	mov	r1, r3
 8000636:	4807      	ldr	r0, [pc, #28]	; (8000654 <HAL_TIM_IC_CaptureCallback+0x6c>)
 8000638:	f005 ff62 	bl	8006500 <iprintf>
//				++loopCount;
//				loopCount %= LED_STRIPS;
			}
		}
	}
}
 800063c:	bf00      	nop
 800063e:	3708      	adds	r7, #8
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	20001490 	.word	0x20001490
 8000648:	20001b48 	.word	0x20001b48
 800064c:	10624dd3 	.word	0x10624dd3
 8000650:	20001b4c 	.word	0x20001b4c
 8000654:	08007434 	.word	0x08007434

08000658 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	4603      	mov	r3, r0
 8000660:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13){
 8000662:	88fb      	ldrh	r3, [r7, #6]
 8000664:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000668:	d114      	bne.n	8000694 <HAL_GPIO_EXTI_Callback+0x3c>
		cursorInit += (LED_WIDTH / LED_STRIPS) / 2;
 800066a:	4b0d      	ldr	r3, [pc, #52]	; (80006a0 <HAL_GPIO_EXTI_Callback+0x48>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	330a      	adds	r3, #10
 8000670:	4a0b      	ldr	r2, [pc, #44]	; (80006a0 <HAL_GPIO_EXTI_Callback+0x48>)
 8000672:	6013      	str	r3, [r2, #0]
		cursorInit %= LED_WIDTH;
 8000674:	4b0a      	ldr	r3, [pc, #40]	; (80006a0 <HAL_GPIO_EXTI_Callback+0x48>)
 8000676:	681a      	ldr	r2, [r3, #0]
 8000678:	4b0a      	ldr	r3, [pc, #40]	; (80006a4 <HAL_GPIO_EXTI_Callback+0x4c>)
 800067a:	fb83 1302 	smull	r1, r3, r3, r2
 800067e:	4413      	add	r3, r2
 8000680:	1159      	asrs	r1, r3, #5
 8000682:	17d3      	asrs	r3, r2, #31
 8000684:	1ac9      	subs	r1, r1, r3
 8000686:	460b      	mov	r3, r1
 8000688:	011b      	lsls	r3, r3, #4
 800068a:	1a5b      	subs	r3, r3, r1
 800068c:	009b      	lsls	r3, r3, #2
 800068e:	1ad1      	subs	r1, r2, r3
 8000690:	4b03      	ldr	r3, [pc, #12]	; (80006a0 <HAL_GPIO_EXTI_Callback+0x48>)
 8000692:	6019      	str	r1, [r3, #0]
	}
}
 8000694:	bf00      	nop
 8000696:	370c      	adds	r7, #12
 8000698:	46bd      	mov	sp, r7
 800069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069e:	4770      	bx	lr
 80006a0:	20002a98 	.word	0x20002a98
 80006a4:	88888889 	.word	0x88888889

080006a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b086      	sub	sp, #24
 80006ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	for(int i = 0; i < 24 * LED_NUM + 50; ++i){
 80006ae:	2300      	movs	r3, #0
 80006b0:	617b      	str	r3, [r7, #20]
 80006b2:	e016      	b.n	80006e2 <main+0x3a>
		for(int j = 0; j < LED_STRIPS; ++j)
 80006b4:	2300      	movs	r3, #0
 80006b6:	613b      	str	r3, [r7, #16]
 80006b8:	e00d      	b.n	80006d6 <main+0x2e>
		PWMData[j][i] = 0;
 80006ba:	499a      	ldr	r1, [pc, #616]	; (8000924 <main+0x27c>)
 80006bc:	693b      	ldr	r3, [r7, #16]
 80006be:	f240 228a 	movw	r2, #650	; 0x28a
 80006c2:	fb03 f202 	mul.w	r2, r3, r2
 80006c6:	697b      	ldr	r3, [r7, #20]
 80006c8:	4413      	add	r3, r2
 80006ca:	2200      	movs	r2, #0
 80006cc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(int j = 0; j < LED_STRIPS; ++j)
 80006d0:	693b      	ldr	r3, [r7, #16]
 80006d2:	3301      	adds	r3, #1
 80006d4:	613b      	str	r3, [r7, #16]
 80006d6:	693b      	ldr	r3, [r7, #16]
 80006d8:	2b02      	cmp	r3, #2
 80006da:	ddee      	ble.n	80006ba <main+0x12>
	for(int i = 0; i < 24 * LED_NUM + 50; ++i){
 80006dc:	697b      	ldr	r3, [r7, #20]
 80006de:	3301      	adds	r3, #1
 80006e0:	617b      	str	r3, [r7, #20]
 80006e2:	697b      	ldr	r3, [r7, #20]
 80006e4:	f240 2289 	movw	r2, #649	; 0x289
 80006e8:	4293      	cmp	r3, r2
 80006ea:	dde3      	ble.n	80006b4 <main+0xc>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ec:	f001 f872 	bl	80017d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f0:	f000 f930 	bl	8000954 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006f4:	f000 fbc4 	bl	8000e80 <MX_GPIO_Init>
  MX_ETH_Init();
 80006f8:	f000 f996 	bl	8000a28 <MX_ETH_Init>
  MX_USB_OTG_FS_PCD_Init();
 80006fc:	f000 fb62 	bl	8000dc4 <MX_USB_OTG_FS_PCD_Init>
  MX_DMA_Init();
 8000700:	f000 fb8e 	bl	8000e20 <MX_DMA_Init>
  MX_TIM1_Init();
 8000704:	f000 f9de 	bl	8000ac4 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8000708:	f000 fb32 	bl	8000d70 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 800070c:	f000 fa92 	bl	8000c34 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000710:	2100      	movs	r1, #0
 8000712:	4885      	ldr	r0, [pc, #532]	; (8000928 <main+0x280>)
 8000714:	f003 fbc4 	bl	8003ea0 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start(&htim3, TIM_CHANNEL_2);
 8000718:	2104      	movs	r1, #4
 800071a:	4883      	ldr	r0, [pc, #524]	; (8000928 <main+0x280>)
 800071c:	f003 fae4 	bl	8003ce8 <HAL_TIM_IC_Start>

//  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
//  DWT->CYCCNT = 0;
//  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8000720:	2201      	movs	r2, #1
 8000722:	2108      	movs	r1, #8
 8000724:	4881      	ldr	r0, [pc, #516]	; (800092c <main+0x284>)
 8000726:	f002 fa2d 	bl	8002b84 <HAL_GPIO_WritePin>
  HAL_Delay(3000);
 800072a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800072e:	f001 f8c3 	bl	80018b8 <HAL_Delay>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  DWT->CYCCNT = 0;
	  ledOldTime = HAL_GetTick();
 8000732:	f001 f8b5 	bl	80018a0 <HAL_GetTick>
 8000736:	4603      	mov	r3, r0
 8000738:	461a      	mov	r2, r3
 800073a:	4b7d      	ldr	r3, [pc, #500]	; (8000930 <main+0x288>)
 800073c:	601a      	str	r2, [r3, #0]

	  for(int m = 0; m < LED_STRIPS; ++m){
 800073e:	2300      	movs	r3, #0
 8000740:	60fb      	str	r3, [r7, #12]
 8000742:	e0b4      	b.n	80008ae <main+0x206>
		  int indx = 0;
 8000744:	2300      	movs	r3, #0
 8000746:	60bb      	str	r3, [r7, #8]
		  for(int i = 0; i < LED_NUM; ++i){
 8000748:	2300      	movs	r3, #0
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	e0a8      	b.n	80008a0 <main+0x1f8>
			  color = LEDData[(cursor + m*LED_WIDTH/LED_STRIPS)%LED_WIDTH][i][0] << 16;
 800074e:	68fa      	ldr	r2, [r7, #12]
 8000750:	4613      	mov	r3, r2
 8000752:	009b      	lsls	r3, r3, #2
 8000754:	4413      	add	r3, r2
 8000756:	009b      	lsls	r3, r3, #2
 8000758:	461a      	mov	r2, r3
 800075a:	4b76      	ldr	r3, [pc, #472]	; (8000934 <main+0x28c>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	441a      	add	r2, r3
 8000760:	4b75      	ldr	r3, [pc, #468]	; (8000938 <main+0x290>)
 8000762:	fb83 1302 	smull	r1, r3, r3, r2
 8000766:	4413      	add	r3, r2
 8000768:	1159      	asrs	r1, r3, #5
 800076a:	17d3      	asrs	r3, r2, #31
 800076c:	1ac9      	subs	r1, r1, r3
 800076e:	460b      	mov	r3, r1
 8000770:	011b      	lsls	r3, r3, #4
 8000772:	1a5b      	subs	r3, r3, r1
 8000774:	009b      	lsls	r3, r3, #2
 8000776:	1ad1      	subs	r1, r2, r3
 8000778:	4870      	ldr	r0, [pc, #448]	; (800093c <main+0x294>)
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	461a      	mov	r2, r3
 800077e:	0052      	lsls	r2, r2, #1
 8000780:	441a      	add	r2, r3
 8000782:	460b      	mov	r3, r1
 8000784:	009b      	lsls	r3, r3, #2
 8000786:	440b      	add	r3, r1
 8000788:	0119      	lsls	r1, r3, #4
 800078a:	1ac9      	subs	r1, r1, r3
 800078c:	1853      	adds	r3, r2, r1
 800078e:	4403      	add	r3, r0
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	041b      	lsls	r3, r3, #16
 8000794:	461a      	mov	r2, r3
 8000796:	4b6a      	ldr	r3, [pc, #424]	; (8000940 <main+0x298>)
 8000798:	601a      	str	r2, [r3, #0]
			  color |= LEDData[(cursor + m*LED_WIDTH/LED_STRIPS)%LED_WIDTH][i][1] << 8;
 800079a:	68fa      	ldr	r2, [r7, #12]
 800079c:	4613      	mov	r3, r2
 800079e:	009b      	lsls	r3, r3, #2
 80007a0:	4413      	add	r3, r2
 80007a2:	009b      	lsls	r3, r3, #2
 80007a4:	461a      	mov	r2, r3
 80007a6:	4b63      	ldr	r3, [pc, #396]	; (8000934 <main+0x28c>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	441a      	add	r2, r3
 80007ac:	4b62      	ldr	r3, [pc, #392]	; (8000938 <main+0x290>)
 80007ae:	fb83 1302 	smull	r1, r3, r3, r2
 80007b2:	4413      	add	r3, r2
 80007b4:	1159      	asrs	r1, r3, #5
 80007b6:	17d3      	asrs	r3, r2, #31
 80007b8:	1ac9      	subs	r1, r1, r3
 80007ba:	460b      	mov	r3, r1
 80007bc:	011b      	lsls	r3, r3, #4
 80007be:	1a5b      	subs	r3, r3, r1
 80007c0:	009b      	lsls	r3, r3, #2
 80007c2:	1ad1      	subs	r1, r2, r3
 80007c4:	485d      	ldr	r0, [pc, #372]	; (800093c <main+0x294>)
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	461a      	mov	r2, r3
 80007ca:	0052      	lsls	r2, r2, #1
 80007cc:	441a      	add	r2, r3
 80007ce:	460b      	mov	r3, r1
 80007d0:	009b      	lsls	r3, r3, #2
 80007d2:	440b      	add	r3, r1
 80007d4:	0119      	lsls	r1, r3, #4
 80007d6:	1ac9      	subs	r1, r1, r3
 80007d8:	1853      	adds	r3, r2, r1
 80007da:	4403      	add	r3, r0
 80007dc:	3301      	adds	r3, #1
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	021b      	lsls	r3, r3, #8
 80007e2:	461a      	mov	r2, r3
 80007e4:	4b56      	ldr	r3, [pc, #344]	; (8000940 <main+0x298>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4313      	orrs	r3, r2
 80007ea:	4a55      	ldr	r2, [pc, #340]	; (8000940 <main+0x298>)
 80007ec:	6013      	str	r3, [r2, #0]
			  color |= LEDData[(cursor + m*LED_WIDTH/LED_STRIPS)%LED_WIDTH][i][2];
 80007ee:	68fa      	ldr	r2, [r7, #12]
 80007f0:	4613      	mov	r3, r2
 80007f2:	009b      	lsls	r3, r3, #2
 80007f4:	4413      	add	r3, r2
 80007f6:	009b      	lsls	r3, r3, #2
 80007f8:	461a      	mov	r2, r3
 80007fa:	4b4e      	ldr	r3, [pc, #312]	; (8000934 <main+0x28c>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	441a      	add	r2, r3
 8000800:	4b4d      	ldr	r3, [pc, #308]	; (8000938 <main+0x290>)
 8000802:	fb83 1302 	smull	r1, r3, r3, r2
 8000806:	4413      	add	r3, r2
 8000808:	1159      	asrs	r1, r3, #5
 800080a:	17d3      	asrs	r3, r2, #31
 800080c:	1ac9      	subs	r1, r1, r3
 800080e:	460b      	mov	r3, r1
 8000810:	011b      	lsls	r3, r3, #4
 8000812:	1a5b      	subs	r3, r3, r1
 8000814:	009b      	lsls	r3, r3, #2
 8000816:	1ad1      	subs	r1, r2, r3
 8000818:	4848      	ldr	r0, [pc, #288]	; (800093c <main+0x294>)
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	461a      	mov	r2, r3
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	441a      	add	r2, r3
 8000822:	460b      	mov	r3, r1
 8000824:	009b      	lsls	r3, r3, #2
 8000826:	440b      	add	r3, r1
 8000828:	0119      	lsls	r1, r3, #4
 800082a:	1ac9      	subs	r1, r1, r3
 800082c:	1853      	adds	r3, r2, r1
 800082e:	4403      	add	r3, r0
 8000830:	3302      	adds	r3, #2
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	461a      	mov	r2, r3
 8000836:	4b42      	ldr	r3, [pc, #264]	; (8000940 <main+0x298>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	4313      	orrs	r3, r2
 800083c:	4a40      	ldr	r2, [pc, #256]	; (8000940 <main+0x298>)
 800083e:	6013      	str	r3, [r2, #0]
			  for(int j = 23; j >= 0; --j){
 8000840:	2317      	movs	r3, #23
 8000842:	603b      	str	r3, [r7, #0]
 8000844:	e026      	b.n	8000894 <main+0x1ec>
				  if (color & (1 << j))
 8000846:	2201      	movs	r2, #1
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	fa02 f303 	lsl.w	r3, r2, r3
 800084e:	461a      	mov	r2, r3
 8000850:	4b3b      	ldr	r3, [pc, #236]	; (8000940 <main+0x298>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4013      	ands	r3, r2
 8000856:	2b00      	cmp	r3, #0
 8000858:	d00b      	beq.n	8000872 <main+0x1ca>
					  PWMData[m][indx] = LED_HIGH;
 800085a:	4932      	ldr	r1, [pc, #200]	; (8000924 <main+0x27c>)
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	f240 228a 	movw	r2, #650	; 0x28a
 8000862:	fb03 f202 	mul.w	r2, r3, r2
 8000866:	68bb      	ldr	r3, [r7, #8]
 8000868:	4413      	add	r3, r2
 800086a:	2297      	movs	r2, #151	; 0x97
 800086c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 8000870:	e00a      	b.n	8000888 <main+0x1e0>
				  else
					  PWMData[m][indx] = LED_LOW;
 8000872:	492c      	ldr	r1, [pc, #176]	; (8000924 <main+0x27c>)
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	f240 228a 	movw	r2, #650	; 0x28a
 800087a:	fb03 f202 	mul.w	r2, r3, r2
 800087e:	68bb      	ldr	r3, [r7, #8]
 8000880:	4413      	add	r3, r2
 8000882:	223b      	movs	r2, #59	; 0x3b
 8000884:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				  ++indx;
 8000888:	68bb      	ldr	r3, [r7, #8]
 800088a:	3301      	adds	r3, #1
 800088c:	60bb      	str	r3, [r7, #8]
			  for(int j = 23; j >= 0; --j){
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	3b01      	subs	r3, #1
 8000892:	603b      	str	r3, [r7, #0]
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	2b00      	cmp	r3, #0
 8000898:	dad5      	bge.n	8000846 <main+0x19e>
		  for(int i = 0; i < LED_NUM; ++i){
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	3301      	adds	r3, #1
 800089e:	607b      	str	r3, [r7, #4]
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	2b18      	cmp	r3, #24
 80008a4:	f77f af53 	ble.w	800074e <main+0xa6>
	  for(int m = 0; m < LED_STRIPS; ++m){
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	3301      	adds	r3, #1
 80008ac:	60fb      	str	r3, [r7, #12]
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	2b02      	cmp	r3, #2
 80008b2:	f77f af47 	ble.w	8000744 <main+0x9c>
			  }
		  }
	  }
	  HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)PWMData[0], 24 * LED_NUM + 50);
 80008b6:	f240 238a 	movw	r3, #650	; 0x28a
 80008ba:	4a1a      	ldr	r2, [pc, #104]	; (8000924 <main+0x27c>)
 80008bc:	2100      	movs	r1, #0
 80008be:	4821      	ldr	r0, [pc, #132]	; (8000944 <main+0x29c>)
 80008c0:	f002 fff0 	bl	80038a4 <HAL_TIM_PWM_Start_DMA>
	  HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_2, (uint32_t *)PWMData[1], 24 * LED_NUM + 50);
 80008c4:	f240 238a 	movw	r3, #650	; 0x28a
 80008c8:	4a1f      	ldr	r2, [pc, #124]	; (8000948 <main+0x2a0>)
 80008ca:	2104      	movs	r1, #4
 80008cc:	481d      	ldr	r0, [pc, #116]	; (8000944 <main+0x29c>)
 80008ce:	f002 ffe9 	bl	80038a4 <HAL_TIM_PWM_Start_DMA>
	  HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_3, (uint32_t *)PWMData[2], 24 * LED_NUM + 50);
 80008d2:	f240 238a 	movw	r3, #650	; 0x28a
 80008d6:	4a1d      	ldr	r2, [pc, #116]	; (800094c <main+0x2a4>)
 80008d8:	2108      	movs	r1, #8
 80008da:	481a      	ldr	r0, [pc, #104]	; (8000944 <main+0x29c>)
 80008dc:	f002 ffe2 	bl	80038a4 <HAL_TIM_PWM_Start_DMA>

	  ++cursor;
 80008e0:	4b14      	ldr	r3, [pc, #80]	; (8000934 <main+0x28c>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	3301      	adds	r3, #1
 80008e6:	4a13      	ldr	r2, [pc, #76]	; (8000934 <main+0x28c>)
 80008e8:	6013      	str	r3, [r2, #0]
	  cursor %= LED_WIDTH;
 80008ea:	4b12      	ldr	r3, [pc, #72]	; (8000934 <main+0x28c>)
 80008ec:	681a      	ldr	r2, [r3, #0]
 80008ee:	4b12      	ldr	r3, [pc, #72]	; (8000938 <main+0x290>)
 80008f0:	fb83 1302 	smull	r1, r3, r3, r2
 80008f4:	4413      	add	r3, r2
 80008f6:	1159      	asrs	r1, r3, #5
 80008f8:	17d3      	asrs	r3, r2, #31
 80008fa:	1ac9      	subs	r1, r1, r3
 80008fc:	460b      	mov	r3, r1
 80008fe:	011b      	lsls	r3, r3, #4
 8000900:	1a5b      	subs	r3, r3, r1
 8000902:	009b      	lsls	r3, r3, #2
 8000904:	1ad1      	subs	r1, r2, r3
 8000906:	4b0b      	ldr	r3, [pc, #44]	; (8000934 <main+0x28c>)
 8000908:	6019      	str	r1, [r3, #0]
	  while(HAL_GetTick() < ledOldTime + loopTime);
 800090a:	bf00      	nop
 800090c:	f000 ffc8 	bl	80018a0 <HAL_GetTick>
 8000910:	4601      	mov	r1, r0
 8000912:	4b07      	ldr	r3, [pc, #28]	; (8000930 <main+0x288>)
 8000914:	681a      	ldr	r2, [r3, #0]
 8000916:	4b0e      	ldr	r3, [pc, #56]	; (8000950 <main+0x2a8>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	4413      	add	r3, r2
 800091c:	4299      	cmp	r1, r3
 800091e:	d3f5      	bcc.n	800090c <main+0x264>
	  ledOldTime = HAL_GetTick();
 8000920:	e707      	b.n	8000732 <main+0x8a>
 8000922:	bf00      	nop
 8000924:	20001b54 	.word	0x20001b54
 8000928:	20001490 	.word	0x20001490
 800092c:	40020000 	.word	0x40020000
 8000930:	20001b50 	.word	0x20001b50
 8000934:	20002a94 	.word	0x20002a94
 8000938:	88888889 	.word	0x88888889
 800093c:	20000000 	.word	0x20000000
 8000940:	20002a90 	.word	0x20002a90
 8000944:	20001448 	.word	0x20001448
 8000948:	20002068 	.word	0x20002068
 800094c:	2000257c 	.word	0x2000257c
 8000950:	20001b4c 	.word	0x20001b4c

08000954 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b094      	sub	sp, #80	; 0x50
 8000958:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800095a:	f107 0320 	add.w	r3, r7, #32
 800095e:	2230      	movs	r2, #48	; 0x30
 8000960:	2100      	movs	r1, #0
 8000962:	4618      	mov	r0, r3
 8000964:	f005 fdc4 	bl	80064f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000968:	f107 030c 	add.w	r3, r7, #12
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	605a      	str	r2, [r3, #4]
 8000972:	609a      	str	r2, [r3, #8]
 8000974:	60da      	str	r2, [r3, #12]
 8000976:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000978:	2300      	movs	r3, #0
 800097a:	60bb      	str	r3, [r7, #8]
 800097c:	4b28      	ldr	r3, [pc, #160]	; (8000a20 <SystemClock_Config+0xcc>)
 800097e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000980:	4a27      	ldr	r2, [pc, #156]	; (8000a20 <SystemClock_Config+0xcc>)
 8000982:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000986:	6413      	str	r3, [r2, #64]	; 0x40
 8000988:	4b25      	ldr	r3, [pc, #148]	; (8000a20 <SystemClock_Config+0xcc>)
 800098a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000990:	60bb      	str	r3, [r7, #8]
 8000992:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000994:	2300      	movs	r3, #0
 8000996:	607b      	str	r3, [r7, #4]
 8000998:	4b22      	ldr	r3, [pc, #136]	; (8000a24 <SystemClock_Config+0xd0>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a21      	ldr	r2, [pc, #132]	; (8000a24 <SystemClock_Config+0xd0>)
 800099e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009a2:	6013      	str	r3, [r2, #0]
 80009a4:	4b1f      	ldr	r3, [pc, #124]	; (8000a24 <SystemClock_Config+0xd0>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009ac:	607b      	str	r3, [r7, #4]
 80009ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009b0:	2301      	movs	r3, #1
 80009b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80009b4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80009b8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ba:	2302      	movs	r3, #2
 80009bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009c4:	2304      	movs	r3, #4
 80009c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80009c8:	23a8      	movs	r3, #168	; 0xa8
 80009ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009cc:	2302      	movs	r3, #2
 80009ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80009d0:	2307      	movs	r3, #7
 80009d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009d4:	f107 0320 	add.w	r3, r7, #32
 80009d8:	4618      	mov	r0, r3
 80009da:	f002 fa23 	bl	8002e24 <HAL_RCC_OscConfig>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80009e4:	f000 fb24 	bl	8001030 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009e8:	230f      	movs	r3, #15
 80009ea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009ec:	2302      	movs	r3, #2
 80009ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009f0:	2300      	movs	r3, #0
 80009f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009f4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009fe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a00:	f107 030c 	add.w	r3, r7, #12
 8000a04:	2105      	movs	r1, #5
 8000a06:	4618      	mov	r0, r3
 8000a08:	f002 fc84 	bl	8003314 <HAL_RCC_ClockConfig>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000a12:	f000 fb0d 	bl	8001030 <Error_Handler>
  }
}
 8000a16:	bf00      	nop
 8000a18:	3750      	adds	r7, #80	; 0x50
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40023800 	.word	0x40023800
 8000a24:	40007000 	.word	0x40007000

08000a28 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000a2c:	4b1f      	ldr	r3, [pc, #124]	; (8000aac <MX_ETH_Init+0x84>)
 8000a2e:	4a20      	ldr	r2, [pc, #128]	; (8000ab0 <MX_ETH_Init+0x88>)
 8000a30:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000a32:	4b20      	ldr	r3, [pc, #128]	; (8000ab4 <MX_ETH_Init+0x8c>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000a38:	4b1e      	ldr	r3, [pc, #120]	; (8000ab4 <MX_ETH_Init+0x8c>)
 8000a3a:	2280      	movs	r2, #128	; 0x80
 8000a3c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000a3e:	4b1d      	ldr	r3, [pc, #116]	; (8000ab4 <MX_ETH_Init+0x8c>)
 8000a40:	22e1      	movs	r2, #225	; 0xe1
 8000a42:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000a44:	4b1b      	ldr	r3, [pc, #108]	; (8000ab4 <MX_ETH_Init+0x8c>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000a4a:	4b1a      	ldr	r3, [pc, #104]	; (8000ab4 <MX_ETH_Init+0x8c>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000a50:	4b18      	ldr	r3, [pc, #96]	; (8000ab4 <MX_ETH_Init+0x8c>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000a56:	4b15      	ldr	r3, [pc, #84]	; (8000aac <MX_ETH_Init+0x84>)
 8000a58:	4a16      	ldr	r2, [pc, #88]	; (8000ab4 <MX_ETH_Init+0x8c>)
 8000a5a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000a5c:	4b13      	ldr	r3, [pc, #76]	; (8000aac <MX_ETH_Init+0x84>)
 8000a5e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000a62:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000a64:	4b11      	ldr	r3, [pc, #68]	; (8000aac <MX_ETH_Init+0x84>)
 8000a66:	4a14      	ldr	r2, [pc, #80]	; (8000ab8 <MX_ETH_Init+0x90>)
 8000a68:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000a6a:	4b10      	ldr	r3, [pc, #64]	; (8000aac <MX_ETH_Init+0x84>)
 8000a6c:	4a13      	ldr	r2, [pc, #76]	; (8000abc <MX_ETH_Init+0x94>)
 8000a6e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000a70:	4b0e      	ldr	r3, [pc, #56]	; (8000aac <MX_ETH_Init+0x84>)
 8000a72:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000a76:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000a78:	480c      	ldr	r0, [pc, #48]	; (8000aac <MX_ETH_Init+0x84>)
 8000a7a:	f001 fbc3 	bl	8002204 <HAL_ETH_Init>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000a84:	f000 fad4 	bl	8001030 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000a88:	2238      	movs	r2, #56	; 0x38
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	480c      	ldr	r0, [pc, #48]	; (8000ac0 <MX_ETH_Init+0x98>)
 8000a8e:	f005 fd2f 	bl	80064f0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000a92:	4b0b      	ldr	r3, [pc, #44]	; (8000ac0 <MX_ETH_Init+0x98>)
 8000a94:	2221      	movs	r2, #33	; 0x21
 8000a96:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000a98:	4b09      	ldr	r3, [pc, #36]	; (8000ac0 <MX_ETH_Init+0x98>)
 8000a9a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000a9e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000aa0:	4b07      	ldr	r3, [pc, #28]	; (8000ac0 <MX_ETH_Init+0x98>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	20001398 	.word	0x20001398
 8000ab0:	40028000 	.word	0x40028000
 8000ab4:	20002a9c 	.word	0x20002a9c
 8000ab8:	200012f8 	.word	0x200012f8
 8000abc:	20001258 	.word	0x20001258
 8000ac0:	20001220 	.word	0x20001220

08000ac4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b096      	sub	sp, #88	; 0x58
 8000ac8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000ace:	2200      	movs	r2, #0
 8000ad0:	601a      	str	r2, [r3, #0]
 8000ad2:	605a      	str	r2, [r3, #4]
 8000ad4:	609a      	str	r2, [r3, #8]
 8000ad6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ad8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ae2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	601a      	str	r2, [r3, #0]
 8000aea:	605a      	str	r2, [r3, #4]
 8000aec:	609a      	str	r2, [r3, #8]
 8000aee:	60da      	str	r2, [r3, #12]
 8000af0:	611a      	str	r2, [r3, #16]
 8000af2:	615a      	str	r2, [r3, #20]
 8000af4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000af6:	1d3b      	adds	r3, r7, #4
 8000af8:	2220      	movs	r2, #32
 8000afa:	2100      	movs	r1, #0
 8000afc:	4618      	mov	r0, r3
 8000afe:	f005 fcf7 	bl	80064f0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b02:	4b4a      	ldr	r3, [pc, #296]	; (8000c2c <MX_TIM1_Init+0x168>)
 8000b04:	4a4a      	ldr	r2, [pc, #296]	; (8000c30 <MX_TIM1_Init+0x16c>)
 8000b06:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000b08:	4b48      	ldr	r3, [pc, #288]	; (8000c2c <MX_TIM1_Init+0x168>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b0e:	4b47      	ldr	r3, [pc, #284]	; (8000c2c <MX_TIM1_Init+0x168>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 210-1;
 8000b14:	4b45      	ldr	r3, [pc, #276]	; (8000c2c <MX_TIM1_Init+0x168>)
 8000b16:	22d1      	movs	r2, #209	; 0xd1
 8000b18:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b1a:	4b44      	ldr	r3, [pc, #272]	; (8000c2c <MX_TIM1_Init+0x168>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b20:	4b42      	ldr	r3, [pc, #264]	; (8000c2c <MX_TIM1_Init+0x168>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b26:	4b41      	ldr	r3, [pc, #260]	; (8000c2c <MX_TIM1_Init+0x168>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b2c:	483f      	ldr	r0, [pc, #252]	; (8000c2c <MX_TIM1_Init+0x168>)
 8000b2e:	f002 fe11 	bl	8003754 <HAL_TIM_Base_Init>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000b38:	f000 fa7a 	bl	8001030 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b40:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b42:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000b46:	4619      	mov	r1, r3
 8000b48:	4838      	ldr	r0, [pc, #224]	; (8000c2c <MX_TIM1_Init+0x168>)
 8000b4a:	f003 fd37 	bl	80045bc <HAL_TIM_ConfigClockSource>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000b54:	f000 fa6c 	bl	8001030 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b58:	4834      	ldr	r0, [pc, #208]	; (8000c2c <MX_TIM1_Init+0x168>)
 8000b5a:	f002 fe4a 	bl	80037f2 <HAL_TIM_PWM_Init>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000b64:	f000 fa64 	bl	8001030 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b70:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000b74:	4619      	mov	r1, r3
 8000b76:	482d      	ldr	r0, [pc, #180]	; (8000c2c <MX_TIM1_Init+0x168>)
 8000b78:	f004 fc48 	bl	800540c <HAL_TIMEx_MasterConfigSynchronization>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000b82:	f000 fa55 	bl	8001030 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b86:	2360      	movs	r3, #96	; 0x60
 8000b88:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b92:	2300      	movs	r3, #0
 8000b94:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b96:	2300      	movs	r3, #0
 8000b98:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ba2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4820      	ldr	r0, [pc, #128]	; (8000c2c <MX_TIM1_Init+0x168>)
 8000bac:	f003 fc44 	bl	8004438 <HAL_TIM_PWM_ConfigChannel>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000bb6:	f000 fa3b 	bl	8001030 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000bba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bbe:	2204      	movs	r2, #4
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	481a      	ldr	r0, [pc, #104]	; (8000c2c <MX_TIM1_Init+0x168>)
 8000bc4:	f003 fc38 	bl	8004438 <HAL_TIM_PWM_ConfigChannel>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8000bce:	f000 fa2f 	bl	8001030 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000bd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd6:	2208      	movs	r2, #8
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4814      	ldr	r0, [pc, #80]	; (8000c2c <MX_TIM1_Init+0x168>)
 8000bdc:	f003 fc2c 	bl	8004438 <HAL_TIM_PWM_ConfigChannel>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8000be6:	f000 fa23 	bl	8001030 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000bea:	2300      	movs	r3, #0
 8000bec:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000bfe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c02:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c04:	2300      	movs	r3, #0
 8000c06:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c08:	1d3b      	adds	r3, r7, #4
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4807      	ldr	r0, [pc, #28]	; (8000c2c <MX_TIM1_Init+0x168>)
 8000c0e:	f004 fc79 	bl	8005504 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 8000c18:	f000 fa0a 	bl	8001030 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c1c:	4803      	ldr	r0, [pc, #12]	; (8000c2c <MX_TIM1_Init+0x168>)
 8000c1e:	f000 fbfd 	bl	800141c <HAL_TIM_MspPostInit>

}
 8000c22:	bf00      	nop
 8000c24:	3758      	adds	r7, #88	; 0x58
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	20001448 	.word	0x20001448
 8000c30:	40010000 	.word	0x40010000

08000c34 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b090      	sub	sp, #64	; 0x40
 8000c38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c3a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
 8000c42:	605a      	str	r2, [r3, #4]
 8000c44:	609a      	str	r2, [r3, #8]
 8000c46:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000c48:	f107 031c 	add.w	r3, r7, #28
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	605a      	str	r2, [r3, #4]
 8000c52:	609a      	str	r2, [r3, #8]
 8000c54:	60da      	str	r2, [r3, #12]
 8000c56:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000c58:	f107 030c 	add.w	r3, r7, #12
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c66:	1d3b      	adds	r3, r7, #4
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c6e:	4b3e      	ldr	r3, [pc, #248]	; (8000d68 <MX_TIM3_Init+0x134>)
 8000c70:	4a3e      	ldr	r2, [pc, #248]	; (8000d6c <MX_TIM3_Init+0x138>)
 8000c72:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 840-1;
 8000c74:	4b3c      	ldr	r3, [pc, #240]	; (8000d68 <MX_TIM3_Init+0x134>)
 8000c76:	f240 3247 	movw	r2, #839	; 0x347
 8000c7a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c7c:	4b3a      	ldr	r3, [pc, #232]	; (8000d68 <MX_TIM3_Init+0x134>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000c82:	4b39      	ldr	r3, [pc, #228]	; (8000d68 <MX_TIM3_Init+0x134>)
 8000c84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c88:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c8a:	4b37      	ldr	r3, [pc, #220]	; (8000d68 <MX_TIM3_Init+0x134>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c90:	4b35      	ldr	r3, [pc, #212]	; (8000d68 <MX_TIM3_Init+0x134>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c96:	4834      	ldr	r0, [pc, #208]	; (8000d68 <MX_TIM3_Init+0x134>)
 8000c98:	f002 fd5c 	bl	8003754 <HAL_TIM_Base_Init>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8000ca2:	f000 f9c5 	bl	8001030 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ca6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000caa:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000cac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	482d      	ldr	r0, [pc, #180]	; (8000d68 <MX_TIM3_Init+0x134>)
 8000cb4:	f003 fc82 	bl	80045bc <HAL_TIM_ConfigClockSource>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8000cbe:	f000 f9b7 	bl	8001030 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000cc2:	4829      	ldr	r0, [pc, #164]	; (8000d68 <MX_TIM3_Init+0x134>)
 8000cc4:	f002 ffb6 	bl	8003c34 <HAL_TIM_IC_Init>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000cce:	f000 f9af 	bl	8001030 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000cd2:	2304      	movs	r3, #4
 8000cd4:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000cd6:	2350      	movs	r3, #80	; 0x50
 8000cd8:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000ce6:	f107 031c 	add.w	r3, r7, #28
 8000cea:	4619      	mov	r1, r3
 8000cec:	481e      	ldr	r0, [pc, #120]	; (8000d68 <MX_TIM3_Init+0x134>)
 8000cee:	f003 fd2c 	bl	800474a <HAL_TIM_SlaveConfigSynchro>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8000cf8:	f000 f99a 	bl	8001030 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000d00:	2301      	movs	r3, #1
 8000d02:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000d04:	2300      	movs	r3, #0
 8000d06:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000d0c:	f107 030c 	add.w	r3, r7, #12
 8000d10:	2200      	movs	r2, #0
 8000d12:	4619      	mov	r1, r3
 8000d14:	4814      	ldr	r0, [pc, #80]	; (8000d68 <MX_TIM3_Init+0x134>)
 8000d16:	f003 faf3 	bl	8004300 <HAL_TIM_IC_ConfigChannel>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 8000d20:	f000 f986 	bl	8001030 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000d24:	2300      	movs	r3, #0
 8000d26:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000d28:	2302      	movs	r3, #2
 8000d2a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000d2c:	f107 030c 	add.w	r3, r7, #12
 8000d30:	2204      	movs	r2, #4
 8000d32:	4619      	mov	r1, r3
 8000d34:	480c      	ldr	r0, [pc, #48]	; (8000d68 <MX_TIM3_Init+0x134>)
 8000d36:	f003 fae3 	bl	8004300 <HAL_TIM_IC_ConfigChannel>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_TIM3_Init+0x110>
  {
    Error_Handler();
 8000d40:	f000 f976 	bl	8001030 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d44:	2300      	movs	r3, #0
 8000d46:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d4c:	1d3b      	adds	r3, r7, #4
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4805      	ldr	r0, [pc, #20]	; (8000d68 <MX_TIM3_Init+0x134>)
 8000d52:	f004 fb5b 	bl	800540c <HAL_TIMEx_MasterConfigSynchronization>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_TIM3_Init+0x12c>
  {
    Error_Handler();
 8000d5c:	f000 f968 	bl	8001030 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000d60:	bf00      	nop
 8000d62:	3740      	adds	r7, #64	; 0x40
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	20001490 	.word	0x20001490
 8000d6c:	40000400 	.word	0x40000400

08000d70 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d74:	4b11      	ldr	r3, [pc, #68]	; (8000dbc <MX_USART3_UART_Init+0x4c>)
 8000d76:	4a12      	ldr	r2, [pc, #72]	; (8000dc0 <MX_USART3_UART_Init+0x50>)
 8000d78:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d7a:	4b10      	ldr	r3, [pc, #64]	; (8000dbc <MX_USART3_UART_Init+0x4c>)
 8000d7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d80:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d82:	4b0e      	ldr	r3, [pc, #56]	; (8000dbc <MX_USART3_UART_Init+0x4c>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d88:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <MX_USART3_UART_Init+0x4c>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d8e:	4b0b      	ldr	r3, [pc, #44]	; (8000dbc <MX_USART3_UART_Init+0x4c>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d94:	4b09      	ldr	r3, [pc, #36]	; (8000dbc <MX_USART3_UART_Init+0x4c>)
 8000d96:	220c      	movs	r2, #12
 8000d98:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d9a:	4b08      	ldr	r3, [pc, #32]	; (8000dbc <MX_USART3_UART_Init+0x4c>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000da0:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <MX_USART3_UART_Init+0x4c>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000da6:	4805      	ldr	r0, [pc, #20]	; (8000dbc <MX_USART3_UART_Init+0x4c>)
 8000da8:	f004 fc12 	bl	80055d0 <HAL_UART_Init>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000db2:	f000 f93d 	bl	8001030 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	200015f8 	.word	0x200015f8
 8000dc0:	40004800 	.word	0x40004800

08000dc4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000dc8:	4b14      	ldr	r3, [pc, #80]	; (8000e1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000dce:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000dd0:	4b12      	ldr	r3, [pc, #72]	; (8000e1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dd2:	2204      	movs	r2, #4
 8000dd4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000dd6:	4b11      	ldr	r3, [pc, #68]	; (8000e1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dd8:	2202      	movs	r2, #2
 8000dda:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000ddc:	4b0f      	ldr	r3, [pc, #60]	; (8000e1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000de2:	4b0e      	ldr	r3, [pc, #56]	; (8000e1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000de4:	2202      	movs	r2, #2
 8000de6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000de8:	4b0c      	ldr	r3, [pc, #48]	; (8000e1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dea:	2201      	movs	r2, #1
 8000dec:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000dee:	4b0b      	ldr	r3, [pc, #44]	; (8000e1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000df4:	4b09      	ldr	r3, [pc, #36]	; (8000e1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000dfa:	4b08      	ldr	r3, [pc, #32]	; (8000e1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000e00:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000e06:	4805      	ldr	r0, [pc, #20]	; (8000e1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e08:	f001 feee 	bl	8002be8 <HAL_PCD_Init>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000e12:	f000 f90d 	bl	8001030 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000e16:	bf00      	nop
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	2000163c 	.word	0x2000163c

08000e20 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	607b      	str	r3, [r7, #4]
 8000e2a:	4b14      	ldr	r3, [pc, #80]	; (8000e7c <MX_DMA_Init+0x5c>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	4a13      	ldr	r2, [pc, #76]	; (8000e7c <MX_DMA_Init+0x5c>)
 8000e30:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e34:	6313      	str	r3, [r2, #48]	; 0x30
 8000e36:	4b11      	ldr	r3, [pc, #68]	; (8000e7c <MX_DMA_Init+0x5c>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e3e:	607b      	str	r3, [r7, #4]
 8000e40:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000e42:	2200      	movs	r2, #0
 8000e44:	2100      	movs	r1, #0
 8000e46:	2039      	movs	r0, #57	; 0x39
 8000e48:	f000 fe35 	bl	8001ab6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000e4c:	2039      	movs	r0, #57	; 0x39
 8000e4e:	f000 fe4e 	bl	8001aee <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000e52:	2200      	movs	r2, #0
 8000e54:	2100      	movs	r1, #0
 8000e56:	203a      	movs	r0, #58	; 0x3a
 8000e58:	f000 fe2d 	bl	8001ab6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000e5c:	203a      	movs	r0, #58	; 0x3a
 8000e5e:	f000 fe46 	bl	8001aee <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000e62:	2200      	movs	r2, #0
 8000e64:	2100      	movs	r1, #0
 8000e66:	2045      	movs	r0, #69	; 0x45
 8000e68:	f000 fe25 	bl	8001ab6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000e6c:	2045      	movs	r0, #69	; 0x45
 8000e6e:	f000 fe3e 	bl	8001aee <HAL_NVIC_EnableIRQ>

}
 8000e72:	bf00      	nop
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40023800 	.word	0x40023800

08000e80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b08c      	sub	sp, #48	; 0x30
 8000e84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e86:	f107 031c 	add.w	r3, r7, #28
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	601a      	str	r2, [r3, #0]
 8000e8e:	605a      	str	r2, [r3, #4]
 8000e90:	609a      	str	r2, [r3, #8]
 8000e92:	60da      	str	r2, [r3, #12]
 8000e94:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	61bb      	str	r3, [r7, #24]
 8000e9a:	4b60      	ldr	r3, [pc, #384]	; (800101c <MX_GPIO_Init+0x19c>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	4a5f      	ldr	r2, [pc, #380]	; (800101c <MX_GPIO_Init+0x19c>)
 8000ea0:	f043 0304 	orr.w	r3, r3, #4
 8000ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea6:	4b5d      	ldr	r3, [pc, #372]	; (800101c <MX_GPIO_Init+0x19c>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	f003 0304 	and.w	r3, r3, #4
 8000eae:	61bb      	str	r3, [r7, #24]
 8000eb0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	617b      	str	r3, [r7, #20]
 8000eb6:	4b59      	ldr	r3, [pc, #356]	; (800101c <MX_GPIO_Init+0x19c>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	4a58      	ldr	r2, [pc, #352]	; (800101c <MX_GPIO_Init+0x19c>)
 8000ebc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec2:	4b56      	ldr	r3, [pc, #344]	; (800101c <MX_GPIO_Init+0x19c>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000eca:	617b      	str	r3, [r7, #20]
 8000ecc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	613b      	str	r3, [r7, #16]
 8000ed2:	4b52      	ldr	r3, [pc, #328]	; (800101c <MX_GPIO_Init+0x19c>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	4a51      	ldr	r2, [pc, #324]	; (800101c <MX_GPIO_Init+0x19c>)
 8000ed8:	f043 0301 	orr.w	r3, r3, #1
 8000edc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ede:	4b4f      	ldr	r3, [pc, #316]	; (800101c <MX_GPIO_Init+0x19c>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee2:	f003 0301 	and.w	r3, r3, #1
 8000ee6:	613b      	str	r3, [r7, #16]
 8000ee8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	60fb      	str	r3, [r7, #12]
 8000eee:	4b4b      	ldr	r3, [pc, #300]	; (800101c <MX_GPIO_Init+0x19c>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	4a4a      	ldr	r2, [pc, #296]	; (800101c <MX_GPIO_Init+0x19c>)
 8000ef4:	f043 0302 	orr.w	r3, r3, #2
 8000ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8000efa:	4b48      	ldr	r3, [pc, #288]	; (800101c <MX_GPIO_Init+0x19c>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	f003 0302 	and.w	r3, r3, #2
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	60bb      	str	r3, [r7, #8]
 8000f0a:	4b44      	ldr	r3, [pc, #272]	; (800101c <MX_GPIO_Init+0x19c>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	4a43      	ldr	r2, [pc, #268]	; (800101c <MX_GPIO_Init+0x19c>)
 8000f10:	f043 0310 	orr.w	r3, r3, #16
 8000f14:	6313      	str	r3, [r2, #48]	; 0x30
 8000f16:	4b41      	ldr	r3, [pc, #260]	; (800101c <MX_GPIO_Init+0x19c>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	f003 0310 	and.w	r3, r3, #16
 8000f1e:	60bb      	str	r3, [r7, #8]
 8000f20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	607b      	str	r3, [r7, #4]
 8000f26:	4b3d      	ldr	r3, [pc, #244]	; (800101c <MX_GPIO_Init+0x19c>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	4a3c      	ldr	r2, [pc, #240]	; (800101c <MX_GPIO_Init+0x19c>)
 8000f2c:	f043 0308 	orr.w	r3, r3, #8
 8000f30:	6313      	str	r3, [r2, #48]	; 0x30
 8000f32:	4b3a      	ldr	r3, [pc, #232]	; (800101c <MX_GPIO_Init+0x19c>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	f003 0308 	and.w	r3, r3, #8
 8000f3a:	607b      	str	r3, [r7, #4]
 8000f3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	603b      	str	r3, [r7, #0]
 8000f42:	4b36      	ldr	r3, [pc, #216]	; (800101c <MX_GPIO_Init+0x19c>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	4a35      	ldr	r2, [pc, #212]	; (800101c <MX_GPIO_Init+0x19c>)
 8000f48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4e:	4b33      	ldr	r3, [pc, #204]	; (800101c <MX_GPIO_Init+0x19c>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f56:	603b      	str	r3, [r7, #0]
 8000f58:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	2108      	movs	r1, #8
 8000f5e:	4830      	ldr	r0, [pc, #192]	; (8001020 <MX_GPIO_Init+0x1a0>)
 8000f60:	f001 fe10 	bl	8002b84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000f64:	2200      	movs	r2, #0
 8000f66:	f244 0181 	movw	r1, #16513	; 0x4081
 8000f6a:	482e      	ldr	r0, [pc, #184]	; (8001024 <MX_GPIO_Init+0x1a4>)
 8000f6c:	f001 fe0a 	bl	8002b84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000f70:	2200      	movs	r2, #0
 8000f72:	2140      	movs	r1, #64	; 0x40
 8000f74:	482c      	ldr	r0, [pc, #176]	; (8001028 <MX_GPIO_Init+0x1a8>)
 8000f76:	f001 fe05 	bl	8002b84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000f7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f80:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f86:	2302      	movs	r3, #2
 8000f88:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000f8a:	f107 031c 	add.w	r3, r7, #28
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4826      	ldr	r0, [pc, #152]	; (800102c <MX_GPIO_Init+0x1ac>)
 8000f92:	f001 fc4b 	bl	800282c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f96:	2308      	movs	r3, #8
 8000f98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa6:	f107 031c 	add.w	r3, r7, #28
 8000faa:	4619      	mov	r1, r3
 8000fac:	481c      	ldr	r0, [pc, #112]	; (8001020 <MX_GPIO_Init+0x1a0>)
 8000fae:	f001 fc3d 	bl	800282c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000fb2:	f244 0381 	movw	r3, #16513	; 0x4081
 8000fb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc4:	f107 031c 	add.w	r3, r7, #28
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4816      	ldr	r0, [pc, #88]	; (8001024 <MX_GPIO_Init+0x1a4>)
 8000fcc:	f001 fc2e 	bl	800282c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000fd0:	2340      	movs	r3, #64	; 0x40
 8000fd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000fe0:	f107 031c 	add.w	r3, r7, #28
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	4810      	ldr	r0, [pc, #64]	; (8001028 <MX_GPIO_Init+0x1a8>)
 8000fe8:	f001 fc20 	bl	800282c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000fec:	2380      	movs	r3, #128	; 0x80
 8000fee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ff8:	f107 031c 	add.w	r3, r7, #28
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	480a      	ldr	r0, [pc, #40]	; (8001028 <MX_GPIO_Init+0x1a8>)
 8001000:	f001 fc14 	bl	800282c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001004:	2200      	movs	r2, #0
 8001006:	2100      	movs	r1, #0
 8001008:	2028      	movs	r0, #40	; 0x28
 800100a:	f000 fd54 	bl	8001ab6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800100e:	2028      	movs	r0, #40	; 0x28
 8001010:	f000 fd6d 	bl	8001aee <HAL_NVIC_EnableIRQ>

}
 8001014:	bf00      	nop
 8001016:	3730      	adds	r7, #48	; 0x30
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	40023800 	.word	0x40023800
 8001020:	40020000 	.word	0x40020000
 8001024:	40020400 	.word	0x40020400
 8001028:	40021800 	.word	0x40021800
 800102c:	40020800 	.word	0x40020800

08001030 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001034:	b672      	cpsid	i
}
 8001036:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001038:	e7fe      	b.n	8001038 <Error_Handler+0x8>
	...

0800103c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	607b      	str	r3, [r7, #4]
 8001046:	4b10      	ldr	r3, [pc, #64]	; (8001088 <HAL_MspInit+0x4c>)
 8001048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104a:	4a0f      	ldr	r2, [pc, #60]	; (8001088 <HAL_MspInit+0x4c>)
 800104c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001050:	6453      	str	r3, [r2, #68]	; 0x44
 8001052:	4b0d      	ldr	r3, [pc, #52]	; (8001088 <HAL_MspInit+0x4c>)
 8001054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001056:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800105a:	607b      	str	r3, [r7, #4]
 800105c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	603b      	str	r3, [r7, #0]
 8001062:	4b09      	ldr	r3, [pc, #36]	; (8001088 <HAL_MspInit+0x4c>)
 8001064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001066:	4a08      	ldr	r2, [pc, #32]	; (8001088 <HAL_MspInit+0x4c>)
 8001068:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800106c:	6413      	str	r3, [r2, #64]	; 0x40
 800106e:	4b06      	ldr	r3, [pc, #24]	; (8001088 <HAL_MspInit+0x4c>)
 8001070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001076:	603b      	str	r3, [r7, #0]
 8001078:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800107a:	bf00      	nop
 800107c:	370c      	adds	r7, #12
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	40023800 	.word	0x40023800

0800108c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b08e      	sub	sp, #56	; 0x38
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001094:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
 80010a0:	60da      	str	r2, [r3, #12]
 80010a2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a55      	ldr	r2, [pc, #340]	; (8001200 <HAL_ETH_MspInit+0x174>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	f040 80a4 	bne.w	80011f8 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80010b0:	2300      	movs	r3, #0
 80010b2:	623b      	str	r3, [r7, #32]
 80010b4:	4b53      	ldr	r3, [pc, #332]	; (8001204 <HAL_ETH_MspInit+0x178>)
 80010b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b8:	4a52      	ldr	r2, [pc, #328]	; (8001204 <HAL_ETH_MspInit+0x178>)
 80010ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010be:	6313      	str	r3, [r2, #48]	; 0x30
 80010c0:	4b50      	ldr	r3, [pc, #320]	; (8001204 <HAL_ETH_MspInit+0x178>)
 80010c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010c8:	623b      	str	r3, [r7, #32]
 80010ca:	6a3b      	ldr	r3, [r7, #32]
 80010cc:	2300      	movs	r3, #0
 80010ce:	61fb      	str	r3, [r7, #28]
 80010d0:	4b4c      	ldr	r3, [pc, #304]	; (8001204 <HAL_ETH_MspInit+0x178>)
 80010d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d4:	4a4b      	ldr	r2, [pc, #300]	; (8001204 <HAL_ETH_MspInit+0x178>)
 80010d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80010da:	6313      	str	r3, [r2, #48]	; 0x30
 80010dc:	4b49      	ldr	r3, [pc, #292]	; (8001204 <HAL_ETH_MspInit+0x178>)
 80010de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80010e4:	61fb      	str	r3, [r7, #28]
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	2300      	movs	r3, #0
 80010ea:	61bb      	str	r3, [r7, #24]
 80010ec:	4b45      	ldr	r3, [pc, #276]	; (8001204 <HAL_ETH_MspInit+0x178>)
 80010ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f0:	4a44      	ldr	r2, [pc, #272]	; (8001204 <HAL_ETH_MspInit+0x178>)
 80010f2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80010f6:	6313      	str	r3, [r2, #48]	; 0x30
 80010f8:	4b42      	ldr	r3, [pc, #264]	; (8001204 <HAL_ETH_MspInit+0x178>)
 80010fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001100:	61bb      	str	r3, [r7, #24]
 8001102:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001104:	2300      	movs	r3, #0
 8001106:	617b      	str	r3, [r7, #20]
 8001108:	4b3e      	ldr	r3, [pc, #248]	; (8001204 <HAL_ETH_MspInit+0x178>)
 800110a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110c:	4a3d      	ldr	r2, [pc, #244]	; (8001204 <HAL_ETH_MspInit+0x178>)
 800110e:	f043 0304 	orr.w	r3, r3, #4
 8001112:	6313      	str	r3, [r2, #48]	; 0x30
 8001114:	4b3b      	ldr	r3, [pc, #236]	; (8001204 <HAL_ETH_MspInit+0x178>)
 8001116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001118:	f003 0304 	and.w	r3, r3, #4
 800111c:	617b      	str	r3, [r7, #20]
 800111e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001120:	2300      	movs	r3, #0
 8001122:	613b      	str	r3, [r7, #16]
 8001124:	4b37      	ldr	r3, [pc, #220]	; (8001204 <HAL_ETH_MspInit+0x178>)
 8001126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001128:	4a36      	ldr	r2, [pc, #216]	; (8001204 <HAL_ETH_MspInit+0x178>)
 800112a:	f043 0301 	orr.w	r3, r3, #1
 800112e:	6313      	str	r3, [r2, #48]	; 0x30
 8001130:	4b34      	ldr	r3, [pc, #208]	; (8001204 <HAL_ETH_MspInit+0x178>)
 8001132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001134:	f003 0301 	and.w	r3, r3, #1
 8001138:	613b      	str	r3, [r7, #16]
 800113a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800113c:	2300      	movs	r3, #0
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	4b30      	ldr	r3, [pc, #192]	; (8001204 <HAL_ETH_MspInit+0x178>)
 8001142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001144:	4a2f      	ldr	r2, [pc, #188]	; (8001204 <HAL_ETH_MspInit+0x178>)
 8001146:	f043 0302 	orr.w	r3, r3, #2
 800114a:	6313      	str	r3, [r2, #48]	; 0x30
 800114c:	4b2d      	ldr	r3, [pc, #180]	; (8001204 <HAL_ETH_MspInit+0x178>)
 800114e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001150:	f003 0302 	and.w	r3, r3, #2
 8001154:	60fb      	str	r3, [r7, #12]
 8001156:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001158:	2300      	movs	r3, #0
 800115a:	60bb      	str	r3, [r7, #8]
 800115c:	4b29      	ldr	r3, [pc, #164]	; (8001204 <HAL_ETH_MspInit+0x178>)
 800115e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001160:	4a28      	ldr	r2, [pc, #160]	; (8001204 <HAL_ETH_MspInit+0x178>)
 8001162:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001166:	6313      	str	r3, [r2, #48]	; 0x30
 8001168:	4b26      	ldr	r3, [pc, #152]	; (8001204 <HAL_ETH_MspInit+0x178>)
 800116a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001170:	60bb      	str	r3, [r7, #8]
 8001172:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001174:	2332      	movs	r3, #50	; 0x32
 8001176:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001178:	2302      	movs	r3, #2
 800117a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117c:	2300      	movs	r3, #0
 800117e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001180:	2303      	movs	r3, #3
 8001182:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001184:	230b      	movs	r3, #11
 8001186:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001188:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800118c:	4619      	mov	r1, r3
 800118e:	481e      	ldr	r0, [pc, #120]	; (8001208 <HAL_ETH_MspInit+0x17c>)
 8001190:	f001 fb4c 	bl	800282c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001194:	2386      	movs	r3, #134	; 0x86
 8001196:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001198:	2302      	movs	r3, #2
 800119a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a0:	2303      	movs	r3, #3
 80011a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011a4:	230b      	movs	r3, #11
 80011a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ac:	4619      	mov	r1, r3
 80011ae:	4817      	ldr	r0, [pc, #92]	; (800120c <HAL_ETH_MspInit+0x180>)
 80011b0:	f001 fb3c 	bl	800282c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80011b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ba:	2302      	movs	r3, #2
 80011bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011be:	2300      	movs	r3, #0
 80011c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c2:	2303      	movs	r3, #3
 80011c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011c6:	230b      	movs	r3, #11
 80011c8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80011ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ce:	4619      	mov	r1, r3
 80011d0:	480f      	ldr	r0, [pc, #60]	; (8001210 <HAL_ETH_MspInit+0x184>)
 80011d2:	f001 fb2b 	bl	800282c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80011d6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80011da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011dc:	2302      	movs	r3, #2
 80011de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e4:	2303      	movs	r3, #3
 80011e6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011e8:	230b      	movs	r3, #11
 80011ea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011f0:	4619      	mov	r1, r3
 80011f2:	4808      	ldr	r0, [pc, #32]	; (8001214 <HAL_ETH_MspInit+0x188>)
 80011f4:	f001 fb1a 	bl	800282c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80011f8:	bf00      	nop
 80011fa:	3738      	adds	r7, #56	; 0x38
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40028000 	.word	0x40028000
 8001204:	40023800 	.word	0x40023800
 8001208:	40020800 	.word	0x40020800
 800120c:	40020000 	.word	0x40020000
 8001210:	40020400 	.word	0x40020400
 8001214:	40021800 	.word	0x40021800

08001218 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b08a      	sub	sp, #40	; 0x28
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001220:	f107 0314 	add.w	r3, r7, #20
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	609a      	str	r2, [r3, #8]
 800122c:	60da      	str	r2, [r3, #12]
 800122e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a6f      	ldr	r2, [pc, #444]	; (80013f4 <HAL_TIM_Base_MspInit+0x1dc>)
 8001236:	4293      	cmp	r3, r2
 8001238:	f040 809f 	bne.w	800137a <HAL_TIM_Base_MspInit+0x162>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800123c:	2300      	movs	r3, #0
 800123e:	613b      	str	r3, [r7, #16]
 8001240:	4b6d      	ldr	r3, [pc, #436]	; (80013f8 <HAL_TIM_Base_MspInit+0x1e0>)
 8001242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001244:	4a6c      	ldr	r2, [pc, #432]	; (80013f8 <HAL_TIM_Base_MspInit+0x1e0>)
 8001246:	f043 0301 	orr.w	r3, r3, #1
 800124a:	6453      	str	r3, [r2, #68]	; 0x44
 800124c:	4b6a      	ldr	r3, [pc, #424]	; (80013f8 <HAL_TIM_Base_MspInit+0x1e0>)
 800124e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001250:	f003 0301 	and.w	r3, r3, #1
 8001254:	613b      	str	r3, [r7, #16]
 8001256:	693b      	ldr	r3, [r7, #16]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8001258:	4b68      	ldr	r3, [pc, #416]	; (80013fc <HAL_TIM_Base_MspInit+0x1e4>)
 800125a:	4a69      	ldr	r2, [pc, #420]	; (8001400 <HAL_TIM_Base_MspInit+0x1e8>)
 800125c:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 800125e:	4b67      	ldr	r3, [pc, #412]	; (80013fc <HAL_TIM_Base_MspInit+0x1e4>)
 8001260:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8001264:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001266:	4b65      	ldr	r3, [pc, #404]	; (80013fc <HAL_TIM_Base_MspInit+0x1e4>)
 8001268:	2240      	movs	r2, #64	; 0x40
 800126a:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800126c:	4b63      	ldr	r3, [pc, #396]	; (80013fc <HAL_TIM_Base_MspInit+0x1e4>)
 800126e:	2200      	movs	r2, #0
 8001270:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001272:	4b62      	ldr	r3, [pc, #392]	; (80013fc <HAL_TIM_Base_MspInit+0x1e4>)
 8001274:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001278:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800127a:	4b60      	ldr	r3, [pc, #384]	; (80013fc <HAL_TIM_Base_MspInit+0x1e4>)
 800127c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001280:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001282:	4b5e      	ldr	r3, [pc, #376]	; (80013fc <HAL_TIM_Base_MspInit+0x1e4>)
 8001284:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001288:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 800128a:	4b5c      	ldr	r3, [pc, #368]	; (80013fc <HAL_TIM_Base_MspInit+0x1e4>)
 800128c:	2200      	movs	r2, #0
 800128e:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001290:	4b5a      	ldr	r3, [pc, #360]	; (80013fc <HAL_TIM_Base_MspInit+0x1e4>)
 8001292:	2200      	movs	r2, #0
 8001294:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001296:	4b59      	ldr	r3, [pc, #356]	; (80013fc <HAL_TIM_Base_MspInit+0x1e4>)
 8001298:	2200      	movs	r2, #0
 800129a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 800129c:	4857      	ldr	r0, [pc, #348]	; (80013fc <HAL_TIM_Base_MspInit+0x1e4>)
 800129e:	f000 fc41 	bl	8001b24 <HAL_DMA_Init>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <HAL_TIM_Base_MspInit+0x94>
    {
      Error_Handler();
 80012a8:	f7ff fec2 	bl	8001030 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	4a53      	ldr	r2, [pc, #332]	; (80013fc <HAL_TIM_Base_MspInit+0x1e4>)
 80012b0:	625a      	str	r2, [r3, #36]	; 0x24
 80012b2:	4a52      	ldr	r2, [pc, #328]	; (80013fc <HAL_TIM_Base_MspInit+0x1e4>)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1_CH2 Init */
    hdma_tim1_ch2.Instance = DMA2_Stream2;
 80012b8:	4b52      	ldr	r3, [pc, #328]	; (8001404 <HAL_TIM_Base_MspInit+0x1ec>)
 80012ba:	4a53      	ldr	r2, [pc, #332]	; (8001408 <HAL_TIM_Base_MspInit+0x1f0>)
 80012bc:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch2.Init.Channel = DMA_CHANNEL_6;
 80012be:	4b51      	ldr	r3, [pc, #324]	; (8001404 <HAL_TIM_Base_MspInit+0x1ec>)
 80012c0:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80012c4:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012c6:	4b4f      	ldr	r3, [pc, #316]	; (8001404 <HAL_TIM_Base_MspInit+0x1ec>)
 80012c8:	2240      	movs	r2, #64	; 0x40
 80012ca:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80012cc:	4b4d      	ldr	r3, [pc, #308]	; (8001404 <HAL_TIM_Base_MspInit+0x1ec>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80012d2:	4b4c      	ldr	r3, [pc, #304]	; (8001404 <HAL_TIM_Base_MspInit+0x1ec>)
 80012d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012d8:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012da:	4b4a      	ldr	r3, [pc, #296]	; (8001404 <HAL_TIM_Base_MspInit+0x1ec>)
 80012dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012e0:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012e2:	4b48      	ldr	r3, [pc, #288]	; (8001404 <HAL_TIM_Base_MspInit+0x1ec>)
 80012e4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012e8:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch2.Init.Mode = DMA_NORMAL;
 80012ea:	4b46      	ldr	r3, [pc, #280]	; (8001404 <HAL_TIM_Base_MspInit+0x1ec>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 80012f0:	4b44      	ldr	r3, [pc, #272]	; (8001404 <HAL_TIM_Base_MspInit+0x1ec>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012f6:	4b43      	ldr	r3, [pc, #268]	; (8001404 <HAL_TIM_Base_MspInit+0x1ec>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 80012fc:	4841      	ldr	r0, [pc, #260]	; (8001404 <HAL_TIM_Base_MspInit+0x1ec>)
 80012fe:	f000 fc11 	bl	8001b24 <HAL_DMA_Init>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <HAL_TIM_Base_MspInit+0xf4>
    {
      Error_Handler();
 8001308:	f7ff fe92 	bl	8001030 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch2);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	4a3d      	ldr	r2, [pc, #244]	; (8001404 <HAL_TIM_Base_MspInit+0x1ec>)
 8001310:	629a      	str	r2, [r3, #40]	; 0x28
 8001312:	4a3c      	ldr	r2, [pc, #240]	; (8001404 <HAL_TIM_Base_MspInit+0x1ec>)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1_CH3 Init */
    hdma_tim1_ch3.Instance = DMA2_Stream6;
 8001318:	4b3c      	ldr	r3, [pc, #240]	; (800140c <HAL_TIM_Base_MspInit+0x1f4>)
 800131a:	4a3d      	ldr	r2, [pc, #244]	; (8001410 <HAL_TIM_Base_MspInit+0x1f8>)
 800131c:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch3.Init.Channel = DMA_CHANNEL_6;
 800131e:	4b3b      	ldr	r3, [pc, #236]	; (800140c <HAL_TIM_Base_MspInit+0x1f4>)
 8001320:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8001324:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001326:	4b39      	ldr	r3, [pc, #228]	; (800140c <HAL_TIM_Base_MspInit+0x1f4>)
 8001328:	2240      	movs	r2, #64	; 0x40
 800132a:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 800132c:	4b37      	ldr	r3, [pc, #220]	; (800140c <HAL_TIM_Base_MspInit+0x1f4>)
 800132e:	2200      	movs	r2, #0
 8001330:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8001332:	4b36      	ldr	r3, [pc, #216]	; (800140c <HAL_TIM_Base_MspInit+0x1f4>)
 8001334:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001338:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800133a:	4b34      	ldr	r3, [pc, #208]	; (800140c <HAL_TIM_Base_MspInit+0x1f4>)
 800133c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001340:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001342:	4b32      	ldr	r3, [pc, #200]	; (800140c <HAL_TIM_Base_MspInit+0x1f4>)
 8001344:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001348:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch3.Init.Mode = DMA_NORMAL;
 800134a:	4b30      	ldr	r3, [pc, #192]	; (800140c <HAL_TIM_Base_MspInit+0x1f4>)
 800134c:	2200      	movs	r2, #0
 800134e:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8001350:	4b2e      	ldr	r3, [pc, #184]	; (800140c <HAL_TIM_Base_MspInit+0x1f4>)
 8001352:	2200      	movs	r2, #0
 8001354:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001356:	4b2d      	ldr	r3, [pc, #180]	; (800140c <HAL_TIM_Base_MspInit+0x1f4>)
 8001358:	2200      	movs	r2, #0
 800135a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch3) != HAL_OK)
 800135c:	482b      	ldr	r0, [pc, #172]	; (800140c <HAL_TIM_Base_MspInit+0x1f4>)
 800135e:	f000 fbe1 	bl	8001b24 <HAL_DMA_Init>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <HAL_TIM_Base_MspInit+0x154>
    {
      Error_Handler();
 8001368:	f7ff fe62 	bl	8001030 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch3);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	4a27      	ldr	r2, [pc, #156]	; (800140c <HAL_TIM_Base_MspInit+0x1f4>)
 8001370:	62da      	str	r2, [r3, #44]	; 0x2c
 8001372:	4a26      	ldr	r2, [pc, #152]	; (800140c <HAL_TIM_Base_MspInit+0x1f4>)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001378:	e038      	b.n	80013ec <HAL_TIM_Base_MspInit+0x1d4>
  else if(htim_base->Instance==TIM3)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a25      	ldr	r2, [pc, #148]	; (8001414 <HAL_TIM_Base_MspInit+0x1fc>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d133      	bne.n	80013ec <HAL_TIM_Base_MspInit+0x1d4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001384:	2300      	movs	r3, #0
 8001386:	60fb      	str	r3, [r7, #12]
 8001388:	4b1b      	ldr	r3, [pc, #108]	; (80013f8 <HAL_TIM_Base_MspInit+0x1e0>)
 800138a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138c:	4a1a      	ldr	r2, [pc, #104]	; (80013f8 <HAL_TIM_Base_MspInit+0x1e0>)
 800138e:	f043 0302 	orr.w	r3, r3, #2
 8001392:	6413      	str	r3, [r2, #64]	; 0x40
 8001394:	4b18      	ldr	r3, [pc, #96]	; (80013f8 <HAL_TIM_Base_MspInit+0x1e0>)
 8001396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001398:	f003 0302 	and.w	r3, r3, #2
 800139c:	60fb      	str	r3, [r7, #12]
 800139e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a0:	2300      	movs	r3, #0
 80013a2:	60bb      	str	r3, [r7, #8]
 80013a4:	4b14      	ldr	r3, [pc, #80]	; (80013f8 <HAL_TIM_Base_MspInit+0x1e0>)
 80013a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a8:	4a13      	ldr	r2, [pc, #76]	; (80013f8 <HAL_TIM_Base_MspInit+0x1e0>)
 80013aa:	f043 0301 	orr.w	r3, r3, #1
 80013ae:	6313      	str	r3, [r2, #48]	; 0x30
 80013b0:	4b11      	ldr	r3, [pc, #68]	; (80013f8 <HAL_TIM_Base_MspInit+0x1e0>)
 80013b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b4:	f003 0301 	and.w	r3, r3, #1
 80013b8:	60bb      	str	r3, [r7, #8]
 80013ba:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013bc:	2340      	movs	r3, #64	; 0x40
 80013be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c0:	2302      	movs	r3, #2
 80013c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c8:	2300      	movs	r3, #0
 80013ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80013cc:	2302      	movs	r3, #2
 80013ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d0:	f107 0314 	add.w	r3, r7, #20
 80013d4:	4619      	mov	r1, r3
 80013d6:	4810      	ldr	r0, [pc, #64]	; (8001418 <HAL_TIM_Base_MspInit+0x200>)
 80013d8:	f001 fa28 	bl	800282c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80013dc:	2200      	movs	r2, #0
 80013de:	2100      	movs	r1, #0
 80013e0:	201d      	movs	r0, #29
 80013e2:	f000 fb68 	bl	8001ab6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80013e6:	201d      	movs	r0, #29
 80013e8:	f000 fb81 	bl	8001aee <HAL_NVIC_EnableIRQ>
}
 80013ec:	bf00      	nop
 80013ee:	3728      	adds	r7, #40	; 0x28
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	40010000 	.word	0x40010000
 80013f8:	40023800 	.word	0x40023800
 80013fc:	200014d8 	.word	0x200014d8
 8001400:	40026428 	.word	0x40026428
 8001404:	20001538 	.word	0x20001538
 8001408:	40026440 	.word	0x40026440
 800140c:	20001598 	.word	0x20001598
 8001410:	400264a0 	.word	0x400264a0
 8001414:	40000400 	.word	0x40000400
 8001418:	40020000 	.word	0x40020000

0800141c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b088      	sub	sp, #32
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001424:	f107 030c 	add.w	r3, r7, #12
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	605a      	str	r2, [r3, #4]
 800142e:	609a      	str	r2, [r3, #8]
 8001430:	60da      	str	r2, [r3, #12]
 8001432:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a12      	ldr	r2, [pc, #72]	; (8001484 <HAL_TIM_MspPostInit+0x68>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d11e      	bne.n	800147c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	60bb      	str	r3, [r7, #8]
 8001442:	4b11      	ldr	r3, [pc, #68]	; (8001488 <HAL_TIM_MspPostInit+0x6c>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	4a10      	ldr	r2, [pc, #64]	; (8001488 <HAL_TIM_MspPostInit+0x6c>)
 8001448:	f043 0310 	orr.w	r3, r3, #16
 800144c:	6313      	str	r3, [r2, #48]	; 0x30
 800144e:	4b0e      	ldr	r3, [pc, #56]	; (8001488 <HAL_TIM_MspPostInit+0x6c>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	f003 0310 	and.w	r3, r3, #16
 8001456:	60bb      	str	r3, [r7, #8]
 8001458:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13;
 800145a:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 800145e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001460:	2302      	movs	r3, #2
 8001462:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001464:	2300      	movs	r3, #0
 8001466:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001468:	2300      	movs	r3, #0
 800146a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800146c:	2301      	movs	r3, #1
 800146e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001470:	f107 030c 	add.w	r3, r7, #12
 8001474:	4619      	mov	r1, r3
 8001476:	4805      	ldr	r0, [pc, #20]	; (800148c <HAL_TIM_MspPostInit+0x70>)
 8001478:	f001 f9d8 	bl	800282c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800147c:	bf00      	nop
 800147e:	3720      	adds	r7, #32
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	40010000 	.word	0x40010000
 8001488:	40023800 	.word	0x40023800
 800148c:	40021000 	.word	0x40021000

08001490 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b08a      	sub	sp, #40	; 0x28
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001498:	f107 0314 	add.w	r3, r7, #20
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	609a      	str	r2, [r3, #8]
 80014a4:	60da      	str	r2, [r3, #12]
 80014a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a19      	ldr	r2, [pc, #100]	; (8001514 <HAL_UART_MspInit+0x84>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d12c      	bne.n	800150c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	613b      	str	r3, [r7, #16]
 80014b6:	4b18      	ldr	r3, [pc, #96]	; (8001518 <HAL_UART_MspInit+0x88>)
 80014b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ba:	4a17      	ldr	r2, [pc, #92]	; (8001518 <HAL_UART_MspInit+0x88>)
 80014bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014c0:	6413      	str	r3, [r2, #64]	; 0x40
 80014c2:	4b15      	ldr	r3, [pc, #84]	; (8001518 <HAL_UART_MspInit+0x88>)
 80014c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014ca:	613b      	str	r3, [r7, #16]
 80014cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	60fb      	str	r3, [r7, #12]
 80014d2:	4b11      	ldr	r3, [pc, #68]	; (8001518 <HAL_UART_MspInit+0x88>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	4a10      	ldr	r2, [pc, #64]	; (8001518 <HAL_UART_MspInit+0x88>)
 80014d8:	f043 0308 	orr.w	r3, r3, #8
 80014dc:	6313      	str	r3, [r2, #48]	; 0x30
 80014de:	4b0e      	ldr	r3, [pc, #56]	; (8001518 <HAL_UART_MspInit+0x88>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	f003 0308 	and.w	r3, r3, #8
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80014ea:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f0:	2302      	movs	r3, #2
 80014f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f4:	2300      	movs	r3, #0
 80014f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f8:	2303      	movs	r3, #3
 80014fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80014fc:	2307      	movs	r3, #7
 80014fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001500:	f107 0314 	add.w	r3, r7, #20
 8001504:	4619      	mov	r1, r3
 8001506:	4805      	ldr	r0, [pc, #20]	; (800151c <HAL_UART_MspInit+0x8c>)
 8001508:	f001 f990 	bl	800282c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800150c:	bf00      	nop
 800150e:	3728      	adds	r7, #40	; 0x28
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	40004800 	.word	0x40004800
 8001518:	40023800 	.word	0x40023800
 800151c:	40020c00 	.word	0x40020c00

08001520 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b08a      	sub	sp, #40	; 0x28
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001528:	f107 0314 	add.w	r3, r7, #20
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	605a      	str	r2, [r3, #4]
 8001532:	609a      	str	r2, [r3, #8]
 8001534:	60da      	str	r2, [r3, #12]
 8001536:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001540:	d13f      	bne.n	80015c2 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001542:	2300      	movs	r3, #0
 8001544:	613b      	str	r3, [r7, #16]
 8001546:	4b21      	ldr	r3, [pc, #132]	; (80015cc <HAL_PCD_MspInit+0xac>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154a:	4a20      	ldr	r2, [pc, #128]	; (80015cc <HAL_PCD_MspInit+0xac>)
 800154c:	f043 0301 	orr.w	r3, r3, #1
 8001550:	6313      	str	r3, [r2, #48]	; 0x30
 8001552:	4b1e      	ldr	r3, [pc, #120]	; (80015cc <HAL_PCD_MspInit+0xac>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	f003 0301 	and.w	r3, r3, #1
 800155a:	613b      	str	r3, [r7, #16]
 800155c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800155e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001562:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001564:	2302      	movs	r3, #2
 8001566:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001568:	2300      	movs	r3, #0
 800156a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800156c:	2303      	movs	r3, #3
 800156e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001570:	230a      	movs	r3, #10
 8001572:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001574:	f107 0314 	add.w	r3, r7, #20
 8001578:	4619      	mov	r1, r3
 800157a:	4815      	ldr	r0, [pc, #84]	; (80015d0 <HAL_PCD_MspInit+0xb0>)
 800157c:	f001 f956 	bl	800282c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001580:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001584:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001586:	2300      	movs	r3, #0
 8001588:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158a:	2300      	movs	r3, #0
 800158c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800158e:	f107 0314 	add.w	r3, r7, #20
 8001592:	4619      	mov	r1, r3
 8001594:	480e      	ldr	r0, [pc, #56]	; (80015d0 <HAL_PCD_MspInit+0xb0>)
 8001596:	f001 f949 	bl	800282c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800159a:	4b0c      	ldr	r3, [pc, #48]	; (80015cc <HAL_PCD_MspInit+0xac>)
 800159c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800159e:	4a0b      	ldr	r2, [pc, #44]	; (80015cc <HAL_PCD_MspInit+0xac>)
 80015a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015a4:	6353      	str	r3, [r2, #52]	; 0x34
 80015a6:	2300      	movs	r3, #0
 80015a8:	60fb      	str	r3, [r7, #12]
 80015aa:	4b08      	ldr	r3, [pc, #32]	; (80015cc <HAL_PCD_MspInit+0xac>)
 80015ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ae:	4a07      	ldr	r2, [pc, #28]	; (80015cc <HAL_PCD_MspInit+0xac>)
 80015b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015b4:	6453      	str	r3, [r2, #68]	; 0x44
 80015b6:	4b05      	ldr	r3, [pc, #20]	; (80015cc <HAL_PCD_MspInit+0xac>)
 80015b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80015c2:	bf00      	nop
 80015c4:	3728      	adds	r7, #40	; 0x28
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	40023800 	.word	0x40023800
 80015d0:	40020000 	.word	0x40020000

080015d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015d8:	e7fe      	b.n	80015d8 <NMI_Handler+0x4>

080015da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015da:	b480      	push	{r7}
 80015dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015de:	e7fe      	b.n	80015de <HardFault_Handler+0x4>

080015e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015e4:	e7fe      	b.n	80015e4 <MemManage_Handler+0x4>

080015e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015e6:	b480      	push	{r7}
 80015e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ea:	e7fe      	b.n	80015ea <BusFault_Handler+0x4>

080015ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015f0:	e7fe      	b.n	80015f0 <UsageFault_Handler+0x4>

080015f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015f2:	b480      	push	{r7}
 80015f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015f6:	bf00      	nop
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001604:	bf00      	nop
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr

0800160e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800160e:	b480      	push	{r7}
 8001610:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001612:	bf00      	nop
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001620:	f000 f92a 	bl	8001878 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001624:	bf00      	nop
 8001626:	bd80      	pop	{r7, pc}

08001628 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800162c:	4802      	ldr	r0, [pc, #8]	; (8001638 <TIM3_IRQHandler+0x10>)
 800162e:	f002 fd5f 	bl	80040f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001632:	bf00      	nop
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	20001490 	.word	0x20001490

0800163c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001640:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001644:	f001 fab8 	bl	8002bb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001648:	bf00      	nop
 800164a:	bd80      	pop	{r7, pc}

0800164c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001650:	4802      	ldr	r0, [pc, #8]	; (800165c <DMA2_Stream1_IRQHandler+0x10>)
 8001652:	f000 fb6d 	bl	8001d30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001656:	bf00      	nop
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	200014d8 	.word	0x200014d8

08001660 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 8001664:	4802      	ldr	r0, [pc, #8]	; (8001670 <DMA2_Stream2_IRQHandler+0x10>)
 8001666:	f000 fb63 	bl	8001d30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	20001538 	.word	0x20001538

08001674 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch3);
 8001678:	4802      	ldr	r0, [pc, #8]	; (8001684 <DMA2_Stream6_IRQHandler+0x10>)
 800167a:	f000 fb59 	bl	8001d30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	20001598 	.word	0x20001598

08001688 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
	return -1;
 8001690:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001694:	4618      	mov	r0, r3
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016b0:	605a      	str	r2, [r3, #4]
	return 0;
 80016b2:	2300      	movs	r3, #0
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	370c      	adds	r7, #12
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr

080016c0 <_isatty>:

int _isatty(int file)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
	return 1;
 80016c8:	2301      	movs	r3, #1
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr

080016d6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016d6:	b480      	push	{r7}
 80016d8:	b085      	sub	sp, #20
 80016da:	af00      	add	r7, sp, #0
 80016dc:	60f8      	str	r0, [r7, #12]
 80016de:	60b9      	str	r1, [r7, #8]
 80016e0:	607a      	str	r2, [r7, #4]
	return 0;
 80016e2:	2300      	movs	r3, #0
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3714      	adds	r7, #20
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b086      	sub	sp, #24
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016f8:	4a14      	ldr	r2, [pc, #80]	; (800174c <_sbrk+0x5c>)
 80016fa:	4b15      	ldr	r3, [pc, #84]	; (8001750 <_sbrk+0x60>)
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001704:	4b13      	ldr	r3, [pc, #76]	; (8001754 <_sbrk+0x64>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d102      	bne.n	8001712 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800170c:	4b11      	ldr	r3, [pc, #68]	; (8001754 <_sbrk+0x64>)
 800170e:	4a12      	ldr	r2, [pc, #72]	; (8001758 <_sbrk+0x68>)
 8001710:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001712:	4b10      	ldr	r3, [pc, #64]	; (8001754 <_sbrk+0x64>)
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4413      	add	r3, r2
 800171a:	693a      	ldr	r2, [r7, #16]
 800171c:	429a      	cmp	r2, r3
 800171e:	d207      	bcs.n	8001730 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001720:	f004 febc 	bl	800649c <__errno>
 8001724:	4603      	mov	r3, r0
 8001726:	220c      	movs	r2, #12
 8001728:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800172a:	f04f 33ff 	mov.w	r3, #4294967295
 800172e:	e009      	b.n	8001744 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001730:	4b08      	ldr	r3, [pc, #32]	; (8001754 <_sbrk+0x64>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001736:	4b07      	ldr	r3, [pc, #28]	; (8001754 <_sbrk+0x64>)
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4413      	add	r3, r2
 800173e:	4a05      	ldr	r2, [pc, #20]	; (8001754 <_sbrk+0x64>)
 8001740:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001742:	68fb      	ldr	r3, [r7, #12]
}
 8001744:	4618      	mov	r0, r3
 8001746:	3718      	adds	r7, #24
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	20030000 	.word	0x20030000
 8001750:	00000400 	.word	0x00000400
 8001754:	20002aa4 	.word	0x20002aa4
 8001758:	20002ac0 	.word	0x20002ac0

0800175c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001760:	4b06      	ldr	r3, [pc, #24]	; (800177c <SystemInit+0x20>)
 8001762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001766:	4a05      	ldr	r2, [pc, #20]	; (800177c <SystemInit+0x20>)
 8001768:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800176c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001770:	bf00      	nop
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	e000ed00 	.word	0xe000ed00

08001780 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001780:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017b8 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001784:	480d      	ldr	r0, [pc, #52]	; (80017bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001786:	490e      	ldr	r1, [pc, #56]	; (80017c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001788:	4a0e      	ldr	r2, [pc, #56]	; (80017c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800178a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800178c:	e002      	b.n	8001794 <LoopCopyDataInit>

0800178e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800178e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001790:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001792:	3304      	adds	r3, #4

08001794 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001794:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001796:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001798:	d3f9      	bcc.n	800178e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800179a:	4a0b      	ldr	r2, [pc, #44]	; (80017c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800179c:	4c0b      	ldr	r4, [pc, #44]	; (80017cc <LoopFillZerobss+0x26>)
  movs r3, #0
 800179e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017a0:	e001      	b.n	80017a6 <LoopFillZerobss>

080017a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017a4:	3204      	adds	r2, #4

080017a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017a8:	d3fb      	bcc.n	80017a2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017aa:	f7ff ffd7 	bl	800175c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017ae:	f004 fe7b 	bl	80064a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017b2:	f7fe ff79 	bl	80006a8 <main>
  bx  lr    
 80017b6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80017b8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80017bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017c0:	20001204 	.word	0x20001204
  ldr r2, =_sidata
 80017c4:	08007504 	.word	0x08007504
  ldr r2, =_sbss
 80017c8:	20001204 	.word	0x20001204
  ldr r4, =_ebss
 80017cc:	20002abc 	.word	0x20002abc

080017d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017d0:	e7fe      	b.n	80017d0 <ADC_IRQHandler>
	...

080017d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017d8:	4b0e      	ldr	r3, [pc, #56]	; (8001814 <HAL_Init+0x40>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a0d      	ldr	r2, [pc, #52]	; (8001814 <HAL_Init+0x40>)
 80017de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017e4:	4b0b      	ldr	r3, [pc, #44]	; (8001814 <HAL_Init+0x40>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a0a      	ldr	r2, [pc, #40]	; (8001814 <HAL_Init+0x40>)
 80017ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017f0:	4b08      	ldr	r3, [pc, #32]	; (8001814 <HAL_Init+0x40>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a07      	ldr	r2, [pc, #28]	; (8001814 <HAL_Init+0x40>)
 80017f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017fc:	2003      	movs	r0, #3
 80017fe:	f000 f94f 	bl	8001aa0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001802:	2000      	movs	r0, #0
 8001804:	f000 f808 	bl	8001818 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001808:	f7ff fc18 	bl	800103c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	40023c00 	.word	0x40023c00

08001818 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001820:	4b12      	ldr	r3, [pc, #72]	; (800186c <HAL_InitTick+0x54>)
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	4b12      	ldr	r3, [pc, #72]	; (8001870 <HAL_InitTick+0x58>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	4619      	mov	r1, r3
 800182a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800182e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001832:	fbb2 f3f3 	udiv	r3, r2, r3
 8001836:	4618      	mov	r0, r3
 8001838:	f000 f967 	bl	8001b0a <HAL_SYSTICK_Config>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e00e      	b.n	8001864 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2b0f      	cmp	r3, #15
 800184a:	d80a      	bhi.n	8001862 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800184c:	2200      	movs	r2, #0
 800184e:	6879      	ldr	r1, [r7, #4]
 8001850:	f04f 30ff 	mov.w	r0, #4294967295
 8001854:	f000 f92f 	bl	8001ab6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001858:	4a06      	ldr	r2, [pc, #24]	; (8001874 <HAL_InitTick+0x5c>)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800185e:	2300      	movs	r3, #0
 8001860:	e000      	b.n	8001864 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
}
 8001864:	4618      	mov	r0, r3
 8001866:	3708      	adds	r7, #8
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	20001194 	.word	0x20001194
 8001870:	2000119c 	.word	0x2000119c
 8001874:	20001198 	.word	0x20001198

08001878 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800187c:	4b06      	ldr	r3, [pc, #24]	; (8001898 <HAL_IncTick+0x20>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	461a      	mov	r2, r3
 8001882:	4b06      	ldr	r3, [pc, #24]	; (800189c <HAL_IncTick+0x24>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4413      	add	r3, r2
 8001888:	4a04      	ldr	r2, [pc, #16]	; (800189c <HAL_IncTick+0x24>)
 800188a:	6013      	str	r3, [r2, #0]
}
 800188c:	bf00      	nop
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	2000119c 	.word	0x2000119c
 800189c:	20002aa8 	.word	0x20002aa8

080018a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  return uwTick;
 80018a4:	4b03      	ldr	r3, [pc, #12]	; (80018b4 <HAL_GetTick+0x14>)
 80018a6:	681b      	ldr	r3, [r3, #0]
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	20002aa8 	.word	0x20002aa8

080018b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018c0:	f7ff ffee 	bl	80018a0 <HAL_GetTick>
 80018c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018d0:	d005      	beq.n	80018de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018d2:	4b0a      	ldr	r3, [pc, #40]	; (80018fc <HAL_Delay+0x44>)
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	461a      	mov	r2, r3
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	4413      	add	r3, r2
 80018dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018de:	bf00      	nop
 80018e0:	f7ff ffde 	bl	80018a0 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	68fa      	ldr	r2, [r7, #12]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d8f7      	bhi.n	80018e0 <HAL_Delay+0x28>
  {
  }
}
 80018f0:	bf00      	nop
 80018f2:	bf00      	nop
 80018f4:	3710      	adds	r7, #16
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	2000119c 	.word	0x2000119c

08001900 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001900:	b480      	push	{r7}
 8001902:	b085      	sub	sp, #20
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f003 0307 	and.w	r3, r3, #7
 800190e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001910:	4b0c      	ldr	r3, [pc, #48]	; (8001944 <__NVIC_SetPriorityGrouping+0x44>)
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001916:	68ba      	ldr	r2, [r7, #8]
 8001918:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800191c:	4013      	ands	r3, r2
 800191e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001928:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800192c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001930:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001932:	4a04      	ldr	r2, [pc, #16]	; (8001944 <__NVIC_SetPriorityGrouping+0x44>)
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	60d3      	str	r3, [r2, #12]
}
 8001938:	bf00      	nop
 800193a:	3714      	adds	r7, #20
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr
 8001944:	e000ed00 	.word	0xe000ed00

08001948 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800194c:	4b04      	ldr	r3, [pc, #16]	; (8001960 <__NVIC_GetPriorityGrouping+0x18>)
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	0a1b      	lsrs	r3, r3, #8
 8001952:	f003 0307 	and.w	r3, r3, #7
}
 8001956:	4618      	mov	r0, r3
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr
 8001960:	e000ed00 	.word	0xe000ed00

08001964 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	4603      	mov	r3, r0
 800196c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800196e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001972:	2b00      	cmp	r3, #0
 8001974:	db0b      	blt.n	800198e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001976:	79fb      	ldrb	r3, [r7, #7]
 8001978:	f003 021f 	and.w	r2, r3, #31
 800197c:	4907      	ldr	r1, [pc, #28]	; (800199c <__NVIC_EnableIRQ+0x38>)
 800197e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001982:	095b      	lsrs	r3, r3, #5
 8001984:	2001      	movs	r0, #1
 8001986:	fa00 f202 	lsl.w	r2, r0, r2
 800198a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800198e:	bf00      	nop
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	e000e100 	.word	0xe000e100

080019a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	4603      	mov	r3, r0
 80019a8:	6039      	str	r1, [r7, #0]
 80019aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	db0a      	blt.n	80019ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	b2da      	uxtb	r2, r3
 80019b8:	490c      	ldr	r1, [pc, #48]	; (80019ec <__NVIC_SetPriority+0x4c>)
 80019ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019be:	0112      	lsls	r2, r2, #4
 80019c0:	b2d2      	uxtb	r2, r2
 80019c2:	440b      	add	r3, r1
 80019c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019c8:	e00a      	b.n	80019e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	b2da      	uxtb	r2, r3
 80019ce:	4908      	ldr	r1, [pc, #32]	; (80019f0 <__NVIC_SetPriority+0x50>)
 80019d0:	79fb      	ldrb	r3, [r7, #7]
 80019d2:	f003 030f 	and.w	r3, r3, #15
 80019d6:	3b04      	subs	r3, #4
 80019d8:	0112      	lsls	r2, r2, #4
 80019da:	b2d2      	uxtb	r2, r2
 80019dc:	440b      	add	r3, r1
 80019de:	761a      	strb	r2, [r3, #24]
}
 80019e0:	bf00      	nop
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr
 80019ec:	e000e100 	.word	0xe000e100
 80019f0:	e000ed00 	.word	0xe000ed00

080019f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b089      	sub	sp, #36	; 0x24
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	60f8      	str	r0, [r7, #12]
 80019fc:	60b9      	str	r1, [r7, #8]
 80019fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	f003 0307 	and.w	r3, r3, #7
 8001a06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	f1c3 0307 	rsb	r3, r3, #7
 8001a0e:	2b04      	cmp	r3, #4
 8001a10:	bf28      	it	cs
 8001a12:	2304      	movcs	r3, #4
 8001a14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	3304      	adds	r3, #4
 8001a1a:	2b06      	cmp	r3, #6
 8001a1c:	d902      	bls.n	8001a24 <NVIC_EncodePriority+0x30>
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	3b03      	subs	r3, #3
 8001a22:	e000      	b.n	8001a26 <NVIC_EncodePriority+0x32>
 8001a24:	2300      	movs	r3, #0
 8001a26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a28:	f04f 32ff 	mov.w	r2, #4294967295
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a32:	43da      	mvns	r2, r3
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	401a      	ands	r2, r3
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	fa01 f303 	lsl.w	r3, r1, r3
 8001a46:	43d9      	mvns	r1, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a4c:	4313      	orrs	r3, r2
         );
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3724      	adds	r7, #36	; 0x24
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
	...

08001a5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	3b01      	subs	r3, #1
 8001a68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a6c:	d301      	bcc.n	8001a72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e00f      	b.n	8001a92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a72:	4a0a      	ldr	r2, [pc, #40]	; (8001a9c <SysTick_Config+0x40>)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	3b01      	subs	r3, #1
 8001a78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a7a:	210f      	movs	r1, #15
 8001a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a80:	f7ff ff8e 	bl	80019a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a84:	4b05      	ldr	r3, [pc, #20]	; (8001a9c <SysTick_Config+0x40>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a8a:	4b04      	ldr	r3, [pc, #16]	; (8001a9c <SysTick_Config+0x40>)
 8001a8c:	2207      	movs	r2, #7
 8001a8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	e000e010 	.word	0xe000e010

08001aa0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f7ff ff29 	bl	8001900 <__NVIC_SetPriorityGrouping>
}
 8001aae:	bf00      	nop
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b086      	sub	sp, #24
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	4603      	mov	r3, r0
 8001abe:	60b9      	str	r1, [r7, #8]
 8001ac0:	607a      	str	r2, [r7, #4]
 8001ac2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ac8:	f7ff ff3e 	bl	8001948 <__NVIC_GetPriorityGrouping>
 8001acc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	68b9      	ldr	r1, [r7, #8]
 8001ad2:	6978      	ldr	r0, [r7, #20]
 8001ad4:	f7ff ff8e 	bl	80019f4 <NVIC_EncodePriority>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ade:	4611      	mov	r1, r2
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff ff5d 	bl	80019a0 <__NVIC_SetPriority>
}
 8001ae6:	bf00      	nop
 8001ae8:	3718      	adds	r7, #24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b082      	sub	sp, #8
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	4603      	mov	r3, r0
 8001af6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff ff31 	bl	8001964 <__NVIC_EnableIRQ>
}
 8001b02:	bf00      	nop
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b082      	sub	sp, #8
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f7ff ffa2 	bl	8001a5c <SysTick_Config>
 8001b18:	4603      	mov	r3, r0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
	...

08001b24 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b086      	sub	sp, #24
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001b30:	f7ff feb6 	bl	80018a0 <HAL_GetTick>
 8001b34:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d101      	bne.n	8001b40 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e099      	b.n	8001c74 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2202      	movs	r2, #2
 8001b44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f022 0201 	bic.w	r2, r2, #1
 8001b5e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b60:	e00f      	b.n	8001b82 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b62:	f7ff fe9d 	bl	80018a0 <HAL_GetTick>
 8001b66:	4602      	mov	r2, r0
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	2b05      	cmp	r3, #5
 8001b6e:	d908      	bls.n	8001b82 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2220      	movs	r2, #32
 8001b74:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2203      	movs	r2, #3
 8001b7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e078      	b.n	8001c74 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0301 	and.w	r3, r3, #1
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d1e8      	bne.n	8001b62 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b98:	697a      	ldr	r2, [r7, #20]
 8001b9a:	4b38      	ldr	r3, [pc, #224]	; (8001c7c <HAL_DMA_Init+0x158>)
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685a      	ldr	r2, [r3, #4]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001bae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	691b      	ldr	r3, [r3, #16]
 8001bb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	699b      	ldr	r3, [r3, #24]
 8001bc0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bc6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6a1b      	ldr	r3, [r3, #32]
 8001bcc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001bce:	697a      	ldr	r2, [r7, #20]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd8:	2b04      	cmp	r3, #4
 8001bda:	d107      	bne.n	8001bec <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be4:	4313      	orrs	r3, r2
 8001be6:	697a      	ldr	r2, [r7, #20]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	697a      	ldr	r2, [r7, #20]
 8001bf2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	695b      	ldr	r3, [r3, #20]
 8001bfa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	f023 0307 	bic.w	r3, r3, #7
 8001c02:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c08:	697a      	ldr	r2, [r7, #20]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c12:	2b04      	cmp	r3, #4
 8001c14:	d117      	bne.n	8001c46 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c1a:	697a      	ldr	r2, [r7, #20]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d00e      	beq.n	8001c46 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f000 fa6f 	bl	800210c <DMA_CheckFifoParam>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d008      	beq.n	8001c46 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2240      	movs	r2, #64	; 0x40
 8001c38:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001c42:	2301      	movs	r3, #1
 8001c44:	e016      	b.n	8001c74 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	697a      	ldr	r2, [r7, #20]
 8001c4c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f000 fa26 	bl	80020a0 <DMA_CalcBaseAndBitshift>
 8001c54:	4603      	mov	r3, r0
 8001c56:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c5c:	223f      	movs	r2, #63	; 0x3f
 8001c5e:	409a      	lsls	r2, r3
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2200      	movs	r2, #0
 8001c68:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001c72:	2300      	movs	r3, #0
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3718      	adds	r7, #24
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	f010803f 	.word	0xf010803f

08001c80 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b086      	sub	sp, #24
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	60f8      	str	r0, [r7, #12]
 8001c88:	60b9      	str	r1, [r7, #8]
 8001c8a:	607a      	str	r2, [r7, #4]
 8001c8c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c96:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d101      	bne.n	8001ca6 <HAL_DMA_Start_IT+0x26>
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	e040      	b.n	8001d28 <HAL_DMA_Start_IT+0xa8>
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2201      	movs	r2, #1
 8001caa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d12f      	bne.n	8001d1a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2202      	movs	r2, #2
 8001cbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	68b9      	ldr	r1, [r7, #8]
 8001cce:	68f8      	ldr	r0, [r7, #12]
 8001cd0:	f000 f9b8 	bl	8002044 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cd8:	223f      	movs	r2, #63	; 0x3f
 8001cda:	409a      	lsls	r2, r3
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f042 0216 	orr.w	r2, r2, #22
 8001cee:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d007      	beq.n	8001d08 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f042 0208 	orr.w	r2, r2, #8
 8001d06:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f042 0201 	orr.w	r2, r2, #1
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	e005      	b.n	8001d26 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001d22:	2302      	movs	r3, #2
 8001d24:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001d26:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3718      	adds	r7, #24
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b086      	sub	sp, #24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001d3c:	4b8e      	ldr	r3, [pc, #568]	; (8001f78 <HAL_DMA_IRQHandler+0x248>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a8e      	ldr	r2, [pc, #568]	; (8001f7c <HAL_DMA_IRQHandler+0x24c>)
 8001d42:	fba2 2303 	umull	r2, r3, r2, r3
 8001d46:	0a9b      	lsrs	r3, r3, #10
 8001d48:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d4e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d5a:	2208      	movs	r2, #8
 8001d5c:	409a      	lsls	r2, r3
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	4013      	ands	r3, r2
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d01a      	beq.n	8001d9c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0304 	and.w	r3, r3, #4
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d013      	beq.n	8001d9c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f022 0204 	bic.w	r2, r2, #4
 8001d82:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d88:	2208      	movs	r2, #8
 8001d8a:	409a      	lsls	r2, r3
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d94:	f043 0201 	orr.w	r2, r3, #1
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001da0:	2201      	movs	r2, #1
 8001da2:	409a      	lsls	r2, r3
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	4013      	ands	r3, r2
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d012      	beq.n	8001dd2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	695b      	ldr	r3, [r3, #20]
 8001db2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d00b      	beq.n	8001dd2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	409a      	lsls	r2, r3
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dca:	f043 0202 	orr.w	r2, r3, #2
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dd6:	2204      	movs	r2, #4
 8001dd8:	409a      	lsls	r2, r3
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d012      	beq.n	8001e08 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0302 	and.w	r3, r3, #2
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d00b      	beq.n	8001e08 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001df4:	2204      	movs	r2, #4
 8001df6:	409a      	lsls	r2, r3
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e00:	f043 0204 	orr.w	r2, r3, #4
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e0c:	2210      	movs	r2, #16
 8001e0e:	409a      	lsls	r2, r3
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	4013      	ands	r3, r2
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d043      	beq.n	8001ea0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0308 	and.w	r3, r3, #8
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d03c      	beq.n	8001ea0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e2a:	2210      	movs	r2, #16
 8001e2c:	409a      	lsls	r2, r3
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d018      	beq.n	8001e72 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d108      	bne.n	8001e60 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d024      	beq.n	8001ea0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	4798      	blx	r3
 8001e5e:	e01f      	b.n	8001ea0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d01b      	beq.n	8001ea0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	4798      	blx	r3
 8001e70:	e016      	b.n	8001ea0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d107      	bne.n	8001e90 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f022 0208 	bic.w	r2, r2, #8
 8001e8e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d003      	beq.n	8001ea0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ea4:	2220      	movs	r2, #32
 8001ea6:	409a      	lsls	r2, r3
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	4013      	ands	r3, r2
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	f000 808f 	beq.w	8001fd0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0310 	and.w	r3, r3, #16
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	f000 8087 	beq.w	8001fd0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ec6:	2220      	movs	r2, #32
 8001ec8:	409a      	lsls	r2, r3
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	2b05      	cmp	r3, #5
 8001ed8:	d136      	bne.n	8001f48 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f022 0216 	bic.w	r2, r2, #22
 8001ee8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	695a      	ldr	r2, [r3, #20]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ef8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d103      	bne.n	8001f0a <HAL_DMA_IRQHandler+0x1da>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d007      	beq.n	8001f1a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f022 0208 	bic.w	r2, r2, #8
 8001f18:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f1e:	223f      	movs	r2, #63	; 0x3f
 8001f20:	409a      	lsls	r2, r3
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d07e      	beq.n	800203c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	4798      	blx	r3
        }
        return;
 8001f46:	e079      	b.n	800203c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d01d      	beq.n	8001f92 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d10d      	bne.n	8001f80 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d031      	beq.n	8001fd0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	4798      	blx	r3
 8001f74:	e02c      	b.n	8001fd0 <HAL_DMA_IRQHandler+0x2a0>
 8001f76:	bf00      	nop
 8001f78:	20001194 	.word	0x20001194
 8001f7c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d023      	beq.n	8001fd0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	4798      	blx	r3
 8001f90:	e01e      	b.n	8001fd0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d10f      	bne.n	8001fc0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f022 0210 	bic.w	r2, r2, #16
 8001fae:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d003      	beq.n	8001fd0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d032      	beq.n	800203e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fdc:	f003 0301 	and.w	r3, r3, #1
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d022      	beq.n	800202a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2205      	movs	r2, #5
 8001fe8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f022 0201 	bic.w	r2, r2, #1
 8001ffa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	3301      	adds	r3, #1
 8002000:	60bb      	str	r3, [r7, #8]
 8002002:	697a      	ldr	r2, [r7, #20]
 8002004:	429a      	cmp	r2, r3
 8002006:	d307      	bcc.n	8002018 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0301 	and.w	r3, r3, #1
 8002012:	2b00      	cmp	r3, #0
 8002014:	d1f2      	bne.n	8001ffc <HAL_DMA_IRQHandler+0x2cc>
 8002016:	e000      	b.n	800201a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002018:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2201      	movs	r2, #1
 800201e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800202e:	2b00      	cmp	r3, #0
 8002030:	d005      	beq.n	800203e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	4798      	blx	r3
 800203a:	e000      	b.n	800203e <HAL_DMA_IRQHandler+0x30e>
        return;
 800203c:	bf00      	nop
    }
  }
}
 800203e:	3718      	adds	r7, #24
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}

08002044 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002044:	b480      	push	{r7}
 8002046:	b085      	sub	sp, #20
 8002048:	af00      	add	r7, sp, #0
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	60b9      	str	r1, [r7, #8]
 800204e:	607a      	str	r2, [r7, #4]
 8002050:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002060:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	683a      	ldr	r2, [r7, #0]
 8002068:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	2b40      	cmp	r3, #64	; 0x40
 8002070:	d108      	bne.n	8002084 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	68ba      	ldr	r2, [r7, #8]
 8002080:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002082:	e007      	b.n	8002094 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	68ba      	ldr	r2, [r7, #8]
 800208a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	60da      	str	r2, [r3, #12]
}
 8002094:	bf00      	nop
 8002096:	3714      	adds	r7, #20
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b085      	sub	sp, #20
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	3b10      	subs	r3, #16
 80020b0:	4a14      	ldr	r2, [pc, #80]	; (8002104 <DMA_CalcBaseAndBitshift+0x64>)
 80020b2:	fba2 2303 	umull	r2, r3, r2, r3
 80020b6:	091b      	lsrs	r3, r3, #4
 80020b8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80020ba:	4a13      	ldr	r2, [pc, #76]	; (8002108 <DMA_CalcBaseAndBitshift+0x68>)
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	4413      	add	r3, r2
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	461a      	mov	r2, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2b03      	cmp	r3, #3
 80020cc:	d909      	bls.n	80020e2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80020d6:	f023 0303 	bic.w	r3, r3, #3
 80020da:	1d1a      	adds	r2, r3, #4
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	659a      	str	r2, [r3, #88]	; 0x58
 80020e0:	e007      	b.n	80020f2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80020ea:	f023 0303 	bic.w	r3, r3, #3
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3714      	adds	r7, #20
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	aaaaaaab 	.word	0xaaaaaaab
 8002108:	08007454 	.word	0x08007454

0800210c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800210c:	b480      	push	{r7}
 800210e:	b085      	sub	sp, #20
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002114:	2300      	movs	r3, #0
 8002116:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800211c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	699b      	ldr	r3, [r3, #24]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d11f      	bne.n	8002166 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	2b03      	cmp	r3, #3
 800212a:	d856      	bhi.n	80021da <DMA_CheckFifoParam+0xce>
 800212c:	a201      	add	r2, pc, #4	; (adr r2, 8002134 <DMA_CheckFifoParam+0x28>)
 800212e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002132:	bf00      	nop
 8002134:	08002145 	.word	0x08002145
 8002138:	08002157 	.word	0x08002157
 800213c:	08002145 	.word	0x08002145
 8002140:	080021db 	.word	0x080021db
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002148:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d046      	beq.n	80021de <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002154:	e043      	b.n	80021de <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800215a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800215e:	d140      	bne.n	80021e2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002164:	e03d      	b.n	80021e2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	699b      	ldr	r3, [r3, #24]
 800216a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800216e:	d121      	bne.n	80021b4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	2b03      	cmp	r3, #3
 8002174:	d837      	bhi.n	80021e6 <DMA_CheckFifoParam+0xda>
 8002176:	a201      	add	r2, pc, #4	; (adr r2, 800217c <DMA_CheckFifoParam+0x70>)
 8002178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800217c:	0800218d 	.word	0x0800218d
 8002180:	08002193 	.word	0x08002193
 8002184:	0800218d 	.word	0x0800218d
 8002188:	080021a5 	.word	0x080021a5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	73fb      	strb	r3, [r7, #15]
      break;
 8002190:	e030      	b.n	80021f4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002196:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d025      	beq.n	80021ea <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021a2:	e022      	b.n	80021ea <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80021ac:	d11f      	bne.n	80021ee <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80021b2:	e01c      	b.n	80021ee <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d903      	bls.n	80021c2 <DMA_CheckFifoParam+0xb6>
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	2b03      	cmp	r3, #3
 80021be:	d003      	beq.n	80021c8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80021c0:	e018      	b.n	80021f4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	73fb      	strb	r3, [r7, #15]
      break;
 80021c6:	e015      	b.n	80021f4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d00e      	beq.n	80021f2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	73fb      	strb	r3, [r7, #15]
      break;
 80021d8:	e00b      	b.n	80021f2 <DMA_CheckFifoParam+0xe6>
      break;
 80021da:	bf00      	nop
 80021dc:	e00a      	b.n	80021f4 <DMA_CheckFifoParam+0xe8>
      break;
 80021de:	bf00      	nop
 80021e0:	e008      	b.n	80021f4 <DMA_CheckFifoParam+0xe8>
      break;
 80021e2:	bf00      	nop
 80021e4:	e006      	b.n	80021f4 <DMA_CheckFifoParam+0xe8>
      break;
 80021e6:	bf00      	nop
 80021e8:	e004      	b.n	80021f4 <DMA_CheckFifoParam+0xe8>
      break;
 80021ea:	bf00      	nop
 80021ec:	e002      	b.n	80021f4 <DMA_CheckFifoParam+0xe8>
      break;   
 80021ee:	bf00      	nop
 80021f0:	e000      	b.n	80021f4 <DMA_CheckFifoParam+0xe8>
      break;
 80021f2:	bf00      	nop
    }
  } 
  
  return status; 
 80021f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3714      	adds	r7, #20
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop

08002204 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d101      	bne.n	8002216 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e06c      	b.n	80022f0 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800221c:	2b00      	cmp	r3, #0
 800221e:	d106      	bne.n	800222e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2223      	movs	r2, #35	; 0x23
 8002224:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f7fe ff2f 	bl	800108c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800222e:	2300      	movs	r3, #0
 8002230:	60bb      	str	r3, [r7, #8]
 8002232:	4b31      	ldr	r3, [pc, #196]	; (80022f8 <HAL_ETH_Init+0xf4>)
 8002234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002236:	4a30      	ldr	r2, [pc, #192]	; (80022f8 <HAL_ETH_Init+0xf4>)
 8002238:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800223c:	6453      	str	r3, [r2, #68]	; 0x44
 800223e:	4b2e      	ldr	r3, [pc, #184]	; (80022f8 <HAL_ETH_Init+0xf4>)
 8002240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002242:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002246:	60bb      	str	r3, [r7, #8]
 8002248:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800224a:	4b2c      	ldr	r3, [pc, #176]	; (80022fc <HAL_ETH_Init+0xf8>)
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	4a2b      	ldr	r2, [pc, #172]	; (80022fc <HAL_ETH_Init+0xf8>)
 8002250:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002254:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002256:	4b29      	ldr	r3, [pc, #164]	; (80022fc <HAL_ETH_Init+0xf8>)
 8002258:	685a      	ldr	r2, [r3, #4]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	4927      	ldr	r1, [pc, #156]	; (80022fc <HAL_ETH_Init+0xf8>)
 8002260:	4313      	orrs	r3, r2
 8002262:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002264:	4b25      	ldr	r3, [pc, #148]	; (80022fc <HAL_ETH_Init+0xf8>)
 8002266:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	6812      	ldr	r2, [r2, #0]
 8002276:	f043 0301 	orr.w	r3, r3, #1
 800227a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800227e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002280:	f7ff fb0e 	bl	80018a0 <HAL_GetTick>
 8002284:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002286:	e011      	b.n	80022ac <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002288:	f7ff fb0a 	bl	80018a0 <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002296:	d909      	bls.n	80022ac <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2204      	movs	r2, #4
 800229c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	22e0      	movs	r2, #224	; 0xe0
 80022a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e021      	b.n	80022f0 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0301 	and.w	r3, r3, #1
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d1e4      	bne.n	8002288 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f000 f944 	bl	800254c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f000 f9eb 	bl	80026a0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f000 fa41 	bl	8002752 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	461a      	mov	r2, r3
 80022d6:	2100      	movs	r1, #0
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f000 f9a9 	bl	8002630 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2210      	movs	r2, #16
 80022ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80022ee:	2300      	movs	r3, #0
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3710      	adds	r7, #16
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	40023800 	.word	0x40023800
 80022fc:	40013800 	.word	0x40013800

08002300 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002312:	68fa      	ldr	r2, [r7, #12]
 8002314:	4b47      	ldr	r3, [pc, #284]	; (8002434 <ETH_SetMACConfig+0x134>)
 8002316:	4013      	ands	r3, r2
 8002318:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	7c1b      	ldrb	r3, [r3, #16]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d102      	bne.n	8002328 <ETH_SetMACConfig+0x28>
 8002322:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002326:	e000      	b.n	800232a <ETH_SetMACConfig+0x2a>
 8002328:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	7c5b      	ldrb	r3, [r3, #17]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d102      	bne.n	8002338 <ETH_SetMACConfig+0x38>
 8002332:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002336:	e000      	b.n	800233a <ETH_SetMACConfig+0x3a>
 8002338:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800233a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002340:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	7fdb      	ldrb	r3, [r3, #31]
 8002346:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002348:	431a      	orrs	r2, r3
                        macconf->Speed |
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800234e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002350:	683a      	ldr	r2, [r7, #0]
 8002352:	7f92      	ldrb	r2, [r2, #30]
 8002354:	2a00      	cmp	r2, #0
 8002356:	d102      	bne.n	800235e <ETH_SetMACConfig+0x5e>
 8002358:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800235c:	e000      	b.n	8002360 <ETH_SetMACConfig+0x60>
 800235e:	2200      	movs	r2, #0
                        macconf->Speed |
 8002360:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	7f1b      	ldrb	r3, [r3, #28]
 8002366:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002368:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800236e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	791b      	ldrb	r3, [r3, #4]
 8002374:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002376:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002378:	683a      	ldr	r2, [r7, #0]
 800237a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800237e:	2a00      	cmp	r2, #0
 8002380:	d102      	bne.n	8002388 <ETH_SetMACConfig+0x88>
 8002382:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002386:	e000      	b.n	800238a <ETH_SetMACConfig+0x8a>
 8002388:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800238a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	7bdb      	ldrb	r3, [r3, #15]
 8002390:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002392:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002398:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80023a0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80023a2:	4313      	orrs	r3, r2
 80023a4:	68fa      	ldr	r2, [r7, #12]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	68fa      	ldr	r2, [r7, #12]
 80023b0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80023ba:	2001      	movs	r0, #1
 80023bc:	f7ff fa7c 	bl	80018b8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	68fa      	ldr	r2, [r7, #12]
 80023c6:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80023d0:	68fa      	ldr	r2, [r7, #12]
 80023d2:	f64f 7341 	movw	r3, #65345	; 0xff41
 80023d6:	4013      	ands	r3, r2
 80023d8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023de:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->ZeroQuantaPause |
 80023e0:	683a      	ldr	r2, [r7, #0]
 80023e2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80023e6:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        (uint32_t)macconf->ZeroQuantaPause |
 80023ec:	4313      	orrs	r3, r2
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 80023ee:	683a      	ldr	r2, [r7, #0]
 80023f0:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
                        macconf->PauseLowThreshold |
 80023f4:	4313      	orrs	r3, r2
                        (uint32_t)macconf->ReceiveFlowControl |
 80023f6:	683a      	ldr	r2, [r7, #0]
 80023f8:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 80023fc:	4313      	orrs	r3, r2
                        (uint32_t)macconf->TransmitFlowControl);
 80023fe:	683a      	ldr	r2, [r7, #0]
 8002400:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002404:	4313      	orrs	r3, r2
 8002406:	68fa      	ldr	r2, [r7, #12]
 8002408:	4313      	orrs	r3, r2
 800240a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	68fa      	ldr	r2, [r7, #12]
 8002412:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	699b      	ldr	r3, [r3, #24]
 800241a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800241c:	2001      	movs	r0, #1
 800241e:	f7ff fa4b 	bl	80018b8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	68fa      	ldr	r2, [r7, #12]
 8002428:	619a      	str	r2, [r3, #24]
}
 800242a:	bf00      	nop
 800242c:	3710      	adds	r7, #16
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	ff20810f 	.word	0xff20810f

08002438 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800244a:	699b      	ldr	r3, [r3, #24]
 800244c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800244e:	68fa      	ldr	r2, [r7, #12]
 8002450:	4b3d      	ldr	r3, [pc, #244]	; (8002548 <ETH_SetDMAConfig+0x110>)
 8002452:	4013      	ands	r3, r2
 8002454:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	7b1b      	ldrb	r3, [r3, #12]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d102      	bne.n	8002464 <ETH_SetDMAConfig+0x2c>
 800245e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002462:	e000      	b.n	8002466 <ETH_SetDMAConfig+0x2e>
 8002464:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	7b5b      	ldrb	r3, [r3, #13]
 800246a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800246c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800246e:	683a      	ldr	r2, [r7, #0]
 8002470:	7f52      	ldrb	r2, [r2, #29]
 8002472:	2a00      	cmp	r2, #0
 8002474:	d102      	bne.n	800247c <ETH_SetDMAConfig+0x44>
 8002476:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800247a:	e000      	b.n	800247e <ETH_SetDMAConfig+0x46>
 800247c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800247e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	7b9b      	ldrb	r3, [r3, #14]
 8002484:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002486:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800248c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	7f1b      	ldrb	r3, [r3, #28]
 8002492:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002494:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	7f9b      	ldrb	r3, [r3, #30]
 800249a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800249c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80024a2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024aa:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80024ac:	4313      	orrs	r3, r2
 80024ae:	68fa      	ldr	r2, [r7, #12]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024bc:	461a      	mov	r2, r3
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024ca:	699b      	ldr	r3, [r3, #24]
 80024cc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80024ce:	2001      	movs	r0, #1
 80024d0:	f7ff f9f2 	bl	80018b8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024dc:	461a      	mov	r2, r3
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	791b      	ldrb	r3, [r3, #4]
 80024e6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80024ec:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80024f2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80024f8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002500:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002502:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002508:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800250a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002510:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	6812      	ldr	r2, [r2, #0]
 8002516:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800251a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800251e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800252c:	2001      	movs	r0, #1
 800252e:	f7ff f9c3 	bl	80018b8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800253a:	461a      	mov	r2, r3
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	6013      	str	r3, [r2, #0]
}
 8002540:	bf00      	nop
 8002542:	3710      	adds	r7, #16
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	f8de3f23 	.word	0xf8de3f23

0800254c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b0a6      	sub	sp, #152	; 0x98
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002554:	2301      	movs	r3, #1
 8002556:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800255a:	2301      	movs	r3, #1
 800255c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002560:	2300      	movs	r3, #0
 8002562:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002564:	2300      	movs	r3, #0
 8002566:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800256a:	2301      	movs	r3, #1
 800256c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002570:	2300      	movs	r3, #0
 8002572:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002576:	2301      	movs	r3, #1
 8002578:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800257c:	2300      	movs	r3, #0
 800257e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002582:	2300      	movs	r3, #0
 8002584:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002588:	2300      	movs	r3, #0
 800258a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800258c:	2300      	movs	r3, #0
 800258e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002592:	2300      	movs	r3, #0
 8002594:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002596:	2300      	movs	r3, #0
 8002598:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800259c:	2300      	movs	r3, #0
 800259e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80025a2:	2300      	movs	r3, #0
 80025a4:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80025a8:	2300      	movs	r3, #0
 80025aa:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80025ae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80025b2:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80025b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80025b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80025ba:	2300      	movs	r3, #0
 80025bc:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80025c0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80025c4:	4619      	mov	r1, r3
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f7ff fe9a 	bl	8002300 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80025cc:	2301      	movs	r3, #1
 80025ce:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80025d0:	2301      	movs	r3, #1
 80025d2:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80025d4:	2301      	movs	r3, #1
 80025d6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80025da:	2301      	movs	r3, #1
 80025dc:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80025de:	2300      	movs	r3, #0
 80025e0:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80025e2:	2300      	movs	r3, #0
 80025e4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80025e8:	2300      	movs	r3, #0
 80025ea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80025ee:	2300      	movs	r3, #0
 80025f0:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80025f2:	2301      	movs	r3, #1
 80025f4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80025f8:	2301      	movs	r3, #1
 80025fa:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80025fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002600:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002602:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002606:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002608:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800260c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800260e:	2301      	movs	r3, #1
 8002610:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002614:	2300      	movs	r3, #0
 8002616:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002618:	2300      	movs	r3, #0
 800261a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800261c:	f107 0308 	add.w	r3, r7, #8
 8002620:	4619      	mov	r1, r3
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f7ff ff08 	bl	8002438 <ETH_SetDMAConfig>
}
 8002628:	bf00      	nop
 800262a:	3798      	adds	r7, #152	; 0x98
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}

08002630 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002630:	b480      	push	{r7}
 8002632:	b087      	sub	sp, #28
 8002634:	af00      	add	r7, sp, #0
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	60b9      	str	r1, [r7, #8]
 800263a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	3305      	adds	r3, #5
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	021b      	lsls	r3, r3, #8
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	3204      	adds	r2, #4
 8002648:	7812      	ldrb	r2, [r2, #0]
 800264a:	4313      	orrs	r3, r2
 800264c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800264e:	68ba      	ldr	r2, [r7, #8]
 8002650:	4b11      	ldr	r3, [pc, #68]	; (8002698 <ETH_MACAddressConfig+0x68>)
 8002652:	4413      	add	r3, r2
 8002654:	461a      	mov	r2, r3
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	3303      	adds	r3, #3
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	061a      	lsls	r2, r3, #24
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	3302      	adds	r3, #2
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	041b      	lsls	r3, r3, #16
 800266a:	431a      	orrs	r2, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	3301      	adds	r3, #1
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	021b      	lsls	r3, r3, #8
 8002674:	4313      	orrs	r3, r2
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	7812      	ldrb	r2, [r2, #0]
 800267a:	4313      	orrs	r3, r2
 800267c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800267e:	68ba      	ldr	r2, [r7, #8]
 8002680:	4b06      	ldr	r3, [pc, #24]	; (800269c <ETH_MACAddressConfig+0x6c>)
 8002682:	4413      	add	r3, r2
 8002684:	461a      	mov	r2, r3
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	6013      	str	r3, [r2, #0]
}
 800268a:	bf00      	nop
 800268c:	371c      	adds	r7, #28
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	40028040 	.word	0x40028040
 800269c:	40028044 	.word	0x40028044

080026a0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b085      	sub	sp, #20
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80026a8:	2300      	movs	r3, #0
 80026aa:	60fb      	str	r3, [r7, #12]
 80026ac:	e03e      	b.n	800272c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	68d9      	ldr	r1, [r3, #12]
 80026b2:	68fa      	ldr	r2, [r7, #12]
 80026b4:	4613      	mov	r3, r2
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	4413      	add	r3, r2
 80026ba:	00db      	lsls	r3, r3, #3
 80026bc:	440b      	add	r3, r1
 80026be:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	2200      	movs	r2, #0
 80026c4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	2200      	movs	r2, #0
 80026ca:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	2200      	movs	r2, #0
 80026d0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	2200      	movs	r2, #0
 80026d6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80026d8:	68b9      	ldr	r1, [r7, #8]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	68fa      	ldr	r2, [r7, #12]
 80026de:	3206      	adds	r2, #6
 80026e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d80c      	bhi.n	8002710 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	68d9      	ldr	r1, [r3, #12]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	1c5a      	adds	r2, r3, #1
 80026fe:	4613      	mov	r3, r2
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	4413      	add	r3, r2
 8002704:	00db      	lsls	r3, r3, #3
 8002706:	440b      	add	r3, r1
 8002708:	461a      	mov	r2, r3
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	60da      	str	r2, [r3, #12]
 800270e:	e004      	b.n	800271a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	461a      	mov	r2, r3
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	3301      	adds	r3, #1
 800272a:	60fb      	str	r3, [r7, #12]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2b03      	cmp	r3, #3
 8002730:	d9bd      	bls.n	80026ae <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	68da      	ldr	r2, [r3, #12]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002744:	611a      	str	r2, [r3, #16]
}
 8002746:	bf00      	nop
 8002748:	3714      	adds	r7, #20
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr

08002752 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002752:	b480      	push	{r7}
 8002754:	b085      	sub	sp, #20
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800275a:	2300      	movs	r3, #0
 800275c:	60fb      	str	r3, [r7, #12]
 800275e:	e046      	b.n	80027ee <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6919      	ldr	r1, [r3, #16]
 8002764:	68fa      	ldr	r2, [r7, #12]
 8002766:	4613      	mov	r3, r2
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	4413      	add	r3, r2
 800276c:	00db      	lsls	r3, r3, #3
 800276e:	440b      	add	r3, r1
 8002770:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	2200      	movs	r2, #0
 8002776:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	2200      	movs	r2, #0
 800277c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	2200      	movs	r2, #0
 8002782:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	2200      	movs	r2, #0
 8002788:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	2200      	movs	r2, #0
 800278e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	2200      	movs	r2, #0
 8002794:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800279c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	f244 52f8 	movw	r2, #17912	; 0x45f8
 80027a4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80027b2:	68b9      	ldr	r1, [r7, #8]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	68fa      	ldr	r2, [r7, #12]
 80027b8:	3212      	adds	r2, #18
 80027ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d80c      	bhi.n	80027de <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6919      	ldr	r1, [r3, #16]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	1c5a      	adds	r2, r3, #1
 80027cc:	4613      	mov	r3, r2
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	4413      	add	r3, r2
 80027d2:	00db      	lsls	r3, r3, #3
 80027d4:	440b      	add	r3, r1
 80027d6:	461a      	mov	r2, r3
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	60da      	str	r2, [r3, #12]
 80027dc:	e004      	b.n	80027e8 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	461a      	mov	r2, r3
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	3301      	adds	r3, #1
 80027ec:	60fb      	str	r3, [r7, #12]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2b03      	cmp	r3, #3
 80027f2:	d9b5      	bls.n	8002760 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2200      	movs	r2, #0
 8002804:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	691a      	ldr	r2, [r3, #16]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800281e:	60da      	str	r2, [r3, #12]
}
 8002820:	bf00      	nop
 8002822:	3714      	adds	r7, #20
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800282c:	b480      	push	{r7}
 800282e:	b089      	sub	sp, #36	; 0x24
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002836:	2300      	movs	r3, #0
 8002838:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800283a:	2300      	movs	r3, #0
 800283c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800283e:	2300      	movs	r3, #0
 8002840:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002842:	2300      	movs	r3, #0
 8002844:	61fb      	str	r3, [r7, #28]
 8002846:	e177      	b.n	8002b38 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002848:	2201      	movs	r2, #1
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	fa02 f303 	lsl.w	r3, r2, r3
 8002850:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	697a      	ldr	r2, [r7, #20]
 8002858:	4013      	ands	r3, r2
 800285a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800285c:	693a      	ldr	r2, [r7, #16]
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	429a      	cmp	r2, r3
 8002862:	f040 8166 	bne.w	8002b32 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f003 0303 	and.w	r3, r3, #3
 800286e:	2b01      	cmp	r3, #1
 8002870:	d005      	beq.n	800287e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800287a:	2b02      	cmp	r3, #2
 800287c:	d130      	bne.n	80028e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	005b      	lsls	r3, r3, #1
 8002888:	2203      	movs	r2, #3
 800288a:	fa02 f303 	lsl.w	r3, r2, r3
 800288e:	43db      	mvns	r3, r3
 8002890:	69ba      	ldr	r2, [r7, #24]
 8002892:	4013      	ands	r3, r2
 8002894:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	68da      	ldr	r2, [r3, #12]
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	005b      	lsls	r3, r3, #1
 800289e:	fa02 f303 	lsl.w	r3, r2, r3
 80028a2:	69ba      	ldr	r2, [r7, #24]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028b4:	2201      	movs	r2, #1
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	fa02 f303 	lsl.w	r3, r2, r3
 80028bc:	43db      	mvns	r3, r3
 80028be:	69ba      	ldr	r2, [r7, #24]
 80028c0:	4013      	ands	r3, r2
 80028c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	091b      	lsrs	r3, r3, #4
 80028ca:	f003 0201 	and.w	r2, r3, #1
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	fa02 f303 	lsl.w	r3, r2, r3
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f003 0303 	and.w	r3, r3, #3
 80028e8:	2b03      	cmp	r3, #3
 80028ea:	d017      	beq.n	800291c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	005b      	lsls	r3, r3, #1
 80028f6:	2203      	movs	r2, #3
 80028f8:	fa02 f303 	lsl.w	r3, r2, r3
 80028fc:	43db      	mvns	r3, r3
 80028fe:	69ba      	ldr	r2, [r7, #24]
 8002900:	4013      	ands	r3, r2
 8002902:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	689a      	ldr	r2, [r3, #8]
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	005b      	lsls	r3, r3, #1
 800290c:	fa02 f303 	lsl.w	r3, r2, r3
 8002910:	69ba      	ldr	r2, [r7, #24]
 8002912:	4313      	orrs	r3, r2
 8002914:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f003 0303 	and.w	r3, r3, #3
 8002924:	2b02      	cmp	r3, #2
 8002926:	d123      	bne.n	8002970 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	08da      	lsrs	r2, r3, #3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	3208      	adds	r2, #8
 8002930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002934:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	f003 0307 	and.w	r3, r3, #7
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	220f      	movs	r2, #15
 8002940:	fa02 f303 	lsl.w	r3, r2, r3
 8002944:	43db      	mvns	r3, r3
 8002946:	69ba      	ldr	r2, [r7, #24]
 8002948:	4013      	ands	r3, r2
 800294a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	691a      	ldr	r2, [r3, #16]
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	f003 0307 	and.w	r3, r3, #7
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	fa02 f303 	lsl.w	r3, r2, r3
 800295c:	69ba      	ldr	r2, [r7, #24]
 800295e:	4313      	orrs	r3, r2
 8002960:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	08da      	lsrs	r2, r3, #3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	3208      	adds	r2, #8
 800296a:	69b9      	ldr	r1, [r7, #24]
 800296c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	005b      	lsls	r3, r3, #1
 800297a:	2203      	movs	r2, #3
 800297c:	fa02 f303 	lsl.w	r3, r2, r3
 8002980:	43db      	mvns	r3, r3
 8002982:	69ba      	ldr	r2, [r7, #24]
 8002984:	4013      	ands	r3, r2
 8002986:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f003 0203 	and.w	r2, r3, #3
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	005b      	lsls	r3, r3, #1
 8002994:	fa02 f303 	lsl.w	r3, r2, r3
 8002998:	69ba      	ldr	r2, [r7, #24]
 800299a:	4313      	orrs	r3, r2
 800299c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	f000 80c0 	beq.w	8002b32 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029b2:	2300      	movs	r3, #0
 80029b4:	60fb      	str	r3, [r7, #12]
 80029b6:	4b66      	ldr	r3, [pc, #408]	; (8002b50 <HAL_GPIO_Init+0x324>)
 80029b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ba:	4a65      	ldr	r2, [pc, #404]	; (8002b50 <HAL_GPIO_Init+0x324>)
 80029bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029c0:	6453      	str	r3, [r2, #68]	; 0x44
 80029c2:	4b63      	ldr	r3, [pc, #396]	; (8002b50 <HAL_GPIO_Init+0x324>)
 80029c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029ca:	60fb      	str	r3, [r7, #12]
 80029cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029ce:	4a61      	ldr	r2, [pc, #388]	; (8002b54 <HAL_GPIO_Init+0x328>)
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	089b      	lsrs	r3, r3, #2
 80029d4:	3302      	adds	r3, #2
 80029d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	f003 0303 	and.w	r3, r3, #3
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	220f      	movs	r2, #15
 80029e6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ea:	43db      	mvns	r3, r3
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	4013      	ands	r3, r2
 80029f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a58      	ldr	r2, [pc, #352]	; (8002b58 <HAL_GPIO_Init+0x32c>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d037      	beq.n	8002a6a <HAL_GPIO_Init+0x23e>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a57      	ldr	r2, [pc, #348]	; (8002b5c <HAL_GPIO_Init+0x330>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d031      	beq.n	8002a66 <HAL_GPIO_Init+0x23a>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a56      	ldr	r2, [pc, #344]	; (8002b60 <HAL_GPIO_Init+0x334>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d02b      	beq.n	8002a62 <HAL_GPIO_Init+0x236>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a55      	ldr	r2, [pc, #340]	; (8002b64 <HAL_GPIO_Init+0x338>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d025      	beq.n	8002a5e <HAL_GPIO_Init+0x232>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a54      	ldr	r2, [pc, #336]	; (8002b68 <HAL_GPIO_Init+0x33c>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d01f      	beq.n	8002a5a <HAL_GPIO_Init+0x22e>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a53      	ldr	r2, [pc, #332]	; (8002b6c <HAL_GPIO_Init+0x340>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d019      	beq.n	8002a56 <HAL_GPIO_Init+0x22a>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a52      	ldr	r2, [pc, #328]	; (8002b70 <HAL_GPIO_Init+0x344>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d013      	beq.n	8002a52 <HAL_GPIO_Init+0x226>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a51      	ldr	r2, [pc, #324]	; (8002b74 <HAL_GPIO_Init+0x348>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d00d      	beq.n	8002a4e <HAL_GPIO_Init+0x222>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a50      	ldr	r2, [pc, #320]	; (8002b78 <HAL_GPIO_Init+0x34c>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d007      	beq.n	8002a4a <HAL_GPIO_Init+0x21e>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a4f      	ldr	r2, [pc, #316]	; (8002b7c <HAL_GPIO_Init+0x350>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d101      	bne.n	8002a46 <HAL_GPIO_Init+0x21a>
 8002a42:	2309      	movs	r3, #9
 8002a44:	e012      	b.n	8002a6c <HAL_GPIO_Init+0x240>
 8002a46:	230a      	movs	r3, #10
 8002a48:	e010      	b.n	8002a6c <HAL_GPIO_Init+0x240>
 8002a4a:	2308      	movs	r3, #8
 8002a4c:	e00e      	b.n	8002a6c <HAL_GPIO_Init+0x240>
 8002a4e:	2307      	movs	r3, #7
 8002a50:	e00c      	b.n	8002a6c <HAL_GPIO_Init+0x240>
 8002a52:	2306      	movs	r3, #6
 8002a54:	e00a      	b.n	8002a6c <HAL_GPIO_Init+0x240>
 8002a56:	2305      	movs	r3, #5
 8002a58:	e008      	b.n	8002a6c <HAL_GPIO_Init+0x240>
 8002a5a:	2304      	movs	r3, #4
 8002a5c:	e006      	b.n	8002a6c <HAL_GPIO_Init+0x240>
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e004      	b.n	8002a6c <HAL_GPIO_Init+0x240>
 8002a62:	2302      	movs	r3, #2
 8002a64:	e002      	b.n	8002a6c <HAL_GPIO_Init+0x240>
 8002a66:	2301      	movs	r3, #1
 8002a68:	e000      	b.n	8002a6c <HAL_GPIO_Init+0x240>
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	69fa      	ldr	r2, [r7, #28]
 8002a6e:	f002 0203 	and.w	r2, r2, #3
 8002a72:	0092      	lsls	r2, r2, #2
 8002a74:	4093      	lsls	r3, r2
 8002a76:	69ba      	ldr	r2, [r7, #24]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a7c:	4935      	ldr	r1, [pc, #212]	; (8002b54 <HAL_GPIO_Init+0x328>)
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	089b      	lsrs	r3, r3, #2
 8002a82:	3302      	adds	r3, #2
 8002a84:	69ba      	ldr	r2, [r7, #24]
 8002a86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a8a:	4b3d      	ldr	r3, [pc, #244]	; (8002b80 <HAL_GPIO_Init+0x354>)
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	43db      	mvns	r3, r3
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	4013      	ands	r3, r2
 8002a98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d003      	beq.n	8002aae <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002aa6:	69ba      	ldr	r2, [r7, #24]
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002aae:	4a34      	ldr	r2, [pc, #208]	; (8002b80 <HAL_GPIO_Init+0x354>)
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ab4:	4b32      	ldr	r3, [pc, #200]	; (8002b80 <HAL_GPIO_Init+0x354>)
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	43db      	mvns	r3, r3
 8002abe:	69ba      	ldr	r2, [r7, #24]
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d003      	beq.n	8002ad8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ad8:	4a29      	ldr	r2, [pc, #164]	; (8002b80 <HAL_GPIO_Init+0x354>)
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ade:	4b28      	ldr	r3, [pc, #160]	; (8002b80 <HAL_GPIO_Init+0x354>)
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	43db      	mvns	r3, r3
 8002ae8:	69ba      	ldr	r2, [r7, #24]
 8002aea:	4013      	ands	r3, r2
 8002aec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d003      	beq.n	8002b02 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002afa:	69ba      	ldr	r2, [r7, #24]
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b02:	4a1f      	ldr	r2, [pc, #124]	; (8002b80 <HAL_GPIO_Init+0x354>)
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b08:	4b1d      	ldr	r3, [pc, #116]	; (8002b80 <HAL_GPIO_Init+0x354>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	43db      	mvns	r3, r3
 8002b12:	69ba      	ldr	r2, [r7, #24]
 8002b14:	4013      	ands	r3, r2
 8002b16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d003      	beq.n	8002b2c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b2c:	4a14      	ldr	r2, [pc, #80]	; (8002b80 <HAL_GPIO_Init+0x354>)
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	3301      	adds	r3, #1
 8002b36:	61fb      	str	r3, [r7, #28]
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	2b0f      	cmp	r3, #15
 8002b3c:	f67f ae84 	bls.w	8002848 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b40:	bf00      	nop
 8002b42:	bf00      	nop
 8002b44:	3724      	adds	r7, #36	; 0x24
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	40023800 	.word	0x40023800
 8002b54:	40013800 	.word	0x40013800
 8002b58:	40020000 	.word	0x40020000
 8002b5c:	40020400 	.word	0x40020400
 8002b60:	40020800 	.word	0x40020800
 8002b64:	40020c00 	.word	0x40020c00
 8002b68:	40021000 	.word	0x40021000
 8002b6c:	40021400 	.word	0x40021400
 8002b70:	40021800 	.word	0x40021800
 8002b74:	40021c00 	.word	0x40021c00
 8002b78:	40022000 	.word	0x40022000
 8002b7c:	40022400 	.word	0x40022400
 8002b80:	40013c00 	.word	0x40013c00

08002b84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	807b      	strh	r3, [r7, #2]
 8002b90:	4613      	mov	r3, r2
 8002b92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b94:	787b      	ldrb	r3, [r7, #1]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d003      	beq.n	8002ba2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b9a:	887a      	ldrh	r2, [r7, #2]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ba0:	e003      	b.n	8002baa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ba2:	887b      	ldrh	r3, [r7, #2]
 8002ba4:	041a      	lsls	r2, r3, #16
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	619a      	str	r2, [r3, #24]
}
 8002baa:	bf00      	nop
 8002bac:	370c      	adds	r7, #12
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr
	...

08002bb8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002bc2:	4b08      	ldr	r3, [pc, #32]	; (8002be4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bc4:	695a      	ldr	r2, [r3, #20]
 8002bc6:	88fb      	ldrh	r3, [r7, #6]
 8002bc8:	4013      	ands	r3, r2
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d006      	beq.n	8002bdc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002bce:	4a05      	ldr	r2, [pc, #20]	; (8002be4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bd0:	88fb      	ldrh	r3, [r7, #6]
 8002bd2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002bd4:	88fb      	ldrh	r3, [r7, #6]
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7fd fd3e 	bl	8000658 <HAL_GPIO_EXTI_Callback>
  }
}
 8002bdc:	bf00      	nop
 8002bde:	3708      	adds	r7, #8
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	40013c00 	.word	0x40013c00

08002be8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002be8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bea:	b08f      	sub	sp, #60	; 0x3c
 8002bec:	af0a      	add	r7, sp, #40	; 0x28
 8002bee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d101      	bne.n	8002bfa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e10f      	b.n	8002e1a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d106      	bne.n	8002c1a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f7fe fc83 	bl	8001520 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2203      	movs	r2, #3
 8002c1e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d102      	bne.n	8002c34 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f003 f98e 	bl	8005f5a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	603b      	str	r3, [r7, #0]
 8002c44:	687e      	ldr	r6, [r7, #4]
 8002c46:	466d      	mov	r5, sp
 8002c48:	f106 0410 	add.w	r4, r6, #16
 8002c4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c54:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c58:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c5c:	1d33      	adds	r3, r6, #4
 8002c5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c60:	6838      	ldr	r0, [r7, #0]
 8002c62:	f003 f919 	bl	8005e98 <USB_CoreInit>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d005      	beq.n	8002c78 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2202      	movs	r2, #2
 8002c70:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e0d0      	b.n	8002e1a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	2100      	movs	r1, #0
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f003 f97c 	bl	8005f7c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c84:	2300      	movs	r3, #0
 8002c86:	73fb      	strb	r3, [r7, #15]
 8002c88:	e04a      	b.n	8002d20 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002c8a:	7bfa      	ldrb	r2, [r7, #15]
 8002c8c:	6879      	ldr	r1, [r7, #4]
 8002c8e:	4613      	mov	r3, r2
 8002c90:	00db      	lsls	r3, r3, #3
 8002c92:	4413      	add	r3, r2
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	440b      	add	r3, r1
 8002c98:	333d      	adds	r3, #61	; 0x3d
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002c9e:	7bfa      	ldrb	r2, [r7, #15]
 8002ca0:	6879      	ldr	r1, [r7, #4]
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	00db      	lsls	r3, r3, #3
 8002ca6:	4413      	add	r3, r2
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	440b      	add	r3, r1
 8002cac:	333c      	adds	r3, #60	; 0x3c
 8002cae:	7bfa      	ldrb	r2, [r7, #15]
 8002cb0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002cb2:	7bfa      	ldrb	r2, [r7, #15]
 8002cb4:	7bfb      	ldrb	r3, [r7, #15]
 8002cb6:	b298      	uxth	r0, r3
 8002cb8:	6879      	ldr	r1, [r7, #4]
 8002cba:	4613      	mov	r3, r2
 8002cbc:	00db      	lsls	r3, r3, #3
 8002cbe:	4413      	add	r3, r2
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	440b      	add	r3, r1
 8002cc4:	3344      	adds	r3, #68	; 0x44
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002cca:	7bfa      	ldrb	r2, [r7, #15]
 8002ccc:	6879      	ldr	r1, [r7, #4]
 8002cce:	4613      	mov	r3, r2
 8002cd0:	00db      	lsls	r3, r3, #3
 8002cd2:	4413      	add	r3, r2
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	440b      	add	r3, r1
 8002cd8:	3340      	adds	r3, #64	; 0x40
 8002cda:	2200      	movs	r2, #0
 8002cdc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002cde:	7bfa      	ldrb	r2, [r7, #15]
 8002ce0:	6879      	ldr	r1, [r7, #4]
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	00db      	lsls	r3, r3, #3
 8002ce6:	4413      	add	r3, r2
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	440b      	add	r3, r1
 8002cec:	3348      	adds	r3, #72	; 0x48
 8002cee:	2200      	movs	r2, #0
 8002cf0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002cf2:	7bfa      	ldrb	r2, [r7, #15]
 8002cf4:	6879      	ldr	r1, [r7, #4]
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	00db      	lsls	r3, r3, #3
 8002cfa:	4413      	add	r3, r2
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	440b      	add	r3, r1
 8002d00:	334c      	adds	r3, #76	; 0x4c
 8002d02:	2200      	movs	r2, #0
 8002d04:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002d06:	7bfa      	ldrb	r2, [r7, #15]
 8002d08:	6879      	ldr	r1, [r7, #4]
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	00db      	lsls	r3, r3, #3
 8002d0e:	4413      	add	r3, r2
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	440b      	add	r3, r1
 8002d14:	3354      	adds	r3, #84	; 0x54
 8002d16:	2200      	movs	r2, #0
 8002d18:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d1a:	7bfb      	ldrb	r3, [r7, #15]
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	73fb      	strb	r3, [r7, #15]
 8002d20:	7bfa      	ldrb	r2, [r7, #15]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d3af      	bcc.n	8002c8a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	73fb      	strb	r3, [r7, #15]
 8002d2e:	e044      	b.n	8002dba <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002d30:	7bfa      	ldrb	r2, [r7, #15]
 8002d32:	6879      	ldr	r1, [r7, #4]
 8002d34:	4613      	mov	r3, r2
 8002d36:	00db      	lsls	r3, r3, #3
 8002d38:	4413      	add	r3, r2
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	440b      	add	r3, r1
 8002d3e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002d42:	2200      	movs	r2, #0
 8002d44:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002d46:	7bfa      	ldrb	r2, [r7, #15]
 8002d48:	6879      	ldr	r1, [r7, #4]
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	00db      	lsls	r3, r3, #3
 8002d4e:	4413      	add	r3, r2
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	440b      	add	r3, r1
 8002d54:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002d58:	7bfa      	ldrb	r2, [r7, #15]
 8002d5a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002d5c:	7bfa      	ldrb	r2, [r7, #15]
 8002d5e:	6879      	ldr	r1, [r7, #4]
 8002d60:	4613      	mov	r3, r2
 8002d62:	00db      	lsls	r3, r3, #3
 8002d64:	4413      	add	r3, r2
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	440b      	add	r3, r1
 8002d6a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002d6e:	2200      	movs	r2, #0
 8002d70:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002d72:	7bfa      	ldrb	r2, [r7, #15]
 8002d74:	6879      	ldr	r1, [r7, #4]
 8002d76:	4613      	mov	r3, r2
 8002d78:	00db      	lsls	r3, r3, #3
 8002d7a:	4413      	add	r3, r2
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	440b      	add	r3, r1
 8002d80:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002d84:	2200      	movs	r2, #0
 8002d86:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002d88:	7bfa      	ldrb	r2, [r7, #15]
 8002d8a:	6879      	ldr	r1, [r7, #4]
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	00db      	lsls	r3, r3, #3
 8002d90:	4413      	add	r3, r2
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	440b      	add	r3, r1
 8002d96:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002d9e:	7bfa      	ldrb	r2, [r7, #15]
 8002da0:	6879      	ldr	r1, [r7, #4]
 8002da2:	4613      	mov	r3, r2
 8002da4:	00db      	lsls	r3, r3, #3
 8002da6:	4413      	add	r3, r2
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	440b      	add	r3, r1
 8002dac:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002db0:	2200      	movs	r2, #0
 8002db2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002db4:	7bfb      	ldrb	r3, [r7, #15]
 8002db6:	3301      	adds	r3, #1
 8002db8:	73fb      	strb	r3, [r7, #15]
 8002dba:	7bfa      	ldrb	r2, [r7, #15]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d3b5      	bcc.n	8002d30 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	603b      	str	r3, [r7, #0]
 8002dca:	687e      	ldr	r6, [r7, #4]
 8002dcc:	466d      	mov	r5, sp
 8002dce:	f106 0410 	add.w	r4, r6, #16
 8002dd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002dd4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002dd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002dd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002dda:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002dde:	e885 0003 	stmia.w	r5, {r0, r1}
 8002de2:	1d33      	adds	r3, r6, #4
 8002de4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002de6:	6838      	ldr	r0, [r7, #0]
 8002de8:	f003 f914 	bl	8006014 <USB_DevInit>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d005      	beq.n	8002dfe <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2202      	movs	r2, #2
 8002df6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e00d      	b.n	8002e1a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4618      	mov	r0, r3
 8002e14:	f003 fadf 	bl	80063d6 <USB_DevDisconnect>

  return HAL_OK;
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3714      	adds	r7, #20
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002e24 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b086      	sub	sp, #24
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d101      	bne.n	8002e36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e267      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0301 	and.w	r3, r3, #1
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d075      	beq.n	8002f2e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e42:	4b88      	ldr	r3, [pc, #544]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	f003 030c 	and.w	r3, r3, #12
 8002e4a:	2b04      	cmp	r3, #4
 8002e4c:	d00c      	beq.n	8002e68 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e4e:	4b85      	ldr	r3, [pc, #532]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e56:	2b08      	cmp	r3, #8
 8002e58:	d112      	bne.n	8002e80 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e5a:	4b82      	ldr	r3, [pc, #520]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e66:	d10b      	bne.n	8002e80 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e68:	4b7e      	ldr	r3, [pc, #504]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d05b      	beq.n	8002f2c <HAL_RCC_OscConfig+0x108>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d157      	bne.n	8002f2c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e242      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e88:	d106      	bne.n	8002e98 <HAL_RCC_OscConfig+0x74>
 8002e8a:	4b76      	ldr	r3, [pc, #472]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a75      	ldr	r2, [pc, #468]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002e90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e94:	6013      	str	r3, [r2, #0]
 8002e96:	e01d      	b.n	8002ed4 <HAL_RCC_OscConfig+0xb0>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ea0:	d10c      	bne.n	8002ebc <HAL_RCC_OscConfig+0x98>
 8002ea2:	4b70      	ldr	r3, [pc, #448]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a6f      	ldr	r2, [pc, #444]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002ea8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002eac:	6013      	str	r3, [r2, #0]
 8002eae:	4b6d      	ldr	r3, [pc, #436]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a6c      	ldr	r2, [pc, #432]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002eb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eb8:	6013      	str	r3, [r2, #0]
 8002eba:	e00b      	b.n	8002ed4 <HAL_RCC_OscConfig+0xb0>
 8002ebc:	4b69      	ldr	r3, [pc, #420]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a68      	ldr	r2, [pc, #416]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002ec2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ec6:	6013      	str	r3, [r2, #0]
 8002ec8:	4b66      	ldr	r3, [pc, #408]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a65      	ldr	r2, [pc, #404]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002ece:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ed2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d013      	beq.n	8002f04 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002edc:	f7fe fce0 	bl	80018a0 <HAL_GetTick>
 8002ee0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ee2:	e008      	b.n	8002ef6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ee4:	f7fe fcdc 	bl	80018a0 <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	2b64      	cmp	r3, #100	; 0x64
 8002ef0:	d901      	bls.n	8002ef6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e207      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ef6:	4b5b      	ldr	r3, [pc, #364]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d0f0      	beq.n	8002ee4 <HAL_RCC_OscConfig+0xc0>
 8002f02:	e014      	b.n	8002f2e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f04:	f7fe fccc 	bl	80018a0 <HAL_GetTick>
 8002f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f0a:	e008      	b.n	8002f1e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f0c:	f7fe fcc8 	bl	80018a0 <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	2b64      	cmp	r3, #100	; 0x64
 8002f18:	d901      	bls.n	8002f1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e1f3      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f1e:	4b51      	ldr	r3, [pc, #324]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d1f0      	bne.n	8002f0c <HAL_RCC_OscConfig+0xe8>
 8002f2a:	e000      	b.n	8002f2e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d063      	beq.n	8003002 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f3a:	4b4a      	ldr	r3, [pc, #296]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	f003 030c 	and.w	r3, r3, #12
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d00b      	beq.n	8002f5e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f46:	4b47      	ldr	r3, [pc, #284]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f4e:	2b08      	cmp	r3, #8
 8002f50:	d11c      	bne.n	8002f8c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f52:	4b44      	ldr	r3, [pc, #272]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d116      	bne.n	8002f8c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f5e:	4b41      	ldr	r3, [pc, #260]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0302 	and.w	r3, r3, #2
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d005      	beq.n	8002f76 <HAL_RCC_OscConfig+0x152>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d001      	beq.n	8002f76 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e1c7      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f76:	4b3b      	ldr	r3, [pc, #236]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	00db      	lsls	r3, r3, #3
 8002f84:	4937      	ldr	r1, [pc, #220]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f8a:	e03a      	b.n	8003002 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d020      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f94:	4b34      	ldr	r3, [pc, #208]	; (8003068 <HAL_RCC_OscConfig+0x244>)
 8002f96:	2201      	movs	r2, #1
 8002f98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f9a:	f7fe fc81 	bl	80018a0 <HAL_GetTick>
 8002f9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fa0:	e008      	b.n	8002fb4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fa2:	f7fe fc7d 	bl	80018a0 <HAL_GetTick>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d901      	bls.n	8002fb4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	e1a8      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fb4:	4b2b      	ldr	r3, [pc, #172]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0302 	and.w	r3, r3, #2
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d0f0      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fc0:	4b28      	ldr	r3, [pc, #160]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	691b      	ldr	r3, [r3, #16]
 8002fcc:	00db      	lsls	r3, r3, #3
 8002fce:	4925      	ldr	r1, [pc, #148]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	600b      	str	r3, [r1, #0]
 8002fd4:	e015      	b.n	8003002 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fd6:	4b24      	ldr	r3, [pc, #144]	; (8003068 <HAL_RCC_OscConfig+0x244>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fdc:	f7fe fc60 	bl	80018a0 <HAL_GetTick>
 8002fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fe2:	e008      	b.n	8002ff6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fe4:	f7fe fc5c 	bl	80018a0 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e187      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ff6:	4b1b      	ldr	r3, [pc, #108]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d1f0      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0308 	and.w	r3, r3, #8
 800300a:	2b00      	cmp	r3, #0
 800300c:	d036      	beq.n	800307c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	695b      	ldr	r3, [r3, #20]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d016      	beq.n	8003044 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003016:	4b15      	ldr	r3, [pc, #84]	; (800306c <HAL_RCC_OscConfig+0x248>)
 8003018:	2201      	movs	r2, #1
 800301a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800301c:	f7fe fc40 	bl	80018a0 <HAL_GetTick>
 8003020:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003022:	e008      	b.n	8003036 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003024:	f7fe fc3c 	bl	80018a0 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	2b02      	cmp	r3, #2
 8003030:	d901      	bls.n	8003036 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e167      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003036:	4b0b      	ldr	r3, [pc, #44]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8003038:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800303a:	f003 0302 	and.w	r3, r3, #2
 800303e:	2b00      	cmp	r3, #0
 8003040:	d0f0      	beq.n	8003024 <HAL_RCC_OscConfig+0x200>
 8003042:	e01b      	b.n	800307c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003044:	4b09      	ldr	r3, [pc, #36]	; (800306c <HAL_RCC_OscConfig+0x248>)
 8003046:	2200      	movs	r2, #0
 8003048:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800304a:	f7fe fc29 	bl	80018a0 <HAL_GetTick>
 800304e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003050:	e00e      	b.n	8003070 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003052:	f7fe fc25 	bl	80018a0 <HAL_GetTick>
 8003056:	4602      	mov	r2, r0
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	2b02      	cmp	r3, #2
 800305e:	d907      	bls.n	8003070 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003060:	2303      	movs	r3, #3
 8003062:	e150      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
 8003064:	40023800 	.word	0x40023800
 8003068:	42470000 	.word	0x42470000
 800306c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003070:	4b88      	ldr	r3, [pc, #544]	; (8003294 <HAL_RCC_OscConfig+0x470>)
 8003072:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003074:	f003 0302 	and.w	r3, r3, #2
 8003078:	2b00      	cmp	r3, #0
 800307a:	d1ea      	bne.n	8003052 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0304 	and.w	r3, r3, #4
 8003084:	2b00      	cmp	r3, #0
 8003086:	f000 8097 	beq.w	80031b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800308a:	2300      	movs	r3, #0
 800308c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800308e:	4b81      	ldr	r3, [pc, #516]	; (8003294 <HAL_RCC_OscConfig+0x470>)
 8003090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003092:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d10f      	bne.n	80030ba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800309a:	2300      	movs	r3, #0
 800309c:	60bb      	str	r3, [r7, #8]
 800309e:	4b7d      	ldr	r3, [pc, #500]	; (8003294 <HAL_RCC_OscConfig+0x470>)
 80030a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a2:	4a7c      	ldr	r2, [pc, #496]	; (8003294 <HAL_RCC_OscConfig+0x470>)
 80030a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030a8:	6413      	str	r3, [r2, #64]	; 0x40
 80030aa:	4b7a      	ldr	r3, [pc, #488]	; (8003294 <HAL_RCC_OscConfig+0x470>)
 80030ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030b2:	60bb      	str	r3, [r7, #8]
 80030b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030b6:	2301      	movs	r3, #1
 80030b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ba:	4b77      	ldr	r3, [pc, #476]	; (8003298 <HAL_RCC_OscConfig+0x474>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d118      	bne.n	80030f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030c6:	4b74      	ldr	r3, [pc, #464]	; (8003298 <HAL_RCC_OscConfig+0x474>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a73      	ldr	r2, [pc, #460]	; (8003298 <HAL_RCC_OscConfig+0x474>)
 80030cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030d2:	f7fe fbe5 	bl	80018a0 <HAL_GetTick>
 80030d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030d8:	e008      	b.n	80030ec <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030da:	f7fe fbe1 	bl	80018a0 <HAL_GetTick>
 80030de:	4602      	mov	r2, r0
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d901      	bls.n	80030ec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80030e8:	2303      	movs	r3, #3
 80030ea:	e10c      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ec:	4b6a      	ldr	r3, [pc, #424]	; (8003298 <HAL_RCC_OscConfig+0x474>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d0f0      	beq.n	80030da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d106      	bne.n	800310e <HAL_RCC_OscConfig+0x2ea>
 8003100:	4b64      	ldr	r3, [pc, #400]	; (8003294 <HAL_RCC_OscConfig+0x470>)
 8003102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003104:	4a63      	ldr	r2, [pc, #396]	; (8003294 <HAL_RCC_OscConfig+0x470>)
 8003106:	f043 0301 	orr.w	r3, r3, #1
 800310a:	6713      	str	r3, [r2, #112]	; 0x70
 800310c:	e01c      	b.n	8003148 <HAL_RCC_OscConfig+0x324>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	2b05      	cmp	r3, #5
 8003114:	d10c      	bne.n	8003130 <HAL_RCC_OscConfig+0x30c>
 8003116:	4b5f      	ldr	r3, [pc, #380]	; (8003294 <HAL_RCC_OscConfig+0x470>)
 8003118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800311a:	4a5e      	ldr	r2, [pc, #376]	; (8003294 <HAL_RCC_OscConfig+0x470>)
 800311c:	f043 0304 	orr.w	r3, r3, #4
 8003120:	6713      	str	r3, [r2, #112]	; 0x70
 8003122:	4b5c      	ldr	r3, [pc, #368]	; (8003294 <HAL_RCC_OscConfig+0x470>)
 8003124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003126:	4a5b      	ldr	r2, [pc, #364]	; (8003294 <HAL_RCC_OscConfig+0x470>)
 8003128:	f043 0301 	orr.w	r3, r3, #1
 800312c:	6713      	str	r3, [r2, #112]	; 0x70
 800312e:	e00b      	b.n	8003148 <HAL_RCC_OscConfig+0x324>
 8003130:	4b58      	ldr	r3, [pc, #352]	; (8003294 <HAL_RCC_OscConfig+0x470>)
 8003132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003134:	4a57      	ldr	r2, [pc, #348]	; (8003294 <HAL_RCC_OscConfig+0x470>)
 8003136:	f023 0301 	bic.w	r3, r3, #1
 800313a:	6713      	str	r3, [r2, #112]	; 0x70
 800313c:	4b55      	ldr	r3, [pc, #340]	; (8003294 <HAL_RCC_OscConfig+0x470>)
 800313e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003140:	4a54      	ldr	r2, [pc, #336]	; (8003294 <HAL_RCC_OscConfig+0x470>)
 8003142:	f023 0304 	bic.w	r3, r3, #4
 8003146:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d015      	beq.n	800317c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003150:	f7fe fba6 	bl	80018a0 <HAL_GetTick>
 8003154:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003156:	e00a      	b.n	800316e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003158:	f7fe fba2 	bl	80018a0 <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	f241 3288 	movw	r2, #5000	; 0x1388
 8003166:	4293      	cmp	r3, r2
 8003168:	d901      	bls.n	800316e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	e0cb      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800316e:	4b49      	ldr	r3, [pc, #292]	; (8003294 <HAL_RCC_OscConfig+0x470>)
 8003170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003172:	f003 0302 	and.w	r3, r3, #2
 8003176:	2b00      	cmp	r3, #0
 8003178:	d0ee      	beq.n	8003158 <HAL_RCC_OscConfig+0x334>
 800317a:	e014      	b.n	80031a6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800317c:	f7fe fb90 	bl	80018a0 <HAL_GetTick>
 8003180:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003182:	e00a      	b.n	800319a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003184:	f7fe fb8c 	bl	80018a0 <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003192:	4293      	cmp	r3, r2
 8003194:	d901      	bls.n	800319a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e0b5      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800319a:	4b3e      	ldr	r3, [pc, #248]	; (8003294 <HAL_RCC_OscConfig+0x470>)
 800319c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800319e:	f003 0302 	and.w	r3, r3, #2
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1ee      	bne.n	8003184 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031a6:	7dfb      	ldrb	r3, [r7, #23]
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d105      	bne.n	80031b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031ac:	4b39      	ldr	r3, [pc, #228]	; (8003294 <HAL_RCC_OscConfig+0x470>)
 80031ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b0:	4a38      	ldr	r2, [pc, #224]	; (8003294 <HAL_RCC_OscConfig+0x470>)
 80031b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031b6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	699b      	ldr	r3, [r3, #24]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	f000 80a1 	beq.w	8003304 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031c2:	4b34      	ldr	r3, [pc, #208]	; (8003294 <HAL_RCC_OscConfig+0x470>)
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	f003 030c 	and.w	r3, r3, #12
 80031ca:	2b08      	cmp	r3, #8
 80031cc:	d05c      	beq.n	8003288 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	699b      	ldr	r3, [r3, #24]
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d141      	bne.n	800325a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031d6:	4b31      	ldr	r3, [pc, #196]	; (800329c <HAL_RCC_OscConfig+0x478>)
 80031d8:	2200      	movs	r2, #0
 80031da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031dc:	f7fe fb60 	bl	80018a0 <HAL_GetTick>
 80031e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031e2:	e008      	b.n	80031f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031e4:	f7fe fb5c 	bl	80018a0 <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d901      	bls.n	80031f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e087      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031f6:	4b27      	ldr	r3, [pc, #156]	; (8003294 <HAL_RCC_OscConfig+0x470>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1f0      	bne.n	80031e4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	69da      	ldr	r2, [r3, #28]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a1b      	ldr	r3, [r3, #32]
 800320a:	431a      	orrs	r2, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003210:	019b      	lsls	r3, r3, #6
 8003212:	431a      	orrs	r2, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003218:	085b      	lsrs	r3, r3, #1
 800321a:	3b01      	subs	r3, #1
 800321c:	041b      	lsls	r3, r3, #16
 800321e:	431a      	orrs	r2, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003224:	061b      	lsls	r3, r3, #24
 8003226:	491b      	ldr	r1, [pc, #108]	; (8003294 <HAL_RCC_OscConfig+0x470>)
 8003228:	4313      	orrs	r3, r2
 800322a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800322c:	4b1b      	ldr	r3, [pc, #108]	; (800329c <HAL_RCC_OscConfig+0x478>)
 800322e:	2201      	movs	r2, #1
 8003230:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003232:	f7fe fb35 	bl	80018a0 <HAL_GetTick>
 8003236:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003238:	e008      	b.n	800324c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800323a:	f7fe fb31 	bl	80018a0 <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	2b02      	cmp	r3, #2
 8003246:	d901      	bls.n	800324c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e05c      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800324c:	4b11      	ldr	r3, [pc, #68]	; (8003294 <HAL_RCC_OscConfig+0x470>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d0f0      	beq.n	800323a <HAL_RCC_OscConfig+0x416>
 8003258:	e054      	b.n	8003304 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800325a:	4b10      	ldr	r3, [pc, #64]	; (800329c <HAL_RCC_OscConfig+0x478>)
 800325c:	2200      	movs	r2, #0
 800325e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003260:	f7fe fb1e 	bl	80018a0 <HAL_GetTick>
 8003264:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003266:	e008      	b.n	800327a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003268:	f7fe fb1a 	bl	80018a0 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b02      	cmp	r3, #2
 8003274:	d901      	bls.n	800327a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e045      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800327a:	4b06      	ldr	r3, [pc, #24]	; (8003294 <HAL_RCC_OscConfig+0x470>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d1f0      	bne.n	8003268 <HAL_RCC_OscConfig+0x444>
 8003286:	e03d      	b.n	8003304 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	699b      	ldr	r3, [r3, #24]
 800328c:	2b01      	cmp	r3, #1
 800328e:	d107      	bne.n	80032a0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e038      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
 8003294:	40023800 	.word	0x40023800
 8003298:	40007000 	.word	0x40007000
 800329c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032a0:	4b1b      	ldr	r3, [pc, #108]	; (8003310 <HAL_RCC_OscConfig+0x4ec>)
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	699b      	ldr	r3, [r3, #24]
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d028      	beq.n	8003300 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d121      	bne.n	8003300 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d11a      	bne.n	8003300 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032ca:	68fa      	ldr	r2, [r7, #12]
 80032cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80032d0:	4013      	ands	r3, r2
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80032d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032d8:	4293      	cmp	r3, r2
 80032da:	d111      	bne.n	8003300 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e6:	085b      	lsrs	r3, r3, #1
 80032e8:	3b01      	subs	r3, #1
 80032ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d107      	bne.n	8003300 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d001      	beq.n	8003304 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e000      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	3718      	adds	r7, #24
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	40023800 	.word	0x40023800

08003314 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d101      	bne.n	8003328 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e0cc      	b.n	80034c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003328:	4b68      	ldr	r3, [pc, #416]	; (80034cc <HAL_RCC_ClockConfig+0x1b8>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 030f 	and.w	r3, r3, #15
 8003330:	683a      	ldr	r2, [r7, #0]
 8003332:	429a      	cmp	r2, r3
 8003334:	d90c      	bls.n	8003350 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003336:	4b65      	ldr	r3, [pc, #404]	; (80034cc <HAL_RCC_ClockConfig+0x1b8>)
 8003338:	683a      	ldr	r2, [r7, #0]
 800333a:	b2d2      	uxtb	r2, r2
 800333c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800333e:	4b63      	ldr	r3, [pc, #396]	; (80034cc <HAL_RCC_ClockConfig+0x1b8>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 030f 	and.w	r3, r3, #15
 8003346:	683a      	ldr	r2, [r7, #0]
 8003348:	429a      	cmp	r2, r3
 800334a:	d001      	beq.n	8003350 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e0b8      	b.n	80034c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0302 	and.w	r3, r3, #2
 8003358:	2b00      	cmp	r3, #0
 800335a:	d020      	beq.n	800339e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0304 	and.w	r3, r3, #4
 8003364:	2b00      	cmp	r3, #0
 8003366:	d005      	beq.n	8003374 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003368:	4b59      	ldr	r3, [pc, #356]	; (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	4a58      	ldr	r2, [pc, #352]	; (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 800336e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003372:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0308 	and.w	r3, r3, #8
 800337c:	2b00      	cmp	r3, #0
 800337e:	d005      	beq.n	800338c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003380:	4b53      	ldr	r3, [pc, #332]	; (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	4a52      	ldr	r2, [pc, #328]	; (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003386:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800338a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800338c:	4b50      	ldr	r3, [pc, #320]	; (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	494d      	ldr	r1, [pc, #308]	; (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 800339a:	4313      	orrs	r3, r2
 800339c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0301 	and.w	r3, r3, #1
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d044      	beq.n	8003434 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d107      	bne.n	80033c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033b2:	4b47      	ldr	r3, [pc, #284]	; (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d119      	bne.n	80033f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e07f      	b.n	80034c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d003      	beq.n	80033d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033ce:	2b03      	cmp	r3, #3
 80033d0:	d107      	bne.n	80033e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033d2:	4b3f      	ldr	r3, [pc, #252]	; (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d109      	bne.n	80033f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e06f      	b.n	80034c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033e2:	4b3b      	ldr	r3, [pc, #236]	; (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0302 	and.w	r3, r3, #2
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d101      	bne.n	80033f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e067      	b.n	80034c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033f2:	4b37      	ldr	r3, [pc, #220]	; (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	f023 0203 	bic.w	r2, r3, #3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	4934      	ldr	r1, [pc, #208]	; (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003400:	4313      	orrs	r3, r2
 8003402:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003404:	f7fe fa4c 	bl	80018a0 <HAL_GetTick>
 8003408:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800340a:	e00a      	b.n	8003422 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800340c:	f7fe fa48 	bl	80018a0 <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	f241 3288 	movw	r2, #5000	; 0x1388
 800341a:	4293      	cmp	r3, r2
 800341c:	d901      	bls.n	8003422 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e04f      	b.n	80034c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003422:	4b2b      	ldr	r3, [pc, #172]	; (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	f003 020c 	and.w	r2, r3, #12
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	429a      	cmp	r2, r3
 8003432:	d1eb      	bne.n	800340c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003434:	4b25      	ldr	r3, [pc, #148]	; (80034cc <HAL_RCC_ClockConfig+0x1b8>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 030f 	and.w	r3, r3, #15
 800343c:	683a      	ldr	r2, [r7, #0]
 800343e:	429a      	cmp	r2, r3
 8003440:	d20c      	bcs.n	800345c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003442:	4b22      	ldr	r3, [pc, #136]	; (80034cc <HAL_RCC_ClockConfig+0x1b8>)
 8003444:	683a      	ldr	r2, [r7, #0]
 8003446:	b2d2      	uxtb	r2, r2
 8003448:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800344a:	4b20      	ldr	r3, [pc, #128]	; (80034cc <HAL_RCC_ClockConfig+0x1b8>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 030f 	and.w	r3, r3, #15
 8003452:	683a      	ldr	r2, [r7, #0]
 8003454:	429a      	cmp	r2, r3
 8003456:	d001      	beq.n	800345c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e032      	b.n	80034c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0304 	and.w	r3, r3, #4
 8003464:	2b00      	cmp	r3, #0
 8003466:	d008      	beq.n	800347a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003468:	4b19      	ldr	r3, [pc, #100]	; (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	4916      	ldr	r1, [pc, #88]	; (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003476:	4313      	orrs	r3, r2
 8003478:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0308 	and.w	r3, r3, #8
 8003482:	2b00      	cmp	r3, #0
 8003484:	d009      	beq.n	800349a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003486:	4b12      	ldr	r3, [pc, #72]	; (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	00db      	lsls	r3, r3, #3
 8003494:	490e      	ldr	r1, [pc, #56]	; (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003496:	4313      	orrs	r3, r2
 8003498:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800349a:	f000 f821 	bl	80034e0 <HAL_RCC_GetSysClockFreq>
 800349e:	4602      	mov	r2, r0
 80034a0:	4b0b      	ldr	r3, [pc, #44]	; (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	091b      	lsrs	r3, r3, #4
 80034a6:	f003 030f 	and.w	r3, r3, #15
 80034aa:	490a      	ldr	r1, [pc, #40]	; (80034d4 <HAL_RCC_ClockConfig+0x1c0>)
 80034ac:	5ccb      	ldrb	r3, [r1, r3]
 80034ae:	fa22 f303 	lsr.w	r3, r2, r3
 80034b2:	4a09      	ldr	r2, [pc, #36]	; (80034d8 <HAL_RCC_ClockConfig+0x1c4>)
 80034b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80034b6:	4b09      	ldr	r3, [pc, #36]	; (80034dc <HAL_RCC_ClockConfig+0x1c8>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4618      	mov	r0, r3
 80034bc:	f7fe f9ac 	bl	8001818 <HAL_InitTick>

  return HAL_OK;
 80034c0:	2300      	movs	r3, #0
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3710      	adds	r7, #16
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	40023c00 	.word	0x40023c00
 80034d0:	40023800 	.word	0x40023800
 80034d4:	0800743c 	.word	0x0800743c
 80034d8:	20001194 	.word	0x20001194
 80034dc:	20001198 	.word	0x20001198

080034e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034e4:	b094      	sub	sp, #80	; 0x50
 80034e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80034e8:	2300      	movs	r3, #0
 80034ea:	647b      	str	r3, [r7, #68]	; 0x44
 80034ec:	2300      	movs	r3, #0
 80034ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034f0:	2300      	movs	r3, #0
 80034f2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80034f4:	2300      	movs	r3, #0
 80034f6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034f8:	4b79      	ldr	r3, [pc, #484]	; (80036e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	f003 030c 	and.w	r3, r3, #12
 8003500:	2b08      	cmp	r3, #8
 8003502:	d00d      	beq.n	8003520 <HAL_RCC_GetSysClockFreq+0x40>
 8003504:	2b08      	cmp	r3, #8
 8003506:	f200 80e1 	bhi.w	80036cc <HAL_RCC_GetSysClockFreq+0x1ec>
 800350a:	2b00      	cmp	r3, #0
 800350c:	d002      	beq.n	8003514 <HAL_RCC_GetSysClockFreq+0x34>
 800350e:	2b04      	cmp	r3, #4
 8003510:	d003      	beq.n	800351a <HAL_RCC_GetSysClockFreq+0x3a>
 8003512:	e0db      	b.n	80036cc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003514:	4b73      	ldr	r3, [pc, #460]	; (80036e4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003516:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003518:	e0db      	b.n	80036d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800351a:	4b73      	ldr	r3, [pc, #460]	; (80036e8 <HAL_RCC_GetSysClockFreq+0x208>)
 800351c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800351e:	e0d8      	b.n	80036d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003520:	4b6f      	ldr	r3, [pc, #444]	; (80036e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003528:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800352a:	4b6d      	ldr	r3, [pc, #436]	; (80036e0 <HAL_RCC_GetSysClockFreq+0x200>)
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d063      	beq.n	80035fe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003536:	4b6a      	ldr	r3, [pc, #424]	; (80036e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	099b      	lsrs	r3, r3, #6
 800353c:	2200      	movs	r2, #0
 800353e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003540:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003544:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003548:	633b      	str	r3, [r7, #48]	; 0x30
 800354a:	2300      	movs	r3, #0
 800354c:	637b      	str	r3, [r7, #52]	; 0x34
 800354e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003552:	4622      	mov	r2, r4
 8003554:	462b      	mov	r3, r5
 8003556:	f04f 0000 	mov.w	r0, #0
 800355a:	f04f 0100 	mov.w	r1, #0
 800355e:	0159      	lsls	r1, r3, #5
 8003560:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003564:	0150      	lsls	r0, r2, #5
 8003566:	4602      	mov	r2, r0
 8003568:	460b      	mov	r3, r1
 800356a:	4621      	mov	r1, r4
 800356c:	1a51      	subs	r1, r2, r1
 800356e:	6139      	str	r1, [r7, #16]
 8003570:	4629      	mov	r1, r5
 8003572:	eb63 0301 	sbc.w	r3, r3, r1
 8003576:	617b      	str	r3, [r7, #20]
 8003578:	f04f 0200 	mov.w	r2, #0
 800357c:	f04f 0300 	mov.w	r3, #0
 8003580:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003584:	4659      	mov	r1, fp
 8003586:	018b      	lsls	r3, r1, #6
 8003588:	4651      	mov	r1, sl
 800358a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800358e:	4651      	mov	r1, sl
 8003590:	018a      	lsls	r2, r1, #6
 8003592:	4651      	mov	r1, sl
 8003594:	ebb2 0801 	subs.w	r8, r2, r1
 8003598:	4659      	mov	r1, fp
 800359a:	eb63 0901 	sbc.w	r9, r3, r1
 800359e:	f04f 0200 	mov.w	r2, #0
 80035a2:	f04f 0300 	mov.w	r3, #0
 80035a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80035aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80035ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80035b2:	4690      	mov	r8, r2
 80035b4:	4699      	mov	r9, r3
 80035b6:	4623      	mov	r3, r4
 80035b8:	eb18 0303 	adds.w	r3, r8, r3
 80035bc:	60bb      	str	r3, [r7, #8]
 80035be:	462b      	mov	r3, r5
 80035c0:	eb49 0303 	adc.w	r3, r9, r3
 80035c4:	60fb      	str	r3, [r7, #12]
 80035c6:	f04f 0200 	mov.w	r2, #0
 80035ca:	f04f 0300 	mov.w	r3, #0
 80035ce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80035d2:	4629      	mov	r1, r5
 80035d4:	024b      	lsls	r3, r1, #9
 80035d6:	4621      	mov	r1, r4
 80035d8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80035dc:	4621      	mov	r1, r4
 80035de:	024a      	lsls	r2, r1, #9
 80035e0:	4610      	mov	r0, r2
 80035e2:	4619      	mov	r1, r3
 80035e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035e6:	2200      	movs	r2, #0
 80035e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80035ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80035ec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80035f0:	f7fc fe4e 	bl	8000290 <__aeabi_uldivmod>
 80035f4:	4602      	mov	r2, r0
 80035f6:	460b      	mov	r3, r1
 80035f8:	4613      	mov	r3, r2
 80035fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035fc:	e058      	b.n	80036b0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035fe:	4b38      	ldr	r3, [pc, #224]	; (80036e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	099b      	lsrs	r3, r3, #6
 8003604:	2200      	movs	r2, #0
 8003606:	4618      	mov	r0, r3
 8003608:	4611      	mov	r1, r2
 800360a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800360e:	623b      	str	r3, [r7, #32]
 8003610:	2300      	movs	r3, #0
 8003612:	627b      	str	r3, [r7, #36]	; 0x24
 8003614:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003618:	4642      	mov	r2, r8
 800361a:	464b      	mov	r3, r9
 800361c:	f04f 0000 	mov.w	r0, #0
 8003620:	f04f 0100 	mov.w	r1, #0
 8003624:	0159      	lsls	r1, r3, #5
 8003626:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800362a:	0150      	lsls	r0, r2, #5
 800362c:	4602      	mov	r2, r0
 800362e:	460b      	mov	r3, r1
 8003630:	4641      	mov	r1, r8
 8003632:	ebb2 0a01 	subs.w	sl, r2, r1
 8003636:	4649      	mov	r1, r9
 8003638:	eb63 0b01 	sbc.w	fp, r3, r1
 800363c:	f04f 0200 	mov.w	r2, #0
 8003640:	f04f 0300 	mov.w	r3, #0
 8003644:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003648:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800364c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003650:	ebb2 040a 	subs.w	r4, r2, sl
 8003654:	eb63 050b 	sbc.w	r5, r3, fp
 8003658:	f04f 0200 	mov.w	r2, #0
 800365c:	f04f 0300 	mov.w	r3, #0
 8003660:	00eb      	lsls	r3, r5, #3
 8003662:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003666:	00e2      	lsls	r2, r4, #3
 8003668:	4614      	mov	r4, r2
 800366a:	461d      	mov	r5, r3
 800366c:	4643      	mov	r3, r8
 800366e:	18e3      	adds	r3, r4, r3
 8003670:	603b      	str	r3, [r7, #0]
 8003672:	464b      	mov	r3, r9
 8003674:	eb45 0303 	adc.w	r3, r5, r3
 8003678:	607b      	str	r3, [r7, #4]
 800367a:	f04f 0200 	mov.w	r2, #0
 800367e:	f04f 0300 	mov.w	r3, #0
 8003682:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003686:	4629      	mov	r1, r5
 8003688:	028b      	lsls	r3, r1, #10
 800368a:	4621      	mov	r1, r4
 800368c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003690:	4621      	mov	r1, r4
 8003692:	028a      	lsls	r2, r1, #10
 8003694:	4610      	mov	r0, r2
 8003696:	4619      	mov	r1, r3
 8003698:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800369a:	2200      	movs	r2, #0
 800369c:	61bb      	str	r3, [r7, #24]
 800369e:	61fa      	str	r2, [r7, #28]
 80036a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036a4:	f7fc fdf4 	bl	8000290 <__aeabi_uldivmod>
 80036a8:	4602      	mov	r2, r0
 80036aa:	460b      	mov	r3, r1
 80036ac:	4613      	mov	r3, r2
 80036ae:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80036b0:	4b0b      	ldr	r3, [pc, #44]	; (80036e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	0c1b      	lsrs	r3, r3, #16
 80036b6:	f003 0303 	and.w	r3, r3, #3
 80036ba:	3301      	adds	r3, #1
 80036bc:	005b      	lsls	r3, r3, #1
 80036be:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80036c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80036c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036c8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80036ca:	e002      	b.n	80036d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036cc:	4b05      	ldr	r3, [pc, #20]	; (80036e4 <HAL_RCC_GetSysClockFreq+0x204>)
 80036ce:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80036d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3750      	adds	r7, #80	; 0x50
 80036d8:	46bd      	mov	sp, r7
 80036da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036de:	bf00      	nop
 80036e0:	40023800 	.word	0x40023800
 80036e4:	00f42400 	.word	0x00f42400
 80036e8:	007a1200 	.word	0x007a1200

080036ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036ec:	b480      	push	{r7}
 80036ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036f0:	4b03      	ldr	r3, [pc, #12]	; (8003700 <HAL_RCC_GetHCLKFreq+0x14>)
 80036f2:	681b      	ldr	r3, [r3, #0]
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	20001194 	.word	0x20001194

08003704 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003708:	f7ff fff0 	bl	80036ec <HAL_RCC_GetHCLKFreq>
 800370c:	4602      	mov	r2, r0
 800370e:	4b05      	ldr	r3, [pc, #20]	; (8003724 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	0a9b      	lsrs	r3, r3, #10
 8003714:	f003 0307 	and.w	r3, r3, #7
 8003718:	4903      	ldr	r1, [pc, #12]	; (8003728 <HAL_RCC_GetPCLK1Freq+0x24>)
 800371a:	5ccb      	ldrb	r3, [r1, r3]
 800371c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003720:	4618      	mov	r0, r3
 8003722:	bd80      	pop	{r7, pc}
 8003724:	40023800 	.word	0x40023800
 8003728:	0800744c 	.word	0x0800744c

0800372c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003730:	f7ff ffdc 	bl	80036ec <HAL_RCC_GetHCLKFreq>
 8003734:	4602      	mov	r2, r0
 8003736:	4b05      	ldr	r3, [pc, #20]	; (800374c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	0b5b      	lsrs	r3, r3, #13
 800373c:	f003 0307 	and.w	r3, r3, #7
 8003740:	4903      	ldr	r1, [pc, #12]	; (8003750 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003742:	5ccb      	ldrb	r3, [r1, r3]
 8003744:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003748:	4618      	mov	r0, r3
 800374a:	bd80      	pop	{r7, pc}
 800374c:	40023800 	.word	0x40023800
 8003750:	0800744c 	.word	0x0800744c

08003754 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b082      	sub	sp, #8
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d101      	bne.n	8003766 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e041      	b.n	80037ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800376c:	b2db      	uxtb	r3, r3
 800376e:	2b00      	cmp	r3, #0
 8003770:	d106      	bne.n	8003780 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f7fd fd4c 	bl	8001218 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2202      	movs	r2, #2
 8003784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	3304      	adds	r3, #4
 8003790:	4619      	mov	r1, r3
 8003792:	4610      	mov	r0, r2
 8003794:	f001 f96e 	bl	8004a74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2201      	movs	r2, #1
 800379c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2201      	movs	r2, #1
 80037a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3708      	adds	r7, #8
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}

080037f2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80037f2:	b580      	push	{r7, lr}
 80037f4:	b082      	sub	sp, #8
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d101      	bne.n	8003804 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e041      	b.n	8003888 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800380a:	b2db      	uxtb	r3, r3
 800380c:	2b00      	cmp	r3, #0
 800380e:	d106      	bne.n	800381e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f000 f839 	bl	8003890 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2202      	movs	r2, #2
 8003822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	3304      	adds	r3, #4
 800382e:	4619      	mov	r1, r3
 8003830:	4610      	mov	r0, r2
 8003832:	f001 f91f 	bl	8004a74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2201      	movs	r2, #1
 800383a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2201      	movs	r2, #1
 8003842:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2201      	movs	r2, #1
 800384a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2201      	movs	r2, #1
 8003852:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2201      	movs	r2, #1
 800385a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2201      	movs	r2, #1
 8003862:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2201      	movs	r2, #1
 800386a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2201      	movs	r2, #1
 8003872:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2201      	movs	r2, #1
 800387a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2201      	movs	r2, #1
 8003882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003886:	2300      	movs	r3, #0
}
 8003888:	4618      	mov	r0, r3
 800388a:	3708      	adds	r7, #8
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}

08003890 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003898:	bf00      	nop
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b086      	sub	sp, #24
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	60b9      	str	r1, [r7, #8]
 80038ae:	607a      	str	r2, [r7, #4]
 80038b0:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80038b2:	2300      	movs	r3, #0
 80038b4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d109      	bne.n	80038d0 <HAL_TIM_PWM_Start_DMA+0x2c>
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	bf0c      	ite	eq
 80038c8:	2301      	moveq	r3, #1
 80038ca:	2300      	movne	r3, #0
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	e022      	b.n	8003916 <HAL_TIM_PWM_Start_DMA+0x72>
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	2b04      	cmp	r3, #4
 80038d4:	d109      	bne.n	80038ea <HAL_TIM_PWM_Start_DMA+0x46>
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	2b02      	cmp	r3, #2
 80038e0:	bf0c      	ite	eq
 80038e2:	2301      	moveq	r3, #1
 80038e4:	2300      	movne	r3, #0
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	e015      	b.n	8003916 <HAL_TIM_PWM_Start_DMA+0x72>
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	2b08      	cmp	r3, #8
 80038ee:	d109      	bne.n	8003904 <HAL_TIM_PWM_Start_DMA+0x60>
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	2b02      	cmp	r3, #2
 80038fa:	bf0c      	ite	eq
 80038fc:	2301      	moveq	r3, #1
 80038fe:	2300      	movne	r3, #0
 8003900:	b2db      	uxtb	r3, r3
 8003902:	e008      	b.n	8003916 <HAL_TIM_PWM_Start_DMA+0x72>
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800390a:	b2db      	uxtb	r3, r3
 800390c:	2b02      	cmp	r3, #2
 800390e:	bf0c      	ite	eq
 8003910:	2301      	moveq	r3, #1
 8003912:	2300      	movne	r3, #0
 8003914:	b2db      	uxtb	r3, r3
 8003916:	2b00      	cmp	r3, #0
 8003918:	d001      	beq.n	800391e <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 800391a:	2302      	movs	r3, #2
 800391c:	e171      	b.n	8003c02 <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d109      	bne.n	8003938 <HAL_TIM_PWM_Start_DMA+0x94>
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800392a:	b2db      	uxtb	r3, r3
 800392c:	2b01      	cmp	r3, #1
 800392e:	bf0c      	ite	eq
 8003930:	2301      	moveq	r3, #1
 8003932:	2300      	movne	r3, #0
 8003934:	b2db      	uxtb	r3, r3
 8003936:	e022      	b.n	800397e <HAL_TIM_PWM_Start_DMA+0xda>
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	2b04      	cmp	r3, #4
 800393c:	d109      	bne.n	8003952 <HAL_TIM_PWM_Start_DMA+0xae>
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003944:	b2db      	uxtb	r3, r3
 8003946:	2b01      	cmp	r3, #1
 8003948:	bf0c      	ite	eq
 800394a:	2301      	moveq	r3, #1
 800394c:	2300      	movne	r3, #0
 800394e:	b2db      	uxtb	r3, r3
 8003950:	e015      	b.n	800397e <HAL_TIM_PWM_Start_DMA+0xda>
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	2b08      	cmp	r3, #8
 8003956:	d109      	bne.n	800396c <HAL_TIM_PWM_Start_DMA+0xc8>
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800395e:	b2db      	uxtb	r3, r3
 8003960:	2b01      	cmp	r3, #1
 8003962:	bf0c      	ite	eq
 8003964:	2301      	moveq	r3, #1
 8003966:	2300      	movne	r3, #0
 8003968:	b2db      	uxtb	r3, r3
 800396a:	e008      	b.n	800397e <HAL_TIM_PWM_Start_DMA+0xda>
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003972:	b2db      	uxtb	r3, r3
 8003974:	2b01      	cmp	r3, #1
 8003976:	bf0c      	ite	eq
 8003978:	2301      	moveq	r3, #1
 800397a:	2300      	movne	r3, #0
 800397c:	b2db      	uxtb	r3, r3
 800397e:	2b00      	cmp	r3, #0
 8003980:	d024      	beq.n	80039cc <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d104      	bne.n	8003992 <HAL_TIM_PWM_Start_DMA+0xee>
 8003988:	887b      	ldrh	r3, [r7, #2]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d001      	beq.n	8003992 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e137      	b.n	8003c02 <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d104      	bne.n	80039a2 <HAL_TIM_PWM_Start_DMA+0xfe>
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2202      	movs	r2, #2
 800399c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039a0:	e016      	b.n	80039d0 <HAL_TIM_PWM_Start_DMA+0x12c>
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	2b04      	cmp	r3, #4
 80039a6:	d104      	bne.n	80039b2 <HAL_TIM_PWM_Start_DMA+0x10e>
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2202      	movs	r2, #2
 80039ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039b0:	e00e      	b.n	80039d0 <HAL_TIM_PWM_Start_DMA+0x12c>
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	2b08      	cmp	r3, #8
 80039b6:	d104      	bne.n	80039c2 <HAL_TIM_PWM_Start_DMA+0x11e>
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2202      	movs	r2, #2
 80039bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039c0:	e006      	b.n	80039d0 <HAL_TIM_PWM_Start_DMA+0x12c>
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2202      	movs	r2, #2
 80039c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80039ca:	e001      	b.n	80039d0 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e118      	b.n	8003c02 <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	2b0c      	cmp	r3, #12
 80039d4:	f200 80ae 	bhi.w	8003b34 <HAL_TIM_PWM_Start_DMA+0x290>
 80039d8:	a201      	add	r2, pc, #4	; (adr r2, 80039e0 <HAL_TIM_PWM_Start_DMA+0x13c>)
 80039da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039de:	bf00      	nop
 80039e0:	08003a15 	.word	0x08003a15
 80039e4:	08003b35 	.word	0x08003b35
 80039e8:	08003b35 	.word	0x08003b35
 80039ec:	08003b35 	.word	0x08003b35
 80039f0:	08003a5d 	.word	0x08003a5d
 80039f4:	08003b35 	.word	0x08003b35
 80039f8:	08003b35 	.word	0x08003b35
 80039fc:	08003b35 	.word	0x08003b35
 8003a00:	08003aa5 	.word	0x08003aa5
 8003a04:	08003b35 	.word	0x08003b35
 8003a08:	08003b35 	.word	0x08003b35
 8003a0c:	08003b35 	.word	0x08003b35
 8003a10:	08003aed 	.word	0x08003aed
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a18:	4a7c      	ldr	r2, [pc, #496]	; (8003c0c <HAL_TIM_PWM_Start_DMA+0x368>)
 8003a1a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a20:	4a7b      	ldr	r2, [pc, #492]	; (8003c10 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8003a22:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a28:	4a7a      	ldr	r2, [pc, #488]	; (8003c14 <HAL_TIM_PWM_Start_DMA+0x370>)
 8003a2a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003a30:	6879      	ldr	r1, [r7, #4]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	3334      	adds	r3, #52	; 0x34
 8003a38:	461a      	mov	r2, r3
 8003a3a:	887b      	ldrh	r3, [r7, #2]
 8003a3c:	f7fe f920 	bl	8001c80 <HAL_DMA_Start_IT>
 8003a40:	4603      	mov	r3, r0
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d001      	beq.n	8003a4a <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e0db      	b.n	8003c02 <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	68da      	ldr	r2, [r3, #12]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a58:	60da      	str	r2, [r3, #12]
      break;
 8003a5a:	e06e      	b.n	8003b3a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a60:	4a6a      	ldr	r2, [pc, #424]	; (8003c0c <HAL_TIM_PWM_Start_DMA+0x368>)
 8003a62:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a68:	4a69      	ldr	r2, [pc, #420]	; (8003c10 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8003a6a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a70:	4a68      	ldr	r2, [pc, #416]	; (8003c14 <HAL_TIM_PWM_Start_DMA+0x370>)
 8003a72:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003a78:	6879      	ldr	r1, [r7, #4]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	3338      	adds	r3, #56	; 0x38
 8003a80:	461a      	mov	r2, r3
 8003a82:	887b      	ldrh	r3, [r7, #2]
 8003a84:	f7fe f8fc 	bl	8001c80 <HAL_DMA_Start_IT>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d001      	beq.n	8003a92 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e0b7      	b.n	8003c02 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	68da      	ldr	r2, [r3, #12]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003aa0:	60da      	str	r2, [r3, #12]
      break;
 8003aa2:	e04a      	b.n	8003b3a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa8:	4a58      	ldr	r2, [pc, #352]	; (8003c0c <HAL_TIM_PWM_Start_DMA+0x368>)
 8003aaa:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab0:	4a57      	ldr	r2, [pc, #348]	; (8003c10 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8003ab2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab8:	4a56      	ldr	r2, [pc, #344]	; (8003c14 <HAL_TIM_PWM_Start_DMA+0x370>)
 8003aba:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003ac0:	6879      	ldr	r1, [r7, #4]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	333c      	adds	r3, #60	; 0x3c
 8003ac8:	461a      	mov	r2, r3
 8003aca:	887b      	ldrh	r3, [r7, #2]
 8003acc:	f7fe f8d8 	bl	8001c80 <HAL_DMA_Start_IT>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d001      	beq.n	8003ada <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e093      	b.n	8003c02 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	68da      	ldr	r2, [r3, #12]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ae8:	60da      	str	r2, [r3, #12]
      break;
 8003aea:	e026      	b.n	8003b3a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af0:	4a46      	ldr	r2, [pc, #280]	; (8003c0c <HAL_TIM_PWM_Start_DMA+0x368>)
 8003af2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af8:	4a45      	ldr	r2, [pc, #276]	; (8003c10 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8003afa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b00:	4a44      	ldr	r2, [pc, #272]	; (8003c14 <HAL_TIM_PWM_Start_DMA+0x370>)
 8003b02:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003b08:	6879      	ldr	r1, [r7, #4]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	3340      	adds	r3, #64	; 0x40
 8003b10:	461a      	mov	r2, r3
 8003b12:	887b      	ldrh	r3, [r7, #2]
 8003b14:	f7fe f8b4 	bl	8001c80 <HAL_DMA_Start_IT>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d001      	beq.n	8003b22 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e06f      	b.n	8003c02 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	68da      	ldr	r2, [r3, #12]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003b30:	60da      	str	r2, [r3, #12]
      break;
 8003b32:	e002      	b.n	8003b3a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	75fb      	strb	r3, [r7, #23]
      break;
 8003b38:	bf00      	nop
  }

  if (status == HAL_OK)
 8003b3a:	7dfb      	ldrb	r3, [r7, #23]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d15f      	bne.n	8003c00 <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	2201      	movs	r2, #1
 8003b46:	68b9      	ldr	r1, [r7, #8]
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f001 fc39 	bl	80053c0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a31      	ldr	r2, [pc, #196]	; (8003c18 <HAL_TIM_PWM_Start_DMA+0x374>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d004      	beq.n	8003b62 <HAL_TIM_PWM_Start_DMA+0x2be>
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a2f      	ldr	r2, [pc, #188]	; (8003c1c <HAL_TIM_PWM_Start_DMA+0x378>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d101      	bne.n	8003b66 <HAL_TIM_PWM_Start_DMA+0x2c2>
 8003b62:	2301      	movs	r3, #1
 8003b64:	e000      	b.n	8003b68 <HAL_TIM_PWM_Start_DMA+0x2c4>
 8003b66:	2300      	movs	r3, #0
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d007      	beq.n	8003b7c <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b7a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a25      	ldr	r2, [pc, #148]	; (8003c18 <HAL_TIM_PWM_Start_DMA+0x374>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d022      	beq.n	8003bcc <HAL_TIM_PWM_Start_DMA+0x328>
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b8e:	d01d      	beq.n	8003bcc <HAL_TIM_PWM_Start_DMA+0x328>
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a22      	ldr	r2, [pc, #136]	; (8003c20 <HAL_TIM_PWM_Start_DMA+0x37c>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d018      	beq.n	8003bcc <HAL_TIM_PWM_Start_DMA+0x328>
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a21      	ldr	r2, [pc, #132]	; (8003c24 <HAL_TIM_PWM_Start_DMA+0x380>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d013      	beq.n	8003bcc <HAL_TIM_PWM_Start_DMA+0x328>
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a1f      	ldr	r2, [pc, #124]	; (8003c28 <HAL_TIM_PWM_Start_DMA+0x384>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d00e      	beq.n	8003bcc <HAL_TIM_PWM_Start_DMA+0x328>
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a1a      	ldr	r2, [pc, #104]	; (8003c1c <HAL_TIM_PWM_Start_DMA+0x378>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d009      	beq.n	8003bcc <HAL_TIM_PWM_Start_DMA+0x328>
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a1b      	ldr	r2, [pc, #108]	; (8003c2c <HAL_TIM_PWM_Start_DMA+0x388>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d004      	beq.n	8003bcc <HAL_TIM_PWM_Start_DMA+0x328>
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a1a      	ldr	r2, [pc, #104]	; (8003c30 <HAL_TIM_PWM_Start_DMA+0x38c>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d111      	bne.n	8003bf0 <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	f003 0307 	and.w	r3, r3, #7
 8003bd6:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	2b06      	cmp	r3, #6
 8003bdc:	d010      	beq.n	8003c00 <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f042 0201 	orr.w	r2, r2, #1
 8003bec:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bee:	e007      	b.n	8003c00 <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f042 0201 	orr.w	r2, r2, #1
 8003bfe:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003c00:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3718      	adds	r7, #24
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	08004963 	.word	0x08004963
 8003c10:	08004a0b 	.word	0x08004a0b
 8003c14:	080048d1 	.word	0x080048d1
 8003c18:	40010000 	.word	0x40010000
 8003c1c:	40010400 	.word	0x40010400
 8003c20:	40000400 	.word	0x40000400
 8003c24:	40000800 	.word	0x40000800
 8003c28:	40000c00 	.word	0x40000c00
 8003c2c:	40014000 	.word	0x40014000
 8003c30:	40001800 	.word	0x40001800

08003c34 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b082      	sub	sp, #8
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d101      	bne.n	8003c46 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e041      	b.n	8003cca <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d106      	bne.n	8003c60 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f000 f839 	bl	8003cd2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2202      	movs	r2, #2
 8003c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	3304      	adds	r3, #4
 8003c70:	4619      	mov	r1, r3
 8003c72:	4610      	mov	r0, r2
 8003c74:	f000 fefe 	bl	8004a74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3708      	adds	r7, #8
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}

08003cd2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003cd2:	b480      	push	{r7}
 8003cd4:	b083      	sub	sp, #12
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003cda:	bf00      	nop
 8003cdc:	370c      	adds	r7, #12
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr
	...

08003ce8 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b084      	sub	sp, #16
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d104      	bne.n	8003d02 <HAL_TIM_IC_Start+0x1a>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	e013      	b.n	8003d2a <HAL_TIM_IC_Start+0x42>
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	2b04      	cmp	r3, #4
 8003d06:	d104      	bne.n	8003d12 <HAL_TIM_IC_Start+0x2a>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	e00b      	b.n	8003d2a <HAL_TIM_IC_Start+0x42>
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	2b08      	cmp	r3, #8
 8003d16:	d104      	bne.n	8003d22 <HAL_TIM_IC_Start+0x3a>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	e003      	b.n	8003d2a <HAL_TIM_IC_Start+0x42>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d104      	bne.n	8003d3c <HAL_TIM_IC_Start+0x54>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	e013      	b.n	8003d64 <HAL_TIM_IC_Start+0x7c>
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	2b04      	cmp	r3, #4
 8003d40:	d104      	bne.n	8003d4c <HAL_TIM_IC_Start+0x64>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	e00b      	b.n	8003d64 <HAL_TIM_IC_Start+0x7c>
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	2b08      	cmp	r3, #8
 8003d50:	d104      	bne.n	8003d5c <HAL_TIM_IC_Start+0x74>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	e003      	b.n	8003d64 <HAL_TIM_IC_Start+0x7c>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003d66:	7bfb      	ldrb	r3, [r7, #15]
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d102      	bne.n	8003d72 <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003d6c:	7bbb      	ldrb	r3, [r7, #14]
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d001      	beq.n	8003d76 <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e081      	b.n	8003e7a <HAL_TIM_IC_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d104      	bne.n	8003d86 <HAL_TIM_IC_Start+0x9e>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2202      	movs	r2, #2
 8003d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d84:	e013      	b.n	8003dae <HAL_TIM_IC_Start+0xc6>
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	2b04      	cmp	r3, #4
 8003d8a:	d104      	bne.n	8003d96 <HAL_TIM_IC_Start+0xae>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2202      	movs	r2, #2
 8003d90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d94:	e00b      	b.n	8003dae <HAL_TIM_IC_Start+0xc6>
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	2b08      	cmp	r3, #8
 8003d9a:	d104      	bne.n	8003da6 <HAL_TIM_IC_Start+0xbe>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2202      	movs	r2, #2
 8003da0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003da4:	e003      	b.n	8003dae <HAL_TIM_IC_Start+0xc6>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2202      	movs	r2, #2
 8003daa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d104      	bne.n	8003dbe <HAL_TIM_IC_Start+0xd6>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2202      	movs	r2, #2
 8003db8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003dbc:	e013      	b.n	8003de6 <HAL_TIM_IC_Start+0xfe>
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	2b04      	cmp	r3, #4
 8003dc2:	d104      	bne.n	8003dce <HAL_TIM_IC_Start+0xe6>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2202      	movs	r2, #2
 8003dc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003dcc:	e00b      	b.n	8003de6 <HAL_TIM_IC_Start+0xfe>
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	2b08      	cmp	r3, #8
 8003dd2:	d104      	bne.n	8003dde <HAL_TIM_IC_Start+0xf6>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2202      	movs	r2, #2
 8003dd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ddc:	e003      	b.n	8003de6 <HAL_TIM_IC_Start+0xfe>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2202      	movs	r2, #2
 8003de2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	2201      	movs	r2, #1
 8003dec:	6839      	ldr	r1, [r7, #0]
 8003dee:	4618      	mov	r0, r3
 8003df0:	f001 fae6 	bl	80053c0 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a22      	ldr	r2, [pc, #136]	; (8003e84 <HAL_TIM_IC_Start+0x19c>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d022      	beq.n	8003e44 <HAL_TIM_IC_Start+0x15c>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e06:	d01d      	beq.n	8003e44 <HAL_TIM_IC_Start+0x15c>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a1e      	ldr	r2, [pc, #120]	; (8003e88 <HAL_TIM_IC_Start+0x1a0>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d018      	beq.n	8003e44 <HAL_TIM_IC_Start+0x15c>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a1d      	ldr	r2, [pc, #116]	; (8003e8c <HAL_TIM_IC_Start+0x1a4>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d013      	beq.n	8003e44 <HAL_TIM_IC_Start+0x15c>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a1b      	ldr	r2, [pc, #108]	; (8003e90 <HAL_TIM_IC_Start+0x1a8>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d00e      	beq.n	8003e44 <HAL_TIM_IC_Start+0x15c>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a1a      	ldr	r2, [pc, #104]	; (8003e94 <HAL_TIM_IC_Start+0x1ac>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d009      	beq.n	8003e44 <HAL_TIM_IC_Start+0x15c>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a18      	ldr	r2, [pc, #96]	; (8003e98 <HAL_TIM_IC_Start+0x1b0>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d004      	beq.n	8003e44 <HAL_TIM_IC_Start+0x15c>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a17      	ldr	r2, [pc, #92]	; (8003e9c <HAL_TIM_IC_Start+0x1b4>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d111      	bne.n	8003e68 <HAL_TIM_IC_Start+0x180>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	f003 0307 	and.w	r3, r3, #7
 8003e4e:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	2b06      	cmp	r3, #6
 8003e54:	d010      	beq.n	8003e78 <HAL_TIM_IC_Start+0x190>
    {
      __HAL_TIM_ENABLE(htim);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f042 0201 	orr.w	r2, r2, #1
 8003e64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e66:	e007      	b.n	8003e78 <HAL_TIM_IC_Start+0x190>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f042 0201 	orr.w	r2, r2, #1
 8003e76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e78:	2300      	movs	r3, #0
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3710      	adds	r7, #16
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop
 8003e84:	40010000 	.word	0x40010000
 8003e88:	40000400 	.word	0x40000400
 8003e8c:	40000800 	.word	0x40000800
 8003e90:	40000c00 	.word	0x40000c00
 8003e94:	40010400 	.word	0x40010400
 8003e98:	40014000 	.word	0x40014000
 8003e9c:	40001800 	.word	0x40001800

08003ea0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b084      	sub	sp, #16
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d104      	bne.n	8003ebe <HAL_TIM_IC_Start_IT+0x1e>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	e013      	b.n	8003ee6 <HAL_TIM_IC_Start_IT+0x46>
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	2b04      	cmp	r3, #4
 8003ec2:	d104      	bne.n	8003ece <HAL_TIM_IC_Start_IT+0x2e>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	e00b      	b.n	8003ee6 <HAL_TIM_IC_Start_IT+0x46>
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	2b08      	cmp	r3, #8
 8003ed2:	d104      	bne.n	8003ede <HAL_TIM_IC_Start_IT+0x3e>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	e003      	b.n	8003ee6 <HAL_TIM_IC_Start_IT+0x46>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d104      	bne.n	8003ef8 <HAL_TIM_IC_Start_IT+0x58>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	e013      	b.n	8003f20 <HAL_TIM_IC_Start_IT+0x80>
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	2b04      	cmp	r3, #4
 8003efc:	d104      	bne.n	8003f08 <HAL_TIM_IC_Start_IT+0x68>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	e00b      	b.n	8003f20 <HAL_TIM_IC_Start_IT+0x80>
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	2b08      	cmp	r3, #8
 8003f0c:	d104      	bne.n	8003f18 <HAL_TIM_IC_Start_IT+0x78>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	e003      	b.n	8003f20 <HAL_TIM_IC_Start_IT+0x80>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003f22:	7bbb      	ldrb	r3, [r7, #14]
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d102      	bne.n	8003f2e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003f28:	7b7b      	ldrb	r3, [r7, #13]
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d001      	beq.n	8003f32 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e0cc      	b.n	80040cc <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d104      	bne.n	8003f42 <HAL_TIM_IC_Start_IT+0xa2>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2202      	movs	r2, #2
 8003f3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f40:	e013      	b.n	8003f6a <HAL_TIM_IC_Start_IT+0xca>
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	2b04      	cmp	r3, #4
 8003f46:	d104      	bne.n	8003f52 <HAL_TIM_IC_Start_IT+0xb2>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2202      	movs	r2, #2
 8003f4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f50:	e00b      	b.n	8003f6a <HAL_TIM_IC_Start_IT+0xca>
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	2b08      	cmp	r3, #8
 8003f56:	d104      	bne.n	8003f62 <HAL_TIM_IC_Start_IT+0xc2>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2202      	movs	r2, #2
 8003f5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f60:	e003      	b.n	8003f6a <HAL_TIM_IC_Start_IT+0xca>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2202      	movs	r2, #2
 8003f66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d104      	bne.n	8003f7a <HAL_TIM_IC_Start_IT+0xda>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2202      	movs	r2, #2
 8003f74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f78:	e013      	b.n	8003fa2 <HAL_TIM_IC_Start_IT+0x102>
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	2b04      	cmp	r3, #4
 8003f7e:	d104      	bne.n	8003f8a <HAL_TIM_IC_Start_IT+0xea>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2202      	movs	r2, #2
 8003f84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f88:	e00b      	b.n	8003fa2 <HAL_TIM_IC_Start_IT+0x102>
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	2b08      	cmp	r3, #8
 8003f8e:	d104      	bne.n	8003f9a <HAL_TIM_IC_Start_IT+0xfa>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2202      	movs	r2, #2
 8003f94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f98:	e003      	b.n	8003fa2 <HAL_TIM_IC_Start_IT+0x102>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2202      	movs	r2, #2
 8003f9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	2b0c      	cmp	r3, #12
 8003fa6:	d841      	bhi.n	800402c <HAL_TIM_IC_Start_IT+0x18c>
 8003fa8:	a201      	add	r2, pc, #4	; (adr r2, 8003fb0 <HAL_TIM_IC_Start_IT+0x110>)
 8003faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fae:	bf00      	nop
 8003fb0:	08003fe5 	.word	0x08003fe5
 8003fb4:	0800402d 	.word	0x0800402d
 8003fb8:	0800402d 	.word	0x0800402d
 8003fbc:	0800402d 	.word	0x0800402d
 8003fc0:	08003ff7 	.word	0x08003ff7
 8003fc4:	0800402d 	.word	0x0800402d
 8003fc8:	0800402d 	.word	0x0800402d
 8003fcc:	0800402d 	.word	0x0800402d
 8003fd0:	08004009 	.word	0x08004009
 8003fd4:	0800402d 	.word	0x0800402d
 8003fd8:	0800402d 	.word	0x0800402d
 8003fdc:	0800402d 	.word	0x0800402d
 8003fe0:	0800401b 	.word	0x0800401b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	68da      	ldr	r2, [r3, #12]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f042 0202 	orr.w	r2, r2, #2
 8003ff2:	60da      	str	r2, [r3, #12]
      break;
 8003ff4:	e01d      	b.n	8004032 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	68da      	ldr	r2, [r3, #12]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f042 0204 	orr.w	r2, r2, #4
 8004004:	60da      	str	r2, [r3, #12]
      break;
 8004006:	e014      	b.n	8004032 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	68da      	ldr	r2, [r3, #12]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f042 0208 	orr.w	r2, r2, #8
 8004016:	60da      	str	r2, [r3, #12]
      break;
 8004018:	e00b      	b.n	8004032 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	68da      	ldr	r2, [r3, #12]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f042 0210 	orr.w	r2, r2, #16
 8004028:	60da      	str	r2, [r3, #12]
      break;
 800402a:	e002      	b.n	8004032 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	73fb      	strb	r3, [r7, #15]
      break;
 8004030:	bf00      	nop
  }

  if (status == HAL_OK)
 8004032:	7bfb      	ldrb	r3, [r7, #15]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d148      	bne.n	80040ca <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	2201      	movs	r2, #1
 800403e:	6839      	ldr	r1, [r7, #0]
 8004040:	4618      	mov	r0, r3
 8004042:	f001 f9bd 	bl	80053c0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a22      	ldr	r2, [pc, #136]	; (80040d4 <HAL_TIM_IC_Start_IT+0x234>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d022      	beq.n	8004096 <HAL_TIM_IC_Start_IT+0x1f6>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004058:	d01d      	beq.n	8004096 <HAL_TIM_IC_Start_IT+0x1f6>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a1e      	ldr	r2, [pc, #120]	; (80040d8 <HAL_TIM_IC_Start_IT+0x238>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d018      	beq.n	8004096 <HAL_TIM_IC_Start_IT+0x1f6>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a1c      	ldr	r2, [pc, #112]	; (80040dc <HAL_TIM_IC_Start_IT+0x23c>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d013      	beq.n	8004096 <HAL_TIM_IC_Start_IT+0x1f6>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a1b      	ldr	r2, [pc, #108]	; (80040e0 <HAL_TIM_IC_Start_IT+0x240>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d00e      	beq.n	8004096 <HAL_TIM_IC_Start_IT+0x1f6>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a19      	ldr	r2, [pc, #100]	; (80040e4 <HAL_TIM_IC_Start_IT+0x244>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d009      	beq.n	8004096 <HAL_TIM_IC_Start_IT+0x1f6>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a18      	ldr	r2, [pc, #96]	; (80040e8 <HAL_TIM_IC_Start_IT+0x248>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d004      	beq.n	8004096 <HAL_TIM_IC_Start_IT+0x1f6>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a16      	ldr	r2, [pc, #88]	; (80040ec <HAL_TIM_IC_Start_IT+0x24c>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d111      	bne.n	80040ba <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	f003 0307 	and.w	r3, r3, #7
 80040a0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	2b06      	cmp	r3, #6
 80040a6:	d010      	beq.n	80040ca <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f042 0201 	orr.w	r2, r2, #1
 80040b6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040b8:	e007      	b.n	80040ca <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f042 0201 	orr.w	r2, r2, #1
 80040c8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80040ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3710      	adds	r7, #16
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	40010000 	.word	0x40010000
 80040d8:	40000400 	.word	0x40000400
 80040dc:	40000800 	.word	0x40000800
 80040e0:	40000c00 	.word	0x40000c00
 80040e4:	40010400 	.word	0x40010400
 80040e8:	40014000 	.word	0x40014000
 80040ec:	40001800 	.word	0x40001800

080040f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b082      	sub	sp, #8
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	691b      	ldr	r3, [r3, #16]
 80040fe:	f003 0302 	and.w	r3, r3, #2
 8004102:	2b02      	cmp	r3, #2
 8004104:	d122      	bne.n	800414c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	f003 0302 	and.w	r3, r3, #2
 8004110:	2b02      	cmp	r3, #2
 8004112:	d11b      	bne.n	800414c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f06f 0202 	mvn.w	r2, #2
 800411c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2201      	movs	r2, #1
 8004122:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	699b      	ldr	r3, [r3, #24]
 800412a:	f003 0303 	and.w	r3, r3, #3
 800412e:	2b00      	cmp	r3, #0
 8004130:	d003      	beq.n	800413a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f7fc fa58 	bl	80005e8 <HAL_TIM_IC_CaptureCallback>
 8004138:	e005      	b.n	8004146 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f000 fb96 	bl	800486c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f000 fb9d 	bl	8004880 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	691b      	ldr	r3, [r3, #16]
 8004152:	f003 0304 	and.w	r3, r3, #4
 8004156:	2b04      	cmp	r3, #4
 8004158:	d122      	bne.n	80041a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	f003 0304 	and.w	r3, r3, #4
 8004164:	2b04      	cmp	r3, #4
 8004166:	d11b      	bne.n	80041a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f06f 0204 	mvn.w	r2, #4
 8004170:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2202      	movs	r2, #2
 8004176:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	699b      	ldr	r3, [r3, #24]
 800417e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004182:	2b00      	cmp	r3, #0
 8004184:	d003      	beq.n	800418e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f7fc fa2e 	bl	80005e8 <HAL_TIM_IC_CaptureCallback>
 800418c:	e005      	b.n	800419a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f000 fb6c 	bl	800486c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f000 fb73 	bl	8004880 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	691b      	ldr	r3, [r3, #16]
 80041a6:	f003 0308 	and.w	r3, r3, #8
 80041aa:	2b08      	cmp	r3, #8
 80041ac:	d122      	bne.n	80041f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	f003 0308 	and.w	r3, r3, #8
 80041b8:	2b08      	cmp	r3, #8
 80041ba:	d11b      	bne.n	80041f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f06f 0208 	mvn.w	r2, #8
 80041c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2204      	movs	r2, #4
 80041ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	69db      	ldr	r3, [r3, #28]
 80041d2:	f003 0303 	and.w	r3, r3, #3
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d003      	beq.n	80041e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f7fc fa04 	bl	80005e8 <HAL_TIM_IC_CaptureCallback>
 80041e0:	e005      	b.n	80041ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f000 fb42 	bl	800486c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f000 fb49 	bl	8004880 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	691b      	ldr	r3, [r3, #16]
 80041fa:	f003 0310 	and.w	r3, r3, #16
 80041fe:	2b10      	cmp	r3, #16
 8004200:	d122      	bne.n	8004248 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	f003 0310 	and.w	r3, r3, #16
 800420c:	2b10      	cmp	r3, #16
 800420e:	d11b      	bne.n	8004248 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f06f 0210 	mvn.w	r2, #16
 8004218:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2208      	movs	r2, #8
 800421e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	69db      	ldr	r3, [r3, #28]
 8004226:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800422a:	2b00      	cmp	r3, #0
 800422c:	d003      	beq.n	8004236 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f7fc f9da 	bl	80005e8 <HAL_TIM_IC_CaptureCallback>
 8004234:	e005      	b.n	8004242 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f000 fb18 	bl	800486c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f000 fb1f 	bl	8004880 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	691b      	ldr	r3, [r3, #16]
 800424e:	f003 0301 	and.w	r3, r3, #1
 8004252:	2b01      	cmp	r3, #1
 8004254:	d10e      	bne.n	8004274 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	68db      	ldr	r3, [r3, #12]
 800425c:	f003 0301 	and.w	r3, r3, #1
 8004260:	2b01      	cmp	r3, #1
 8004262:	d107      	bne.n	8004274 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f06f 0201 	mvn.w	r2, #1
 800426c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f000 faf2 	bl	8004858 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	691b      	ldr	r3, [r3, #16]
 800427a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800427e:	2b80      	cmp	r3, #128	; 0x80
 8004280:	d10e      	bne.n	80042a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800428c:	2b80      	cmp	r3, #128	; 0x80
 800428e:	d107      	bne.n	80042a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004298:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f001 f98e 	bl	80055bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042aa:	2b40      	cmp	r3, #64	; 0x40
 80042ac:	d10e      	bne.n	80042cc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042b8:	2b40      	cmp	r3, #64	; 0x40
 80042ba:	d107      	bne.n	80042cc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80042c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f000 faee 	bl	80048a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	691b      	ldr	r3, [r3, #16]
 80042d2:	f003 0320 	and.w	r3, r3, #32
 80042d6:	2b20      	cmp	r3, #32
 80042d8:	d10e      	bne.n	80042f8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	f003 0320 	and.w	r3, r3, #32
 80042e4:	2b20      	cmp	r3, #32
 80042e6:	d107      	bne.n	80042f8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f06f 0220 	mvn.w	r2, #32
 80042f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f001 f958 	bl	80055a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80042f8:	bf00      	nop
 80042fa:	3708      	adds	r7, #8
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}

08004300 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b086      	sub	sp, #24
 8004304:	af00      	add	r7, sp, #0
 8004306:	60f8      	str	r0, [r7, #12]
 8004308:	60b9      	str	r1, [r7, #8]
 800430a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800430c:	2300      	movs	r3, #0
 800430e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004316:	2b01      	cmp	r3, #1
 8004318:	d101      	bne.n	800431e <HAL_TIM_IC_ConfigChannel+0x1e>
 800431a:	2302      	movs	r3, #2
 800431c:	e088      	b.n	8004430 <HAL_TIM_IC_ConfigChannel+0x130>
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2201      	movs	r2, #1
 8004322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d11b      	bne.n	8004364 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6818      	ldr	r0, [r3, #0]
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	6819      	ldr	r1, [r3, #0]
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	685a      	ldr	r2, [r3, #4]
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	f000 fe7c 	bl	8005038 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	699a      	ldr	r2, [r3, #24]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f022 020c 	bic.w	r2, r2, #12
 800434e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	6999      	ldr	r1, [r3, #24]
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	689a      	ldr	r2, [r3, #8]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	430a      	orrs	r2, r1
 8004360:	619a      	str	r2, [r3, #24]
 8004362:	e060      	b.n	8004426 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2b04      	cmp	r3, #4
 8004368:	d11c      	bne.n	80043a4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	6818      	ldr	r0, [r3, #0]
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	6819      	ldr	r1, [r3, #0]
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	685a      	ldr	r2, [r3, #4]
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	f000 ff00 	bl	800517e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	699a      	ldr	r2, [r3, #24]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800438c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	6999      	ldr	r1, [r3, #24]
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	021a      	lsls	r2, r3, #8
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	430a      	orrs	r2, r1
 80043a0:	619a      	str	r2, [r3, #24]
 80043a2:	e040      	b.n	8004426 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2b08      	cmp	r3, #8
 80043a8:	d11b      	bne.n	80043e2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	6818      	ldr	r0, [r3, #0]
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	6819      	ldr	r1, [r3, #0]
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	685a      	ldr	r2, [r3, #4]
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	f000 ff4d 	bl	8005258 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	69da      	ldr	r2, [r3, #28]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f022 020c 	bic.w	r2, r2, #12
 80043cc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	69d9      	ldr	r1, [r3, #28]
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	689a      	ldr	r2, [r3, #8]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	430a      	orrs	r2, r1
 80043de:	61da      	str	r2, [r3, #28]
 80043e0:	e021      	b.n	8004426 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2b0c      	cmp	r3, #12
 80043e6:	d11c      	bne.n	8004422 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6818      	ldr	r0, [r3, #0]
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	6819      	ldr	r1, [r3, #0]
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	685a      	ldr	r2, [r3, #4]
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	f000 ff6a 	bl	80052d0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	69da      	ldr	r2, [r3, #28]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800440a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	69d9      	ldr	r1, [r3, #28]
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	021a      	lsls	r2, r3, #8
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	430a      	orrs	r2, r1
 800441e:	61da      	str	r2, [r3, #28]
 8004420:	e001      	b.n	8004426 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2200      	movs	r2, #0
 800442a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800442e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004430:	4618      	mov	r0, r3
 8004432:	3718      	adds	r7, #24
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}

08004438 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b086      	sub	sp, #24
 800443c:	af00      	add	r7, sp, #0
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	60b9      	str	r1, [r7, #8]
 8004442:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004444:	2300      	movs	r3, #0
 8004446:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800444e:	2b01      	cmp	r3, #1
 8004450:	d101      	bne.n	8004456 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004452:	2302      	movs	r3, #2
 8004454:	e0ae      	b.n	80045b4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2201      	movs	r2, #1
 800445a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2b0c      	cmp	r3, #12
 8004462:	f200 809f 	bhi.w	80045a4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004466:	a201      	add	r2, pc, #4	; (adr r2, 800446c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800446c:	080044a1 	.word	0x080044a1
 8004470:	080045a5 	.word	0x080045a5
 8004474:	080045a5 	.word	0x080045a5
 8004478:	080045a5 	.word	0x080045a5
 800447c:	080044e1 	.word	0x080044e1
 8004480:	080045a5 	.word	0x080045a5
 8004484:	080045a5 	.word	0x080045a5
 8004488:	080045a5 	.word	0x080045a5
 800448c:	08004523 	.word	0x08004523
 8004490:	080045a5 	.word	0x080045a5
 8004494:	080045a5 	.word	0x080045a5
 8004498:	080045a5 	.word	0x080045a5
 800449c:	08004563 	.word	0x08004563
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	68b9      	ldr	r1, [r7, #8]
 80044a6:	4618      	mov	r0, r3
 80044a8:	f000 fb84 	bl	8004bb4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	699a      	ldr	r2, [r3, #24]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f042 0208 	orr.w	r2, r2, #8
 80044ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	699a      	ldr	r2, [r3, #24]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f022 0204 	bic.w	r2, r2, #4
 80044ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	6999      	ldr	r1, [r3, #24]
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	691a      	ldr	r2, [r3, #16]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	430a      	orrs	r2, r1
 80044dc:	619a      	str	r2, [r3, #24]
      break;
 80044de:	e064      	b.n	80045aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	68b9      	ldr	r1, [r7, #8]
 80044e6:	4618      	mov	r0, r3
 80044e8:	f000 fbd4 	bl	8004c94 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	699a      	ldr	r2, [r3, #24]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	699a      	ldr	r2, [r3, #24]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800450a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	6999      	ldr	r1, [r3, #24]
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	691b      	ldr	r3, [r3, #16]
 8004516:	021a      	lsls	r2, r3, #8
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	430a      	orrs	r2, r1
 800451e:	619a      	str	r2, [r3, #24]
      break;
 8004520:	e043      	b.n	80045aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	68b9      	ldr	r1, [r7, #8]
 8004528:	4618      	mov	r0, r3
 800452a:	f000 fc29 	bl	8004d80 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	69da      	ldr	r2, [r3, #28]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f042 0208 	orr.w	r2, r2, #8
 800453c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	69da      	ldr	r2, [r3, #28]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f022 0204 	bic.w	r2, r2, #4
 800454c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	69d9      	ldr	r1, [r3, #28]
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	691a      	ldr	r2, [r3, #16]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	430a      	orrs	r2, r1
 800455e:	61da      	str	r2, [r3, #28]
      break;
 8004560:	e023      	b.n	80045aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	68b9      	ldr	r1, [r7, #8]
 8004568:	4618      	mov	r0, r3
 800456a:	f000 fc7d 	bl	8004e68 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	69da      	ldr	r2, [r3, #28]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800457c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	69da      	ldr	r2, [r3, #28]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800458c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	69d9      	ldr	r1, [r3, #28]
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	691b      	ldr	r3, [r3, #16]
 8004598:	021a      	lsls	r2, r3, #8
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	430a      	orrs	r2, r1
 80045a0:	61da      	str	r2, [r3, #28]
      break;
 80045a2:	e002      	b.n	80045aa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	75fb      	strb	r3, [r7, #23]
      break;
 80045a8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80045b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3718      	adds	r7, #24
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}

080045bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045c6:	2300      	movs	r3, #0
 80045c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d101      	bne.n	80045d8 <HAL_TIM_ConfigClockSource+0x1c>
 80045d4:	2302      	movs	r3, #2
 80045d6:	e0b4      	b.n	8004742 <HAL_TIM_ConfigClockSource+0x186>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2202      	movs	r2, #2
 80045e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80045f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	68ba      	ldr	r2, [r7, #8]
 8004606:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004610:	d03e      	beq.n	8004690 <HAL_TIM_ConfigClockSource+0xd4>
 8004612:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004616:	f200 8087 	bhi.w	8004728 <HAL_TIM_ConfigClockSource+0x16c>
 800461a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800461e:	f000 8086 	beq.w	800472e <HAL_TIM_ConfigClockSource+0x172>
 8004622:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004626:	d87f      	bhi.n	8004728 <HAL_TIM_ConfigClockSource+0x16c>
 8004628:	2b70      	cmp	r3, #112	; 0x70
 800462a:	d01a      	beq.n	8004662 <HAL_TIM_ConfigClockSource+0xa6>
 800462c:	2b70      	cmp	r3, #112	; 0x70
 800462e:	d87b      	bhi.n	8004728 <HAL_TIM_ConfigClockSource+0x16c>
 8004630:	2b60      	cmp	r3, #96	; 0x60
 8004632:	d050      	beq.n	80046d6 <HAL_TIM_ConfigClockSource+0x11a>
 8004634:	2b60      	cmp	r3, #96	; 0x60
 8004636:	d877      	bhi.n	8004728 <HAL_TIM_ConfigClockSource+0x16c>
 8004638:	2b50      	cmp	r3, #80	; 0x50
 800463a:	d03c      	beq.n	80046b6 <HAL_TIM_ConfigClockSource+0xfa>
 800463c:	2b50      	cmp	r3, #80	; 0x50
 800463e:	d873      	bhi.n	8004728 <HAL_TIM_ConfigClockSource+0x16c>
 8004640:	2b40      	cmp	r3, #64	; 0x40
 8004642:	d058      	beq.n	80046f6 <HAL_TIM_ConfigClockSource+0x13a>
 8004644:	2b40      	cmp	r3, #64	; 0x40
 8004646:	d86f      	bhi.n	8004728 <HAL_TIM_ConfigClockSource+0x16c>
 8004648:	2b30      	cmp	r3, #48	; 0x30
 800464a:	d064      	beq.n	8004716 <HAL_TIM_ConfigClockSource+0x15a>
 800464c:	2b30      	cmp	r3, #48	; 0x30
 800464e:	d86b      	bhi.n	8004728 <HAL_TIM_ConfigClockSource+0x16c>
 8004650:	2b20      	cmp	r3, #32
 8004652:	d060      	beq.n	8004716 <HAL_TIM_ConfigClockSource+0x15a>
 8004654:	2b20      	cmp	r3, #32
 8004656:	d867      	bhi.n	8004728 <HAL_TIM_ConfigClockSource+0x16c>
 8004658:	2b00      	cmp	r3, #0
 800465a:	d05c      	beq.n	8004716 <HAL_TIM_ConfigClockSource+0x15a>
 800465c:	2b10      	cmp	r3, #16
 800465e:	d05a      	beq.n	8004716 <HAL_TIM_ConfigClockSource+0x15a>
 8004660:	e062      	b.n	8004728 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6818      	ldr	r0, [r3, #0]
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	6899      	ldr	r1, [r3, #8]
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	685a      	ldr	r2, [r3, #4]
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	f000 fe85 	bl	8005380 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004684:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	68ba      	ldr	r2, [r7, #8]
 800468c:	609a      	str	r2, [r3, #8]
      break;
 800468e:	e04f      	b.n	8004730 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6818      	ldr	r0, [r3, #0]
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	6899      	ldr	r1, [r3, #8]
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	685a      	ldr	r2, [r3, #4]
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	f000 fe6e 	bl	8005380 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	689a      	ldr	r2, [r3, #8]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046b2:	609a      	str	r2, [r3, #8]
      break;
 80046b4:	e03c      	b.n	8004730 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6818      	ldr	r0, [r3, #0]
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	6859      	ldr	r1, [r3, #4]
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	461a      	mov	r2, r3
 80046c4:	f000 fd2c 	bl	8005120 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2150      	movs	r1, #80	; 0x50
 80046ce:	4618      	mov	r0, r3
 80046d0:	f000 fe3b 	bl	800534a <TIM_ITRx_SetConfig>
      break;
 80046d4:	e02c      	b.n	8004730 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6818      	ldr	r0, [r3, #0]
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	6859      	ldr	r1, [r3, #4]
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	461a      	mov	r2, r3
 80046e4:	f000 fd88 	bl	80051f8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2160      	movs	r1, #96	; 0x60
 80046ee:	4618      	mov	r0, r3
 80046f0:	f000 fe2b 	bl	800534a <TIM_ITRx_SetConfig>
      break;
 80046f4:	e01c      	b.n	8004730 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6818      	ldr	r0, [r3, #0]
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	6859      	ldr	r1, [r3, #4]
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	461a      	mov	r2, r3
 8004704:	f000 fd0c 	bl	8005120 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2140      	movs	r1, #64	; 0x40
 800470e:	4618      	mov	r0, r3
 8004710:	f000 fe1b 	bl	800534a <TIM_ITRx_SetConfig>
      break;
 8004714:	e00c      	b.n	8004730 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4619      	mov	r1, r3
 8004720:	4610      	mov	r0, r2
 8004722:	f000 fe12 	bl	800534a <TIM_ITRx_SetConfig>
      break;
 8004726:	e003      	b.n	8004730 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	73fb      	strb	r3, [r7, #15]
      break;
 800472c:	e000      	b.n	8004730 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800472e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004740:	7bfb      	ldrb	r3, [r7, #15]
}
 8004742:	4618      	mov	r0, r3
 8004744:	3710      	adds	r7, #16
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}

0800474a <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800474a:	b580      	push	{r7, lr}
 800474c:	b082      	sub	sp, #8
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]
 8004752:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800475a:	2b01      	cmp	r3, #1
 800475c:	d101      	bne.n	8004762 <HAL_TIM_SlaveConfigSynchro+0x18>
 800475e:	2302      	movs	r3, #2
 8004760:	e031      	b.n	80047c6 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2201      	movs	r2, #1
 8004766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2202      	movs	r2, #2
 800476e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004772:	6839      	ldr	r1, [r7, #0]
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f000 fbcd 	bl	8004f14 <TIM_SlaveTimer_SetConfig>
 800477a:	4603      	mov	r3, r0
 800477c:	2b00      	cmp	r3, #0
 800477e:	d009      	beq.n	8004794 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	e018      	b.n	80047c6 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	68da      	ldr	r2, [r3, #12]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047a2:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	68da      	ldr	r2, [r3, #12]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80047b2:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047c4:	2300      	movs	r3, #0
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3708      	adds	r7, #8
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
	...

080047d0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b085      	sub	sp, #20
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80047da:	2300      	movs	r3, #0
 80047dc:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	2b0c      	cmp	r3, #12
 80047e2:	d831      	bhi.n	8004848 <HAL_TIM_ReadCapturedValue+0x78>
 80047e4:	a201      	add	r2, pc, #4	; (adr r2, 80047ec <HAL_TIM_ReadCapturedValue+0x1c>)
 80047e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ea:	bf00      	nop
 80047ec:	08004821 	.word	0x08004821
 80047f0:	08004849 	.word	0x08004849
 80047f4:	08004849 	.word	0x08004849
 80047f8:	08004849 	.word	0x08004849
 80047fc:	0800482b 	.word	0x0800482b
 8004800:	08004849 	.word	0x08004849
 8004804:	08004849 	.word	0x08004849
 8004808:	08004849 	.word	0x08004849
 800480c:	08004835 	.word	0x08004835
 8004810:	08004849 	.word	0x08004849
 8004814:	08004849 	.word	0x08004849
 8004818:	08004849 	.word	0x08004849
 800481c:	0800483f 	.word	0x0800483f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004826:	60fb      	str	r3, [r7, #12]

      break;
 8004828:	e00f      	b.n	800484a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004830:	60fb      	str	r3, [r7, #12]

      break;
 8004832:	e00a      	b.n	800484a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800483a:	60fb      	str	r3, [r7, #12]

      break;
 800483c:	e005      	b.n	800484a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004844:	60fb      	str	r3, [r7, #12]

      break;
 8004846:	e000      	b.n	800484a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004848:	bf00      	nop
  }

  return tmpreg;
 800484a:	68fb      	ldr	r3, [r7, #12]
}
 800484c:	4618      	mov	r0, r3
 800484e:	3714      	adds	r7, #20
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr

08004858 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004858:	b480      	push	{r7}
 800485a:	b083      	sub	sp, #12
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004860:	bf00      	nop
 8004862:	370c      	adds	r7, #12
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr

0800486c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004874:	bf00      	nop
 8004876:	370c      	adds	r7, #12
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004888:	bf00      	nop
 800488a:	370c      	adds	r7, #12
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004894:	b480      	push	{r7}
 8004896:	b083      	sub	sp, #12
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800489c:	bf00      	nop
 800489e:	370c      	adds	r7, #12
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr

080048a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048b0:	bf00      	nop
 80048b2:	370c      	adds	r7, #12
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80048c4:	bf00      	nop
 80048c6:	370c      	adds	r7, #12
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr

080048d0 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b084      	sub	sp, #16
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048dc:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d107      	bne.n	80048f8 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2201      	movs	r2, #1
 80048ec:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2201      	movs	r2, #1
 80048f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048f6:	e02a      	b.n	800494e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	429a      	cmp	r2, r3
 8004900:	d107      	bne.n	8004912 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2202      	movs	r2, #2
 8004906:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2201      	movs	r2, #1
 800490c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004910:	e01d      	b.n	800494e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	429a      	cmp	r2, r3
 800491a:	d107      	bne.n	800492c <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2204      	movs	r2, #4
 8004920:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2201      	movs	r2, #1
 8004926:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800492a:	e010      	b.n	800494e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004930:	687a      	ldr	r2, [r7, #4]
 8004932:	429a      	cmp	r2, r3
 8004934:	d107      	bne.n	8004946 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2208      	movs	r2, #8
 800493a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004944:	e003      	b.n	800494e <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2201      	movs	r2, #1
 800494a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800494e:	68f8      	ldr	r0, [r7, #12]
 8004950:	f7ff ffb4 	bl	80048bc <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2200      	movs	r2, #0
 8004958:	771a      	strb	r2, [r3, #28]
}
 800495a:	bf00      	nop
 800495c:	3710      	adds	r7, #16
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}

08004962 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8004962:	b580      	push	{r7, lr}
 8004964:	b084      	sub	sp, #16
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800496e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004974:	687a      	ldr	r2, [r7, #4]
 8004976:	429a      	cmp	r2, r3
 8004978:	d10b      	bne.n	8004992 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2201      	movs	r2, #1
 800497e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	69db      	ldr	r3, [r3, #28]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d136      	bne.n	80049f6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2201      	movs	r2, #1
 800498c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004990:	e031      	b.n	80049f6 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004996:	687a      	ldr	r2, [r7, #4]
 8004998:	429a      	cmp	r2, r3
 800499a:	d10b      	bne.n	80049b4 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2202      	movs	r2, #2
 80049a0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	69db      	ldr	r3, [r3, #28]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d125      	bne.n	80049f6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2201      	movs	r2, #1
 80049ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049b2:	e020      	b.n	80049f6 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b8:	687a      	ldr	r2, [r7, #4]
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d10b      	bne.n	80049d6 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2204      	movs	r2, #4
 80049c2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	69db      	ldr	r3, [r3, #28]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d114      	bne.n	80049f6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049d4:	e00f      	b.n	80049f6 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	429a      	cmp	r2, r3
 80049de:	d10a      	bne.n	80049f6 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2208      	movs	r2, #8
 80049e4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	69db      	ldr	r3, [r3, #28]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d103      	bne.n	80049f6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2201      	movs	r2, #1
 80049f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049f6:	68f8      	ldr	r0, [r7, #12]
 80049f8:	f7ff ff42 	bl	8004880 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2200      	movs	r2, #0
 8004a00:	771a      	strb	r2, [r3, #28]
}
 8004a02:	bf00      	nop
 8004a04:	3710      	adds	r7, #16
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}

08004a0a <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004a0a:	b580      	push	{r7, lr}
 8004a0c:	b084      	sub	sp, #16
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a16:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d103      	bne.n	8004a2a <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2201      	movs	r2, #1
 8004a26:	771a      	strb	r2, [r3, #28]
 8004a28:	e019      	b.n	8004a5e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d103      	bne.n	8004a3c <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2202      	movs	r2, #2
 8004a38:	771a      	strb	r2, [r3, #28]
 8004a3a:	e010      	b.n	8004a5e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d103      	bne.n	8004a4e <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2204      	movs	r2, #4
 8004a4a:	771a      	strb	r2, [r3, #28]
 8004a4c:	e007      	b.n	8004a5e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d102      	bne.n	8004a5e <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2208      	movs	r2, #8
 8004a5c:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004a5e:	68f8      	ldr	r0, [r7, #12]
 8004a60:	f7ff ff18 	bl	8004894 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2200      	movs	r2, #0
 8004a68:	771a      	strb	r2, [r3, #28]
}
 8004a6a:	bf00      	nop
 8004a6c:	3710      	adds	r7, #16
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
	...

08004a74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b085      	sub	sp, #20
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	4a40      	ldr	r2, [pc, #256]	; (8004b88 <TIM_Base_SetConfig+0x114>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d013      	beq.n	8004ab4 <TIM_Base_SetConfig+0x40>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a92:	d00f      	beq.n	8004ab4 <TIM_Base_SetConfig+0x40>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	4a3d      	ldr	r2, [pc, #244]	; (8004b8c <TIM_Base_SetConfig+0x118>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d00b      	beq.n	8004ab4 <TIM_Base_SetConfig+0x40>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	4a3c      	ldr	r2, [pc, #240]	; (8004b90 <TIM_Base_SetConfig+0x11c>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d007      	beq.n	8004ab4 <TIM_Base_SetConfig+0x40>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	4a3b      	ldr	r2, [pc, #236]	; (8004b94 <TIM_Base_SetConfig+0x120>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d003      	beq.n	8004ab4 <TIM_Base_SetConfig+0x40>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	4a3a      	ldr	r2, [pc, #232]	; (8004b98 <TIM_Base_SetConfig+0x124>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d108      	bne.n	8004ac6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	68fa      	ldr	r2, [r7, #12]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	4a2f      	ldr	r2, [pc, #188]	; (8004b88 <TIM_Base_SetConfig+0x114>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d02b      	beq.n	8004b26 <TIM_Base_SetConfig+0xb2>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ad4:	d027      	beq.n	8004b26 <TIM_Base_SetConfig+0xb2>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4a2c      	ldr	r2, [pc, #176]	; (8004b8c <TIM_Base_SetConfig+0x118>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d023      	beq.n	8004b26 <TIM_Base_SetConfig+0xb2>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	4a2b      	ldr	r2, [pc, #172]	; (8004b90 <TIM_Base_SetConfig+0x11c>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d01f      	beq.n	8004b26 <TIM_Base_SetConfig+0xb2>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	4a2a      	ldr	r2, [pc, #168]	; (8004b94 <TIM_Base_SetConfig+0x120>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d01b      	beq.n	8004b26 <TIM_Base_SetConfig+0xb2>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4a29      	ldr	r2, [pc, #164]	; (8004b98 <TIM_Base_SetConfig+0x124>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d017      	beq.n	8004b26 <TIM_Base_SetConfig+0xb2>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4a28      	ldr	r2, [pc, #160]	; (8004b9c <TIM_Base_SetConfig+0x128>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d013      	beq.n	8004b26 <TIM_Base_SetConfig+0xb2>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	4a27      	ldr	r2, [pc, #156]	; (8004ba0 <TIM_Base_SetConfig+0x12c>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d00f      	beq.n	8004b26 <TIM_Base_SetConfig+0xb2>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4a26      	ldr	r2, [pc, #152]	; (8004ba4 <TIM_Base_SetConfig+0x130>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d00b      	beq.n	8004b26 <TIM_Base_SetConfig+0xb2>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4a25      	ldr	r2, [pc, #148]	; (8004ba8 <TIM_Base_SetConfig+0x134>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d007      	beq.n	8004b26 <TIM_Base_SetConfig+0xb2>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4a24      	ldr	r2, [pc, #144]	; (8004bac <TIM_Base_SetConfig+0x138>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d003      	beq.n	8004b26 <TIM_Base_SetConfig+0xb2>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4a23      	ldr	r2, [pc, #140]	; (8004bb0 <TIM_Base_SetConfig+0x13c>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d108      	bne.n	8004b38 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	68db      	ldr	r3, [r3, #12]
 8004b32:	68fa      	ldr	r2, [r7, #12]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	695b      	ldr	r3, [r3, #20]
 8004b42:	4313      	orrs	r3, r2
 8004b44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	68fa      	ldr	r2, [r7, #12]
 8004b4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	689a      	ldr	r2, [r3, #8]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	4a0a      	ldr	r2, [pc, #40]	; (8004b88 <TIM_Base_SetConfig+0x114>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d003      	beq.n	8004b6c <TIM_Base_SetConfig+0xf8>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	4a0c      	ldr	r2, [pc, #48]	; (8004b98 <TIM_Base_SetConfig+0x124>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d103      	bne.n	8004b74 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	691a      	ldr	r2, [r3, #16]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	615a      	str	r2, [r3, #20]
}
 8004b7a:	bf00      	nop
 8004b7c:	3714      	adds	r7, #20
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr
 8004b86:	bf00      	nop
 8004b88:	40010000 	.word	0x40010000
 8004b8c:	40000400 	.word	0x40000400
 8004b90:	40000800 	.word	0x40000800
 8004b94:	40000c00 	.word	0x40000c00
 8004b98:	40010400 	.word	0x40010400
 8004b9c:	40014000 	.word	0x40014000
 8004ba0:	40014400 	.word	0x40014400
 8004ba4:	40014800 	.word	0x40014800
 8004ba8:	40001800 	.word	0x40001800
 8004bac:	40001c00 	.word	0x40001c00
 8004bb0:	40002000 	.word	0x40002000

08004bb4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b087      	sub	sp, #28
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6a1b      	ldr	r3, [r3, #32]
 8004bc2:	f023 0201 	bic.w	r2, r3, #1
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6a1b      	ldr	r3, [r3, #32]
 8004bce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	699b      	ldr	r3, [r3, #24]
 8004bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004be2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f023 0303 	bic.w	r3, r3, #3
 8004bea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	68fa      	ldr	r2, [r7, #12]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	f023 0302 	bic.w	r3, r3, #2
 8004bfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	697a      	ldr	r2, [r7, #20]
 8004c04:	4313      	orrs	r3, r2
 8004c06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	4a20      	ldr	r2, [pc, #128]	; (8004c8c <TIM_OC1_SetConfig+0xd8>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d003      	beq.n	8004c18 <TIM_OC1_SetConfig+0x64>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	4a1f      	ldr	r2, [pc, #124]	; (8004c90 <TIM_OC1_SetConfig+0xdc>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d10c      	bne.n	8004c32 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	f023 0308 	bic.w	r3, r3, #8
 8004c1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	697a      	ldr	r2, [r7, #20]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	f023 0304 	bic.w	r3, r3, #4
 8004c30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	4a15      	ldr	r2, [pc, #84]	; (8004c8c <TIM_OC1_SetConfig+0xd8>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d003      	beq.n	8004c42 <TIM_OC1_SetConfig+0x8e>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	4a14      	ldr	r2, [pc, #80]	; (8004c90 <TIM_OC1_SetConfig+0xdc>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d111      	bne.n	8004c66 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	695b      	ldr	r3, [r3, #20]
 8004c56:	693a      	ldr	r2, [r7, #16]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	699b      	ldr	r3, [r3, #24]
 8004c60:	693a      	ldr	r2, [r7, #16]
 8004c62:	4313      	orrs	r3, r2
 8004c64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	693a      	ldr	r2, [r7, #16]
 8004c6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	68fa      	ldr	r2, [r7, #12]
 8004c70:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	685a      	ldr	r2, [r3, #4]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	697a      	ldr	r2, [r7, #20]
 8004c7e:	621a      	str	r2, [r3, #32]
}
 8004c80:	bf00      	nop
 8004c82:	371c      	adds	r7, #28
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr
 8004c8c:	40010000 	.word	0x40010000
 8004c90:	40010400 	.word	0x40010400

08004c94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b087      	sub	sp, #28
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
 8004c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a1b      	ldr	r3, [r3, #32]
 8004ca2:	f023 0210 	bic.w	r2, r3, #16
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a1b      	ldr	r3, [r3, #32]
 8004cae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	699b      	ldr	r3, [r3, #24]
 8004cba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	021b      	lsls	r3, r3, #8
 8004cd2:	68fa      	ldr	r2, [r7, #12]
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	f023 0320 	bic.w	r3, r3, #32
 8004cde:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	011b      	lsls	r3, r3, #4
 8004ce6:	697a      	ldr	r2, [r7, #20]
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	4a22      	ldr	r2, [pc, #136]	; (8004d78 <TIM_OC2_SetConfig+0xe4>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d003      	beq.n	8004cfc <TIM_OC2_SetConfig+0x68>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	4a21      	ldr	r2, [pc, #132]	; (8004d7c <TIM_OC2_SetConfig+0xe8>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d10d      	bne.n	8004d18 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	011b      	lsls	r3, r3, #4
 8004d0a:	697a      	ldr	r2, [r7, #20]
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d16:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	4a17      	ldr	r2, [pc, #92]	; (8004d78 <TIM_OC2_SetConfig+0xe4>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d003      	beq.n	8004d28 <TIM_OC2_SetConfig+0x94>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	4a16      	ldr	r2, [pc, #88]	; (8004d7c <TIM_OC2_SetConfig+0xe8>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d113      	bne.n	8004d50 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d2e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d36:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	695b      	ldr	r3, [r3, #20]
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	693a      	ldr	r2, [r7, #16]
 8004d40:	4313      	orrs	r3, r2
 8004d42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	699b      	ldr	r3, [r3, #24]
 8004d48:	009b      	lsls	r3, r3, #2
 8004d4a:	693a      	ldr	r2, [r7, #16]
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	693a      	ldr	r2, [r7, #16]
 8004d54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	68fa      	ldr	r2, [r7, #12]
 8004d5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	685a      	ldr	r2, [r3, #4]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	697a      	ldr	r2, [r7, #20]
 8004d68:	621a      	str	r2, [r3, #32]
}
 8004d6a:	bf00      	nop
 8004d6c:	371c      	adds	r7, #28
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr
 8004d76:	bf00      	nop
 8004d78:	40010000 	.word	0x40010000
 8004d7c:	40010400 	.word	0x40010400

08004d80 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b087      	sub	sp, #28
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6a1b      	ldr	r3, [r3, #32]
 8004d8e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6a1b      	ldr	r3, [r3, #32]
 8004d9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	69db      	ldr	r3, [r3, #28]
 8004da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f023 0303 	bic.w	r3, r3, #3
 8004db6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	68fa      	ldr	r2, [r7, #12]
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004dc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	021b      	lsls	r3, r3, #8
 8004dd0:	697a      	ldr	r2, [r7, #20]
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	4a21      	ldr	r2, [pc, #132]	; (8004e60 <TIM_OC3_SetConfig+0xe0>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d003      	beq.n	8004de6 <TIM_OC3_SetConfig+0x66>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4a20      	ldr	r2, [pc, #128]	; (8004e64 <TIM_OC3_SetConfig+0xe4>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d10d      	bne.n	8004e02 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004dec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	021b      	lsls	r3, r3, #8
 8004df4:	697a      	ldr	r2, [r7, #20]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	4a16      	ldr	r2, [pc, #88]	; (8004e60 <TIM_OC3_SetConfig+0xe0>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d003      	beq.n	8004e12 <TIM_OC3_SetConfig+0x92>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4a15      	ldr	r2, [pc, #84]	; (8004e64 <TIM_OC3_SetConfig+0xe4>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d113      	bne.n	8004e3a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	695b      	ldr	r3, [r3, #20]
 8004e26:	011b      	lsls	r3, r3, #4
 8004e28:	693a      	ldr	r2, [r7, #16]
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	699b      	ldr	r3, [r3, #24]
 8004e32:	011b      	lsls	r3, r3, #4
 8004e34:	693a      	ldr	r2, [r7, #16]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	693a      	ldr	r2, [r7, #16]
 8004e3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	68fa      	ldr	r2, [r7, #12]
 8004e44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	685a      	ldr	r2, [r3, #4]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	697a      	ldr	r2, [r7, #20]
 8004e52:	621a      	str	r2, [r3, #32]
}
 8004e54:	bf00      	nop
 8004e56:	371c      	adds	r7, #28
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr
 8004e60:	40010000 	.word	0x40010000
 8004e64:	40010400 	.word	0x40010400

08004e68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b087      	sub	sp, #28
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6a1b      	ldr	r3, [r3, #32]
 8004e76:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6a1b      	ldr	r3, [r3, #32]
 8004e82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	69db      	ldr	r3, [r3, #28]
 8004e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	021b      	lsls	r3, r3, #8
 8004ea6:	68fa      	ldr	r2, [r7, #12]
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004eb2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	031b      	lsls	r3, r3, #12
 8004eba:	693a      	ldr	r2, [r7, #16]
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	4a12      	ldr	r2, [pc, #72]	; (8004f0c <TIM_OC4_SetConfig+0xa4>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d003      	beq.n	8004ed0 <TIM_OC4_SetConfig+0x68>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	4a11      	ldr	r2, [pc, #68]	; (8004f10 <TIM_OC4_SetConfig+0xa8>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d109      	bne.n	8004ee4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ed6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	695b      	ldr	r3, [r3, #20]
 8004edc:	019b      	lsls	r3, r3, #6
 8004ede:	697a      	ldr	r2, [r7, #20]
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	697a      	ldr	r2, [r7, #20]
 8004ee8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	68fa      	ldr	r2, [r7, #12]
 8004eee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	685a      	ldr	r2, [r3, #4]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	693a      	ldr	r2, [r7, #16]
 8004efc:	621a      	str	r2, [r3, #32]
}
 8004efe:	bf00      	nop
 8004f00:	371c      	adds	r7, #28
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr
 8004f0a:	bf00      	nop
 8004f0c:	40010000 	.word	0x40010000
 8004f10:	40010400 	.word	0x40010400

08004f14 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b086      	sub	sp, #24
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f30:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	693a      	ldr	r2, [r7, #16]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	f023 0307 	bic.w	r3, r3, #7
 8004f42:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	693a      	ldr	r2, [r7, #16]
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	693a      	ldr	r2, [r7, #16]
 8004f54:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	2b70      	cmp	r3, #112	; 0x70
 8004f5c:	d01a      	beq.n	8004f94 <TIM_SlaveTimer_SetConfig+0x80>
 8004f5e:	2b70      	cmp	r3, #112	; 0x70
 8004f60:	d860      	bhi.n	8005024 <TIM_SlaveTimer_SetConfig+0x110>
 8004f62:	2b60      	cmp	r3, #96	; 0x60
 8004f64:	d054      	beq.n	8005010 <TIM_SlaveTimer_SetConfig+0xfc>
 8004f66:	2b60      	cmp	r3, #96	; 0x60
 8004f68:	d85c      	bhi.n	8005024 <TIM_SlaveTimer_SetConfig+0x110>
 8004f6a:	2b50      	cmp	r3, #80	; 0x50
 8004f6c:	d046      	beq.n	8004ffc <TIM_SlaveTimer_SetConfig+0xe8>
 8004f6e:	2b50      	cmp	r3, #80	; 0x50
 8004f70:	d858      	bhi.n	8005024 <TIM_SlaveTimer_SetConfig+0x110>
 8004f72:	2b40      	cmp	r3, #64	; 0x40
 8004f74:	d019      	beq.n	8004faa <TIM_SlaveTimer_SetConfig+0x96>
 8004f76:	2b40      	cmp	r3, #64	; 0x40
 8004f78:	d854      	bhi.n	8005024 <TIM_SlaveTimer_SetConfig+0x110>
 8004f7a:	2b30      	cmp	r3, #48	; 0x30
 8004f7c:	d055      	beq.n	800502a <TIM_SlaveTimer_SetConfig+0x116>
 8004f7e:	2b30      	cmp	r3, #48	; 0x30
 8004f80:	d850      	bhi.n	8005024 <TIM_SlaveTimer_SetConfig+0x110>
 8004f82:	2b20      	cmp	r3, #32
 8004f84:	d051      	beq.n	800502a <TIM_SlaveTimer_SetConfig+0x116>
 8004f86:	2b20      	cmp	r3, #32
 8004f88:	d84c      	bhi.n	8005024 <TIM_SlaveTimer_SetConfig+0x110>
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d04d      	beq.n	800502a <TIM_SlaveTimer_SetConfig+0x116>
 8004f8e:	2b10      	cmp	r3, #16
 8004f90:	d04b      	beq.n	800502a <TIM_SlaveTimer_SetConfig+0x116>
 8004f92:	e047      	b.n	8005024 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6818      	ldr	r0, [r3, #0]
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	68d9      	ldr	r1, [r3, #12]
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	689a      	ldr	r2, [r3, #8]
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	691b      	ldr	r3, [r3, #16]
 8004fa4:	f000 f9ec 	bl	8005380 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8004fa8:	e040      	b.n	800502c <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	2b05      	cmp	r3, #5
 8004fb0:	d101      	bne.n	8004fb6 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e03b      	b.n	800502e <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	6a1b      	ldr	r3, [r3, #32]
 8004fbc:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	6a1a      	ldr	r2, [r3, #32]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f022 0201 	bic.w	r2, r2, #1
 8004fcc:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	699b      	ldr	r3, [r3, #24]
 8004fd4:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004fdc:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	691b      	ldr	r3, [r3, #16]
 8004fe2:	011b      	lsls	r3, r3, #4
 8004fe4:	68ba      	ldr	r2, [r7, #8]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	68ba      	ldr	r2, [r7, #8]
 8004ff0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	68fa      	ldr	r2, [r7, #12]
 8004ff8:	621a      	str	r2, [r3, #32]
      break;
 8004ffa:	e017      	b.n	800502c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6818      	ldr	r0, [r3, #0]
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	6899      	ldr	r1, [r3, #8]
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	691b      	ldr	r3, [r3, #16]
 8005008:	461a      	mov	r2, r3
 800500a:	f000 f889 	bl	8005120 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800500e:	e00d      	b.n	800502c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6818      	ldr	r0, [r3, #0]
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	6899      	ldr	r1, [r3, #8]
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	691b      	ldr	r3, [r3, #16]
 800501c:	461a      	mov	r2, r3
 800501e:	f000 f8eb 	bl	80051f8 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8005022:	e003      	b.n	800502c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	75fb      	strb	r3, [r7, #23]
      break;
 8005028:	e000      	b.n	800502c <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800502a:	bf00      	nop
  }

  return status;
 800502c:	7dfb      	ldrb	r3, [r7, #23]
}
 800502e:	4618      	mov	r0, r3
 8005030:	3718      	adds	r7, #24
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
	...

08005038 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005038:	b480      	push	{r7}
 800503a:	b087      	sub	sp, #28
 800503c:	af00      	add	r7, sp, #0
 800503e:	60f8      	str	r0, [r7, #12]
 8005040:	60b9      	str	r1, [r7, #8]
 8005042:	607a      	str	r2, [r7, #4]
 8005044:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	6a1b      	ldr	r3, [r3, #32]
 800504a:	f023 0201 	bic.w	r2, r3, #1
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	699b      	ldr	r3, [r3, #24]
 8005056:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	6a1b      	ldr	r3, [r3, #32]
 800505c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	4a28      	ldr	r2, [pc, #160]	; (8005104 <TIM_TI1_SetConfig+0xcc>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d01b      	beq.n	800509e <TIM_TI1_SetConfig+0x66>
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800506c:	d017      	beq.n	800509e <TIM_TI1_SetConfig+0x66>
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	4a25      	ldr	r2, [pc, #148]	; (8005108 <TIM_TI1_SetConfig+0xd0>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d013      	beq.n	800509e <TIM_TI1_SetConfig+0x66>
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	4a24      	ldr	r2, [pc, #144]	; (800510c <TIM_TI1_SetConfig+0xd4>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d00f      	beq.n	800509e <TIM_TI1_SetConfig+0x66>
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	4a23      	ldr	r2, [pc, #140]	; (8005110 <TIM_TI1_SetConfig+0xd8>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d00b      	beq.n	800509e <TIM_TI1_SetConfig+0x66>
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	4a22      	ldr	r2, [pc, #136]	; (8005114 <TIM_TI1_SetConfig+0xdc>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d007      	beq.n	800509e <TIM_TI1_SetConfig+0x66>
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	4a21      	ldr	r2, [pc, #132]	; (8005118 <TIM_TI1_SetConfig+0xe0>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d003      	beq.n	800509e <TIM_TI1_SetConfig+0x66>
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	4a20      	ldr	r2, [pc, #128]	; (800511c <TIM_TI1_SetConfig+0xe4>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d101      	bne.n	80050a2 <TIM_TI1_SetConfig+0x6a>
 800509e:	2301      	movs	r3, #1
 80050a0:	e000      	b.n	80050a4 <TIM_TI1_SetConfig+0x6c>
 80050a2:	2300      	movs	r3, #0
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d008      	beq.n	80050ba <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	f023 0303 	bic.w	r3, r3, #3
 80050ae:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80050b0:	697a      	ldr	r2, [r7, #20]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	617b      	str	r3, [r7, #20]
 80050b8:	e003      	b.n	80050c2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	f043 0301 	orr.w	r3, r3, #1
 80050c0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	011b      	lsls	r3, r3, #4
 80050ce:	b2db      	uxtb	r3, r3
 80050d0:	697a      	ldr	r2, [r7, #20]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	f023 030a 	bic.w	r3, r3, #10
 80050dc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	f003 030a 	and.w	r3, r3, #10
 80050e4:	693a      	ldr	r2, [r7, #16]
 80050e6:	4313      	orrs	r3, r2
 80050e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	697a      	ldr	r2, [r7, #20]
 80050ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	693a      	ldr	r2, [r7, #16]
 80050f4:	621a      	str	r2, [r3, #32]
}
 80050f6:	bf00      	nop
 80050f8:	371c      	adds	r7, #28
 80050fa:	46bd      	mov	sp, r7
 80050fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005100:	4770      	bx	lr
 8005102:	bf00      	nop
 8005104:	40010000 	.word	0x40010000
 8005108:	40000400 	.word	0x40000400
 800510c:	40000800 	.word	0x40000800
 8005110:	40000c00 	.word	0x40000c00
 8005114:	40010400 	.word	0x40010400
 8005118:	40014000 	.word	0x40014000
 800511c:	40001800 	.word	0x40001800

08005120 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005120:	b480      	push	{r7}
 8005122:	b087      	sub	sp, #28
 8005124:	af00      	add	r7, sp, #0
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	60b9      	str	r1, [r7, #8]
 800512a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	6a1b      	ldr	r3, [r3, #32]
 8005130:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	6a1b      	ldr	r3, [r3, #32]
 8005136:	f023 0201 	bic.w	r2, r3, #1
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	699b      	ldr	r3, [r3, #24]
 8005142:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800514a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	011b      	lsls	r3, r3, #4
 8005150:	693a      	ldr	r2, [r7, #16]
 8005152:	4313      	orrs	r3, r2
 8005154:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	f023 030a 	bic.w	r3, r3, #10
 800515c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800515e:	697a      	ldr	r2, [r7, #20]
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	4313      	orrs	r3, r2
 8005164:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	693a      	ldr	r2, [r7, #16]
 800516a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	697a      	ldr	r2, [r7, #20]
 8005170:	621a      	str	r2, [r3, #32]
}
 8005172:	bf00      	nop
 8005174:	371c      	adds	r7, #28
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr

0800517e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800517e:	b480      	push	{r7}
 8005180:	b087      	sub	sp, #28
 8005182:	af00      	add	r7, sp, #0
 8005184:	60f8      	str	r0, [r7, #12]
 8005186:	60b9      	str	r1, [r7, #8]
 8005188:	607a      	str	r2, [r7, #4]
 800518a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	6a1b      	ldr	r3, [r3, #32]
 8005190:	f023 0210 	bic.w	r2, r3, #16
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	699b      	ldr	r3, [r3, #24]
 800519c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	6a1b      	ldr	r3, [r3, #32]
 80051a2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051aa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	021b      	lsls	r3, r3, #8
 80051b0:	697a      	ldr	r2, [r7, #20]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80051bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	031b      	lsls	r3, r3, #12
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	697a      	ldr	r2, [r7, #20]
 80051c6:	4313      	orrs	r3, r2
 80051c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80051d0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	011b      	lsls	r3, r3, #4
 80051d6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80051da:	693a      	ldr	r2, [r7, #16]
 80051dc:	4313      	orrs	r3, r2
 80051de:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	697a      	ldr	r2, [r7, #20]
 80051e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	693a      	ldr	r2, [r7, #16]
 80051ea:	621a      	str	r2, [r3, #32]
}
 80051ec:	bf00      	nop
 80051ee:	371c      	adds	r7, #28
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr

080051f8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b087      	sub	sp, #28
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	60f8      	str	r0, [r7, #12]
 8005200:	60b9      	str	r1, [r7, #8]
 8005202:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	6a1b      	ldr	r3, [r3, #32]
 8005208:	f023 0210 	bic.w	r2, r3, #16
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	699b      	ldr	r3, [r3, #24]
 8005214:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	6a1b      	ldr	r3, [r3, #32]
 800521a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005222:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	031b      	lsls	r3, r3, #12
 8005228:	697a      	ldr	r2, [r7, #20]
 800522a:	4313      	orrs	r3, r2
 800522c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005234:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	011b      	lsls	r3, r3, #4
 800523a:	693a      	ldr	r2, [r7, #16]
 800523c:	4313      	orrs	r3, r2
 800523e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	697a      	ldr	r2, [r7, #20]
 8005244:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	693a      	ldr	r2, [r7, #16]
 800524a:	621a      	str	r2, [r3, #32]
}
 800524c:	bf00      	nop
 800524e:	371c      	adds	r7, #28
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005258:	b480      	push	{r7}
 800525a:	b087      	sub	sp, #28
 800525c:	af00      	add	r7, sp, #0
 800525e:	60f8      	str	r0, [r7, #12]
 8005260:	60b9      	str	r1, [r7, #8]
 8005262:	607a      	str	r2, [r7, #4]
 8005264:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	6a1b      	ldr	r3, [r3, #32]
 800526a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	69db      	ldr	r3, [r3, #28]
 8005276:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6a1b      	ldr	r3, [r3, #32]
 800527c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	f023 0303 	bic.w	r3, r3, #3
 8005284:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005286:	697a      	ldr	r2, [r7, #20]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	4313      	orrs	r3, r2
 800528c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005294:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	011b      	lsls	r3, r3, #4
 800529a:	b2db      	uxtb	r3, r3
 800529c:	697a      	ldr	r2, [r7, #20]
 800529e:	4313      	orrs	r3, r2
 80052a0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80052a8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	021b      	lsls	r3, r3, #8
 80052ae:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80052b2:	693a      	ldr	r2, [r7, #16]
 80052b4:	4313      	orrs	r3, r2
 80052b6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	697a      	ldr	r2, [r7, #20]
 80052bc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	693a      	ldr	r2, [r7, #16]
 80052c2:	621a      	str	r2, [r3, #32]
}
 80052c4:	bf00      	nop
 80052c6:	371c      	adds	r7, #28
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr

080052d0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b087      	sub	sp, #28
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	60f8      	str	r0, [r7, #12]
 80052d8:	60b9      	str	r1, [r7, #8]
 80052da:	607a      	str	r2, [r7, #4]
 80052dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	6a1b      	ldr	r3, [r3, #32]
 80052e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	69db      	ldr	r3, [r3, #28]
 80052ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	6a1b      	ldr	r3, [r3, #32]
 80052f4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052fc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	021b      	lsls	r3, r3, #8
 8005302:	697a      	ldr	r2, [r7, #20]
 8005304:	4313      	orrs	r3, r2
 8005306:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800530e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	031b      	lsls	r3, r3, #12
 8005314:	b29b      	uxth	r3, r3
 8005316:	697a      	ldr	r2, [r7, #20]
 8005318:	4313      	orrs	r3, r2
 800531a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005322:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	031b      	lsls	r3, r3, #12
 8005328:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800532c:	693a      	ldr	r2, [r7, #16]
 800532e:	4313      	orrs	r3, r2
 8005330:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	697a      	ldr	r2, [r7, #20]
 8005336:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	693a      	ldr	r2, [r7, #16]
 800533c:	621a      	str	r2, [r3, #32]
}
 800533e:	bf00      	nop
 8005340:	371c      	adds	r7, #28
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr

0800534a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800534a:	b480      	push	{r7}
 800534c:	b085      	sub	sp, #20
 800534e:	af00      	add	r7, sp, #0
 8005350:	6078      	str	r0, [r7, #4]
 8005352:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005360:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005362:	683a      	ldr	r2, [r7, #0]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	4313      	orrs	r3, r2
 8005368:	f043 0307 	orr.w	r3, r3, #7
 800536c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	68fa      	ldr	r2, [r7, #12]
 8005372:	609a      	str	r2, [r3, #8]
}
 8005374:	bf00      	nop
 8005376:	3714      	adds	r7, #20
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr

08005380 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005380:	b480      	push	{r7}
 8005382:	b087      	sub	sp, #28
 8005384:	af00      	add	r7, sp, #0
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	60b9      	str	r1, [r7, #8]
 800538a:	607a      	str	r2, [r7, #4]
 800538c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800539a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	021a      	lsls	r2, r3, #8
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	431a      	orrs	r2, r3
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	4313      	orrs	r3, r2
 80053a8:	697a      	ldr	r2, [r7, #20]
 80053aa:	4313      	orrs	r3, r2
 80053ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	697a      	ldr	r2, [r7, #20]
 80053b2:	609a      	str	r2, [r3, #8]
}
 80053b4:	bf00      	nop
 80053b6:	371c      	adds	r7, #28
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr

080053c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b087      	sub	sp, #28
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	60f8      	str	r0, [r7, #12]
 80053c8:	60b9      	str	r1, [r7, #8]
 80053ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	f003 031f 	and.w	r3, r3, #31
 80053d2:	2201      	movs	r2, #1
 80053d4:	fa02 f303 	lsl.w	r3, r2, r3
 80053d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	6a1a      	ldr	r2, [r3, #32]
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	43db      	mvns	r3, r3
 80053e2:	401a      	ands	r2, r3
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6a1a      	ldr	r2, [r3, #32]
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	f003 031f 	and.w	r3, r3, #31
 80053f2:	6879      	ldr	r1, [r7, #4]
 80053f4:	fa01 f303 	lsl.w	r3, r1, r3
 80053f8:	431a      	orrs	r2, r3
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	621a      	str	r2, [r3, #32]
}
 80053fe:	bf00      	nop
 8005400:	371c      	adds	r7, #28
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr
	...

0800540c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800540c:	b480      	push	{r7}
 800540e:	b085      	sub	sp, #20
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800541c:	2b01      	cmp	r3, #1
 800541e:	d101      	bne.n	8005424 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005420:	2302      	movs	r3, #2
 8005422:	e05a      	b.n	80054da <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2201      	movs	r2, #1
 8005428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2202      	movs	r2, #2
 8005430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800544a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	68fa      	ldr	r2, [r7, #12]
 8005452:	4313      	orrs	r3, r2
 8005454:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	68fa      	ldr	r2, [r7, #12]
 800545c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a21      	ldr	r2, [pc, #132]	; (80054e8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d022      	beq.n	80054ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005470:	d01d      	beq.n	80054ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a1d      	ldr	r2, [pc, #116]	; (80054ec <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d018      	beq.n	80054ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a1b      	ldr	r2, [pc, #108]	; (80054f0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d013      	beq.n	80054ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a1a      	ldr	r2, [pc, #104]	; (80054f4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d00e      	beq.n	80054ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a18      	ldr	r2, [pc, #96]	; (80054f8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d009      	beq.n	80054ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a17      	ldr	r2, [pc, #92]	; (80054fc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d004      	beq.n	80054ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a15      	ldr	r2, [pc, #84]	; (8005500 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d10c      	bne.n	80054c8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	68ba      	ldr	r2, [r7, #8]
 80054bc:	4313      	orrs	r3, r2
 80054be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	68ba      	ldr	r2, [r7, #8]
 80054c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2201      	movs	r2, #1
 80054cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2200      	movs	r2, #0
 80054d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054d8:	2300      	movs	r3, #0
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3714      	adds	r7, #20
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr
 80054e6:	bf00      	nop
 80054e8:	40010000 	.word	0x40010000
 80054ec:	40000400 	.word	0x40000400
 80054f0:	40000800 	.word	0x40000800
 80054f4:	40000c00 	.word	0x40000c00
 80054f8:	40010400 	.word	0x40010400
 80054fc:	40014000 	.word	0x40014000
 8005500:	40001800 	.word	0x40001800

08005504 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005504:	b480      	push	{r7}
 8005506:	b085      	sub	sp, #20
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
 800550c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800550e:	2300      	movs	r3, #0
 8005510:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005518:	2b01      	cmp	r3, #1
 800551a:	d101      	bne.n	8005520 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800551c:	2302      	movs	r3, #2
 800551e:	e03d      	b.n	800559c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2201      	movs	r2, #1
 8005524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	68db      	ldr	r3, [r3, #12]
 8005532:	4313      	orrs	r3, r2
 8005534:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	4313      	orrs	r3, r2
 8005542:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	4313      	orrs	r3, r2
 8005550:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4313      	orrs	r3, r2
 800555e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	691b      	ldr	r3, [r3, #16]
 800556a:	4313      	orrs	r3, r2
 800556c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	695b      	ldr	r3, [r3, #20]
 8005578:	4313      	orrs	r3, r2
 800557a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	69db      	ldr	r3, [r3, #28]
 8005586:	4313      	orrs	r3, r2
 8005588:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	68fa      	ldr	r2, [r7, #12]
 8005590:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2200      	movs	r2, #0
 8005596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800559a:	2300      	movs	r3, #0
}
 800559c:	4618      	mov	r0, r3
 800559e:	3714      	adds	r7, #20
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr

080055a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b083      	sub	sp, #12
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80055b0:	bf00      	nop
 80055b2:	370c      	adds	r7, #12
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr

080055bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80055bc:	b480      	push	{r7}
 80055be:	b083      	sub	sp, #12
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80055c4:	bf00      	nop
 80055c6:	370c      	adds	r7, #12
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr

080055d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b082      	sub	sp, #8
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d101      	bne.n	80055e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	e03f      	b.n	8005662 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d106      	bne.n	80055fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f7fb ff4a 	bl	8001490 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2224      	movs	r2, #36	; 0x24
 8005600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	68da      	ldr	r2, [r3, #12]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005612:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f000 f9cb 	bl	80059b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	691a      	ldr	r2, [r3, #16]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005628:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	695a      	ldr	r2, [r3, #20]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005638:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	68da      	ldr	r2, [r3, #12]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005648:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2200      	movs	r2, #0
 800564e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2220      	movs	r2, #32
 8005654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2220      	movs	r2, #32
 800565c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005660:	2300      	movs	r3, #0
}
 8005662:	4618      	mov	r0, r3
 8005664:	3708      	adds	r7, #8
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}

0800566a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800566a:	b580      	push	{r7, lr}
 800566c:	b08a      	sub	sp, #40	; 0x28
 800566e:	af02      	add	r7, sp, #8
 8005670:	60f8      	str	r0, [r7, #12]
 8005672:	60b9      	str	r1, [r7, #8]
 8005674:	603b      	str	r3, [r7, #0]
 8005676:	4613      	mov	r3, r2
 8005678:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800567a:	2300      	movs	r3, #0
 800567c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005684:	b2db      	uxtb	r3, r3
 8005686:	2b20      	cmp	r3, #32
 8005688:	d17c      	bne.n	8005784 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d002      	beq.n	8005696 <HAL_UART_Transmit+0x2c>
 8005690:	88fb      	ldrh	r3, [r7, #6]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d101      	bne.n	800569a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005696:	2301      	movs	r3, #1
 8005698:	e075      	b.n	8005786 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d101      	bne.n	80056a8 <HAL_UART_Transmit+0x3e>
 80056a4:	2302      	movs	r3, #2
 80056a6:	e06e      	b.n	8005786 <HAL_UART_Transmit+0x11c>
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2201      	movs	r2, #1
 80056ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2200      	movs	r2, #0
 80056b4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2221      	movs	r2, #33	; 0x21
 80056ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80056be:	f7fc f8ef 	bl	80018a0 <HAL_GetTick>
 80056c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	88fa      	ldrh	r2, [r7, #6]
 80056c8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	88fa      	ldrh	r2, [r7, #6]
 80056ce:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056d8:	d108      	bne.n	80056ec <HAL_UART_Transmit+0x82>
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	691b      	ldr	r3, [r3, #16]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d104      	bne.n	80056ec <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80056e2:	2300      	movs	r3, #0
 80056e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	61bb      	str	r3, [r7, #24]
 80056ea:	e003      	b.n	80056f4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80056f0:	2300      	movs	r3, #0
 80056f2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2200      	movs	r2, #0
 80056f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80056fc:	e02a      	b.n	8005754 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	9300      	str	r3, [sp, #0]
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	2200      	movs	r2, #0
 8005706:	2180      	movs	r1, #128	; 0x80
 8005708:	68f8      	ldr	r0, [r7, #12]
 800570a:	f000 f8e2 	bl	80058d2 <UART_WaitOnFlagUntilTimeout>
 800570e:	4603      	mov	r3, r0
 8005710:	2b00      	cmp	r3, #0
 8005712:	d001      	beq.n	8005718 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005714:	2303      	movs	r3, #3
 8005716:	e036      	b.n	8005786 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005718:	69fb      	ldr	r3, [r7, #28]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d10b      	bne.n	8005736 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800571e:	69bb      	ldr	r3, [r7, #24]
 8005720:	881b      	ldrh	r3, [r3, #0]
 8005722:	461a      	mov	r2, r3
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800572c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800572e:	69bb      	ldr	r3, [r7, #24]
 8005730:	3302      	adds	r3, #2
 8005732:	61bb      	str	r3, [r7, #24]
 8005734:	e007      	b.n	8005746 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005736:	69fb      	ldr	r3, [r7, #28]
 8005738:	781a      	ldrb	r2, [r3, #0]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005740:	69fb      	ldr	r3, [r7, #28]
 8005742:	3301      	adds	r3, #1
 8005744:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800574a:	b29b      	uxth	r3, r3
 800574c:	3b01      	subs	r3, #1
 800574e:	b29a      	uxth	r2, r3
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005758:	b29b      	uxth	r3, r3
 800575a:	2b00      	cmp	r3, #0
 800575c:	d1cf      	bne.n	80056fe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	9300      	str	r3, [sp, #0]
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	2200      	movs	r2, #0
 8005766:	2140      	movs	r1, #64	; 0x40
 8005768:	68f8      	ldr	r0, [r7, #12]
 800576a:	f000 f8b2 	bl	80058d2 <UART_WaitOnFlagUntilTimeout>
 800576e:	4603      	mov	r3, r0
 8005770:	2b00      	cmp	r3, #0
 8005772:	d001      	beq.n	8005778 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005774:	2303      	movs	r3, #3
 8005776:	e006      	b.n	8005786 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2220      	movs	r2, #32
 800577c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005780:	2300      	movs	r3, #0
 8005782:	e000      	b.n	8005786 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005784:	2302      	movs	r3, #2
  }
}
 8005786:	4618      	mov	r0, r3
 8005788:	3720      	adds	r7, #32
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}

0800578e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800578e:	b580      	push	{r7, lr}
 8005790:	b08a      	sub	sp, #40	; 0x28
 8005792:	af02      	add	r7, sp, #8
 8005794:	60f8      	str	r0, [r7, #12]
 8005796:	60b9      	str	r1, [r7, #8]
 8005798:	603b      	str	r3, [r7, #0]
 800579a:	4613      	mov	r3, r2
 800579c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800579e:	2300      	movs	r3, #0
 80057a0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057a8:	b2db      	uxtb	r3, r3
 80057aa:	2b20      	cmp	r3, #32
 80057ac:	f040 808c 	bne.w	80058c8 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d002      	beq.n	80057bc <HAL_UART_Receive+0x2e>
 80057b6:	88fb      	ldrh	r3, [r7, #6]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d101      	bne.n	80057c0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	e084      	b.n	80058ca <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057c6:	2b01      	cmp	r3, #1
 80057c8:	d101      	bne.n	80057ce <HAL_UART_Receive+0x40>
 80057ca:	2302      	movs	r3, #2
 80057cc:	e07d      	b.n	80058ca <HAL_UART_Receive+0x13c>
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2201      	movs	r2, #1
 80057d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2200      	movs	r2, #0
 80057da:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2222      	movs	r2, #34	; 0x22
 80057e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2200      	movs	r2, #0
 80057e8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80057ea:	f7fc f859 	bl	80018a0 <HAL_GetTick>
 80057ee:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	88fa      	ldrh	r2, [r7, #6]
 80057f4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	88fa      	ldrh	r2, [r7, #6]
 80057fa:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005804:	d108      	bne.n	8005818 <HAL_UART_Receive+0x8a>
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	691b      	ldr	r3, [r3, #16]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d104      	bne.n	8005818 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800580e:	2300      	movs	r3, #0
 8005810:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	61bb      	str	r3, [r7, #24]
 8005816:	e003      	b.n	8005820 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800581c:	2300      	movs	r3, #0
 800581e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2200      	movs	r2, #0
 8005824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005828:	e043      	b.n	80058b2 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	9300      	str	r3, [sp, #0]
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	2200      	movs	r2, #0
 8005832:	2120      	movs	r1, #32
 8005834:	68f8      	ldr	r0, [r7, #12]
 8005836:	f000 f84c 	bl	80058d2 <UART_WaitOnFlagUntilTimeout>
 800583a:	4603      	mov	r3, r0
 800583c:	2b00      	cmp	r3, #0
 800583e:	d001      	beq.n	8005844 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8005840:	2303      	movs	r3, #3
 8005842:	e042      	b.n	80058ca <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8005844:	69fb      	ldr	r3, [r7, #28]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d10c      	bne.n	8005864 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	b29b      	uxth	r3, r3
 8005852:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005856:	b29a      	uxth	r2, r3
 8005858:	69bb      	ldr	r3, [r7, #24]
 800585a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800585c:	69bb      	ldr	r3, [r7, #24]
 800585e:	3302      	adds	r3, #2
 8005860:	61bb      	str	r3, [r7, #24]
 8005862:	e01f      	b.n	80058a4 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800586c:	d007      	beq.n	800587e <HAL_UART_Receive+0xf0>
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d10a      	bne.n	800588c <HAL_UART_Receive+0xfe>
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	691b      	ldr	r3, [r3, #16]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d106      	bne.n	800588c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	b2da      	uxtb	r2, r3
 8005886:	69fb      	ldr	r3, [r7, #28]
 8005888:	701a      	strb	r2, [r3, #0]
 800588a:	e008      	b.n	800589e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	b2db      	uxtb	r3, r3
 8005894:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005898:	b2da      	uxtb	r2, r3
 800589a:	69fb      	ldr	r3, [r7, #28]
 800589c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800589e:	69fb      	ldr	r3, [r7, #28]
 80058a0:	3301      	adds	r3, #1
 80058a2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	3b01      	subs	r3, #1
 80058ac:	b29a      	uxth	r2, r3
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d1b6      	bne.n	800582a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2220      	movs	r2, #32
 80058c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80058c4:	2300      	movs	r3, #0
 80058c6:	e000      	b.n	80058ca <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80058c8:	2302      	movs	r3, #2
  }
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3720      	adds	r7, #32
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}

080058d2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80058d2:	b580      	push	{r7, lr}
 80058d4:	b090      	sub	sp, #64	; 0x40
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	60f8      	str	r0, [r7, #12]
 80058da:	60b9      	str	r1, [r7, #8]
 80058dc:	603b      	str	r3, [r7, #0]
 80058de:	4613      	mov	r3, r2
 80058e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058e2:	e050      	b.n	8005986 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ea:	d04c      	beq.n	8005986 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80058ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d007      	beq.n	8005902 <UART_WaitOnFlagUntilTimeout+0x30>
 80058f2:	f7fb ffd5 	bl	80018a0 <HAL_GetTick>
 80058f6:	4602      	mov	r2, r0
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	1ad3      	subs	r3, r2, r3
 80058fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80058fe:	429a      	cmp	r2, r3
 8005900:	d241      	bcs.n	8005986 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	330c      	adds	r3, #12
 8005908:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800590a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800590c:	e853 3f00 	ldrex	r3, [r3]
 8005910:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005914:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005918:	63fb      	str	r3, [r7, #60]	; 0x3c
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	330c      	adds	r3, #12
 8005920:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005922:	637a      	str	r2, [r7, #52]	; 0x34
 8005924:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005926:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005928:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800592a:	e841 2300 	strex	r3, r2, [r1]
 800592e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005932:	2b00      	cmp	r3, #0
 8005934:	d1e5      	bne.n	8005902 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	3314      	adds	r3, #20
 800593c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	e853 3f00 	ldrex	r3, [r3]
 8005944:	613b      	str	r3, [r7, #16]
   return(result);
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	f023 0301 	bic.w	r3, r3, #1
 800594c:	63bb      	str	r3, [r7, #56]	; 0x38
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	3314      	adds	r3, #20
 8005954:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005956:	623a      	str	r2, [r7, #32]
 8005958:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800595a:	69f9      	ldr	r1, [r7, #28]
 800595c:	6a3a      	ldr	r2, [r7, #32]
 800595e:	e841 2300 	strex	r3, r2, [r1]
 8005962:	61bb      	str	r3, [r7, #24]
   return(result);
 8005964:	69bb      	ldr	r3, [r7, #24]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d1e5      	bne.n	8005936 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2220      	movs	r2, #32
 800596e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2220      	movs	r2, #32
 8005976:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2200      	movs	r2, #0
 800597e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005982:	2303      	movs	r3, #3
 8005984:	e00f      	b.n	80059a6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	681a      	ldr	r2, [r3, #0]
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	4013      	ands	r3, r2
 8005990:	68ba      	ldr	r2, [r7, #8]
 8005992:	429a      	cmp	r2, r3
 8005994:	bf0c      	ite	eq
 8005996:	2301      	moveq	r3, #1
 8005998:	2300      	movne	r3, #0
 800599a:	b2db      	uxtb	r3, r3
 800599c:	461a      	mov	r2, r3
 800599e:	79fb      	ldrb	r3, [r7, #7]
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d09f      	beq.n	80058e4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80059a4:	2300      	movs	r3, #0
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3740      	adds	r7, #64	; 0x40
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
	...

080059b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059b4:	b0c0      	sub	sp, #256	; 0x100
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	691b      	ldr	r3, [r3, #16]
 80059c4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80059c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059cc:	68d9      	ldr	r1, [r3, #12]
 80059ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059d2:	681a      	ldr	r2, [r3, #0]
 80059d4:	ea40 0301 	orr.w	r3, r0, r1
 80059d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80059da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059de:	689a      	ldr	r2, [r3, #8]
 80059e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059e4:	691b      	ldr	r3, [r3, #16]
 80059e6:	431a      	orrs	r2, r3
 80059e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059ec:	695b      	ldr	r3, [r3, #20]
 80059ee:	431a      	orrs	r2, r3
 80059f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059f4:	69db      	ldr	r3, [r3, #28]
 80059f6:	4313      	orrs	r3, r2
 80059f8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80059fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005a08:	f021 010c 	bic.w	r1, r1, #12
 8005a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a10:	681a      	ldr	r2, [r3, #0]
 8005a12:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005a16:	430b      	orrs	r3, r1
 8005a18:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	695b      	ldr	r3, [r3, #20]
 8005a22:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005a26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a2a:	6999      	ldr	r1, [r3, #24]
 8005a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a30:	681a      	ldr	r2, [r3, #0]
 8005a32:	ea40 0301 	orr.w	r3, r0, r1
 8005a36:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	4b8f      	ldr	r3, [pc, #572]	; (8005c7c <UART_SetConfig+0x2cc>)
 8005a40:	429a      	cmp	r2, r3
 8005a42:	d005      	beq.n	8005a50 <UART_SetConfig+0xa0>
 8005a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	4b8d      	ldr	r3, [pc, #564]	; (8005c80 <UART_SetConfig+0x2d0>)
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d104      	bne.n	8005a5a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005a50:	f7fd fe6c 	bl	800372c <HAL_RCC_GetPCLK2Freq>
 8005a54:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005a58:	e003      	b.n	8005a62 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005a5a:	f7fd fe53 	bl	8003704 <HAL_RCC_GetPCLK1Freq>
 8005a5e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a66:	69db      	ldr	r3, [r3, #28]
 8005a68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a6c:	f040 810c 	bne.w	8005c88 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005a70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a74:	2200      	movs	r2, #0
 8005a76:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005a7a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005a7e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005a82:	4622      	mov	r2, r4
 8005a84:	462b      	mov	r3, r5
 8005a86:	1891      	adds	r1, r2, r2
 8005a88:	65b9      	str	r1, [r7, #88]	; 0x58
 8005a8a:	415b      	adcs	r3, r3
 8005a8c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a8e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005a92:	4621      	mov	r1, r4
 8005a94:	eb12 0801 	adds.w	r8, r2, r1
 8005a98:	4629      	mov	r1, r5
 8005a9a:	eb43 0901 	adc.w	r9, r3, r1
 8005a9e:	f04f 0200 	mov.w	r2, #0
 8005aa2:	f04f 0300 	mov.w	r3, #0
 8005aa6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005aaa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005aae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005ab2:	4690      	mov	r8, r2
 8005ab4:	4699      	mov	r9, r3
 8005ab6:	4623      	mov	r3, r4
 8005ab8:	eb18 0303 	adds.w	r3, r8, r3
 8005abc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005ac0:	462b      	mov	r3, r5
 8005ac2:	eb49 0303 	adc.w	r3, r9, r3
 8005ac6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005aca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005ad6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005ada:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005ade:	460b      	mov	r3, r1
 8005ae0:	18db      	adds	r3, r3, r3
 8005ae2:	653b      	str	r3, [r7, #80]	; 0x50
 8005ae4:	4613      	mov	r3, r2
 8005ae6:	eb42 0303 	adc.w	r3, r2, r3
 8005aea:	657b      	str	r3, [r7, #84]	; 0x54
 8005aec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005af0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005af4:	f7fa fbcc 	bl	8000290 <__aeabi_uldivmod>
 8005af8:	4602      	mov	r2, r0
 8005afa:	460b      	mov	r3, r1
 8005afc:	4b61      	ldr	r3, [pc, #388]	; (8005c84 <UART_SetConfig+0x2d4>)
 8005afe:	fba3 2302 	umull	r2, r3, r3, r2
 8005b02:	095b      	lsrs	r3, r3, #5
 8005b04:	011c      	lsls	r4, r3, #4
 8005b06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005b10:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005b14:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005b18:	4642      	mov	r2, r8
 8005b1a:	464b      	mov	r3, r9
 8005b1c:	1891      	adds	r1, r2, r2
 8005b1e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005b20:	415b      	adcs	r3, r3
 8005b22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b24:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005b28:	4641      	mov	r1, r8
 8005b2a:	eb12 0a01 	adds.w	sl, r2, r1
 8005b2e:	4649      	mov	r1, r9
 8005b30:	eb43 0b01 	adc.w	fp, r3, r1
 8005b34:	f04f 0200 	mov.w	r2, #0
 8005b38:	f04f 0300 	mov.w	r3, #0
 8005b3c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005b40:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005b44:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b48:	4692      	mov	sl, r2
 8005b4a:	469b      	mov	fp, r3
 8005b4c:	4643      	mov	r3, r8
 8005b4e:	eb1a 0303 	adds.w	r3, sl, r3
 8005b52:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005b56:	464b      	mov	r3, r9
 8005b58:	eb4b 0303 	adc.w	r3, fp, r3
 8005b5c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	2200      	movs	r2, #0
 8005b68:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005b6c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005b70:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005b74:	460b      	mov	r3, r1
 8005b76:	18db      	adds	r3, r3, r3
 8005b78:	643b      	str	r3, [r7, #64]	; 0x40
 8005b7a:	4613      	mov	r3, r2
 8005b7c:	eb42 0303 	adc.w	r3, r2, r3
 8005b80:	647b      	str	r3, [r7, #68]	; 0x44
 8005b82:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005b86:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005b8a:	f7fa fb81 	bl	8000290 <__aeabi_uldivmod>
 8005b8e:	4602      	mov	r2, r0
 8005b90:	460b      	mov	r3, r1
 8005b92:	4611      	mov	r1, r2
 8005b94:	4b3b      	ldr	r3, [pc, #236]	; (8005c84 <UART_SetConfig+0x2d4>)
 8005b96:	fba3 2301 	umull	r2, r3, r3, r1
 8005b9a:	095b      	lsrs	r3, r3, #5
 8005b9c:	2264      	movs	r2, #100	; 0x64
 8005b9e:	fb02 f303 	mul.w	r3, r2, r3
 8005ba2:	1acb      	subs	r3, r1, r3
 8005ba4:	00db      	lsls	r3, r3, #3
 8005ba6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005baa:	4b36      	ldr	r3, [pc, #216]	; (8005c84 <UART_SetConfig+0x2d4>)
 8005bac:	fba3 2302 	umull	r2, r3, r3, r2
 8005bb0:	095b      	lsrs	r3, r3, #5
 8005bb2:	005b      	lsls	r3, r3, #1
 8005bb4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005bb8:	441c      	add	r4, r3
 8005bba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005bc4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005bc8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005bcc:	4642      	mov	r2, r8
 8005bce:	464b      	mov	r3, r9
 8005bd0:	1891      	adds	r1, r2, r2
 8005bd2:	63b9      	str	r1, [r7, #56]	; 0x38
 8005bd4:	415b      	adcs	r3, r3
 8005bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bd8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005bdc:	4641      	mov	r1, r8
 8005bde:	1851      	adds	r1, r2, r1
 8005be0:	6339      	str	r1, [r7, #48]	; 0x30
 8005be2:	4649      	mov	r1, r9
 8005be4:	414b      	adcs	r3, r1
 8005be6:	637b      	str	r3, [r7, #52]	; 0x34
 8005be8:	f04f 0200 	mov.w	r2, #0
 8005bec:	f04f 0300 	mov.w	r3, #0
 8005bf0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005bf4:	4659      	mov	r1, fp
 8005bf6:	00cb      	lsls	r3, r1, #3
 8005bf8:	4651      	mov	r1, sl
 8005bfa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005bfe:	4651      	mov	r1, sl
 8005c00:	00ca      	lsls	r2, r1, #3
 8005c02:	4610      	mov	r0, r2
 8005c04:	4619      	mov	r1, r3
 8005c06:	4603      	mov	r3, r0
 8005c08:	4642      	mov	r2, r8
 8005c0a:	189b      	adds	r3, r3, r2
 8005c0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c10:	464b      	mov	r3, r9
 8005c12:	460a      	mov	r2, r1
 8005c14:	eb42 0303 	adc.w	r3, r2, r3
 8005c18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	2200      	movs	r2, #0
 8005c24:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005c28:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005c2c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005c30:	460b      	mov	r3, r1
 8005c32:	18db      	adds	r3, r3, r3
 8005c34:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c36:	4613      	mov	r3, r2
 8005c38:	eb42 0303 	adc.w	r3, r2, r3
 8005c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c3e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005c42:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005c46:	f7fa fb23 	bl	8000290 <__aeabi_uldivmod>
 8005c4a:	4602      	mov	r2, r0
 8005c4c:	460b      	mov	r3, r1
 8005c4e:	4b0d      	ldr	r3, [pc, #52]	; (8005c84 <UART_SetConfig+0x2d4>)
 8005c50:	fba3 1302 	umull	r1, r3, r3, r2
 8005c54:	095b      	lsrs	r3, r3, #5
 8005c56:	2164      	movs	r1, #100	; 0x64
 8005c58:	fb01 f303 	mul.w	r3, r1, r3
 8005c5c:	1ad3      	subs	r3, r2, r3
 8005c5e:	00db      	lsls	r3, r3, #3
 8005c60:	3332      	adds	r3, #50	; 0x32
 8005c62:	4a08      	ldr	r2, [pc, #32]	; (8005c84 <UART_SetConfig+0x2d4>)
 8005c64:	fba2 2303 	umull	r2, r3, r2, r3
 8005c68:	095b      	lsrs	r3, r3, #5
 8005c6a:	f003 0207 	and.w	r2, r3, #7
 8005c6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4422      	add	r2, r4
 8005c76:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005c78:	e105      	b.n	8005e86 <UART_SetConfig+0x4d6>
 8005c7a:	bf00      	nop
 8005c7c:	40011000 	.word	0x40011000
 8005c80:	40011400 	.word	0x40011400
 8005c84:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005c88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005c92:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005c96:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005c9a:	4642      	mov	r2, r8
 8005c9c:	464b      	mov	r3, r9
 8005c9e:	1891      	adds	r1, r2, r2
 8005ca0:	6239      	str	r1, [r7, #32]
 8005ca2:	415b      	adcs	r3, r3
 8005ca4:	627b      	str	r3, [r7, #36]	; 0x24
 8005ca6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005caa:	4641      	mov	r1, r8
 8005cac:	1854      	adds	r4, r2, r1
 8005cae:	4649      	mov	r1, r9
 8005cb0:	eb43 0501 	adc.w	r5, r3, r1
 8005cb4:	f04f 0200 	mov.w	r2, #0
 8005cb8:	f04f 0300 	mov.w	r3, #0
 8005cbc:	00eb      	lsls	r3, r5, #3
 8005cbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005cc2:	00e2      	lsls	r2, r4, #3
 8005cc4:	4614      	mov	r4, r2
 8005cc6:	461d      	mov	r5, r3
 8005cc8:	4643      	mov	r3, r8
 8005cca:	18e3      	adds	r3, r4, r3
 8005ccc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005cd0:	464b      	mov	r3, r9
 8005cd2:	eb45 0303 	adc.w	r3, r5, r3
 8005cd6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005cda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005ce6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005cea:	f04f 0200 	mov.w	r2, #0
 8005cee:	f04f 0300 	mov.w	r3, #0
 8005cf2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005cf6:	4629      	mov	r1, r5
 8005cf8:	008b      	lsls	r3, r1, #2
 8005cfa:	4621      	mov	r1, r4
 8005cfc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d00:	4621      	mov	r1, r4
 8005d02:	008a      	lsls	r2, r1, #2
 8005d04:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005d08:	f7fa fac2 	bl	8000290 <__aeabi_uldivmod>
 8005d0c:	4602      	mov	r2, r0
 8005d0e:	460b      	mov	r3, r1
 8005d10:	4b60      	ldr	r3, [pc, #384]	; (8005e94 <UART_SetConfig+0x4e4>)
 8005d12:	fba3 2302 	umull	r2, r3, r3, r2
 8005d16:	095b      	lsrs	r3, r3, #5
 8005d18:	011c      	lsls	r4, r3, #4
 8005d1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d1e:	2200      	movs	r2, #0
 8005d20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005d24:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005d28:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005d2c:	4642      	mov	r2, r8
 8005d2e:	464b      	mov	r3, r9
 8005d30:	1891      	adds	r1, r2, r2
 8005d32:	61b9      	str	r1, [r7, #24]
 8005d34:	415b      	adcs	r3, r3
 8005d36:	61fb      	str	r3, [r7, #28]
 8005d38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d3c:	4641      	mov	r1, r8
 8005d3e:	1851      	adds	r1, r2, r1
 8005d40:	6139      	str	r1, [r7, #16]
 8005d42:	4649      	mov	r1, r9
 8005d44:	414b      	adcs	r3, r1
 8005d46:	617b      	str	r3, [r7, #20]
 8005d48:	f04f 0200 	mov.w	r2, #0
 8005d4c:	f04f 0300 	mov.w	r3, #0
 8005d50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005d54:	4659      	mov	r1, fp
 8005d56:	00cb      	lsls	r3, r1, #3
 8005d58:	4651      	mov	r1, sl
 8005d5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d5e:	4651      	mov	r1, sl
 8005d60:	00ca      	lsls	r2, r1, #3
 8005d62:	4610      	mov	r0, r2
 8005d64:	4619      	mov	r1, r3
 8005d66:	4603      	mov	r3, r0
 8005d68:	4642      	mov	r2, r8
 8005d6a:	189b      	adds	r3, r3, r2
 8005d6c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005d70:	464b      	mov	r3, r9
 8005d72:	460a      	mov	r2, r1
 8005d74:	eb42 0303 	adc.w	r3, r2, r3
 8005d78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	2200      	movs	r2, #0
 8005d84:	67bb      	str	r3, [r7, #120]	; 0x78
 8005d86:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005d88:	f04f 0200 	mov.w	r2, #0
 8005d8c:	f04f 0300 	mov.w	r3, #0
 8005d90:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005d94:	4649      	mov	r1, r9
 8005d96:	008b      	lsls	r3, r1, #2
 8005d98:	4641      	mov	r1, r8
 8005d9a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d9e:	4641      	mov	r1, r8
 8005da0:	008a      	lsls	r2, r1, #2
 8005da2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005da6:	f7fa fa73 	bl	8000290 <__aeabi_uldivmod>
 8005daa:	4602      	mov	r2, r0
 8005dac:	460b      	mov	r3, r1
 8005dae:	4b39      	ldr	r3, [pc, #228]	; (8005e94 <UART_SetConfig+0x4e4>)
 8005db0:	fba3 1302 	umull	r1, r3, r3, r2
 8005db4:	095b      	lsrs	r3, r3, #5
 8005db6:	2164      	movs	r1, #100	; 0x64
 8005db8:	fb01 f303 	mul.w	r3, r1, r3
 8005dbc:	1ad3      	subs	r3, r2, r3
 8005dbe:	011b      	lsls	r3, r3, #4
 8005dc0:	3332      	adds	r3, #50	; 0x32
 8005dc2:	4a34      	ldr	r2, [pc, #208]	; (8005e94 <UART_SetConfig+0x4e4>)
 8005dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8005dc8:	095b      	lsrs	r3, r3, #5
 8005dca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005dce:	441c      	add	r4, r3
 8005dd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	673b      	str	r3, [r7, #112]	; 0x70
 8005dd8:	677a      	str	r2, [r7, #116]	; 0x74
 8005dda:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005dde:	4642      	mov	r2, r8
 8005de0:	464b      	mov	r3, r9
 8005de2:	1891      	adds	r1, r2, r2
 8005de4:	60b9      	str	r1, [r7, #8]
 8005de6:	415b      	adcs	r3, r3
 8005de8:	60fb      	str	r3, [r7, #12]
 8005dea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005dee:	4641      	mov	r1, r8
 8005df0:	1851      	adds	r1, r2, r1
 8005df2:	6039      	str	r1, [r7, #0]
 8005df4:	4649      	mov	r1, r9
 8005df6:	414b      	adcs	r3, r1
 8005df8:	607b      	str	r3, [r7, #4]
 8005dfa:	f04f 0200 	mov.w	r2, #0
 8005dfe:	f04f 0300 	mov.w	r3, #0
 8005e02:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005e06:	4659      	mov	r1, fp
 8005e08:	00cb      	lsls	r3, r1, #3
 8005e0a:	4651      	mov	r1, sl
 8005e0c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e10:	4651      	mov	r1, sl
 8005e12:	00ca      	lsls	r2, r1, #3
 8005e14:	4610      	mov	r0, r2
 8005e16:	4619      	mov	r1, r3
 8005e18:	4603      	mov	r3, r0
 8005e1a:	4642      	mov	r2, r8
 8005e1c:	189b      	adds	r3, r3, r2
 8005e1e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005e20:	464b      	mov	r3, r9
 8005e22:	460a      	mov	r2, r1
 8005e24:	eb42 0303 	adc.w	r3, r2, r3
 8005e28:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005e2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	2200      	movs	r2, #0
 8005e32:	663b      	str	r3, [r7, #96]	; 0x60
 8005e34:	667a      	str	r2, [r7, #100]	; 0x64
 8005e36:	f04f 0200 	mov.w	r2, #0
 8005e3a:	f04f 0300 	mov.w	r3, #0
 8005e3e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005e42:	4649      	mov	r1, r9
 8005e44:	008b      	lsls	r3, r1, #2
 8005e46:	4641      	mov	r1, r8
 8005e48:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e4c:	4641      	mov	r1, r8
 8005e4e:	008a      	lsls	r2, r1, #2
 8005e50:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005e54:	f7fa fa1c 	bl	8000290 <__aeabi_uldivmod>
 8005e58:	4602      	mov	r2, r0
 8005e5a:	460b      	mov	r3, r1
 8005e5c:	4b0d      	ldr	r3, [pc, #52]	; (8005e94 <UART_SetConfig+0x4e4>)
 8005e5e:	fba3 1302 	umull	r1, r3, r3, r2
 8005e62:	095b      	lsrs	r3, r3, #5
 8005e64:	2164      	movs	r1, #100	; 0x64
 8005e66:	fb01 f303 	mul.w	r3, r1, r3
 8005e6a:	1ad3      	subs	r3, r2, r3
 8005e6c:	011b      	lsls	r3, r3, #4
 8005e6e:	3332      	adds	r3, #50	; 0x32
 8005e70:	4a08      	ldr	r2, [pc, #32]	; (8005e94 <UART_SetConfig+0x4e4>)
 8005e72:	fba2 2303 	umull	r2, r3, r2, r3
 8005e76:	095b      	lsrs	r3, r3, #5
 8005e78:	f003 020f 	and.w	r2, r3, #15
 8005e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4422      	add	r2, r4
 8005e84:	609a      	str	r2, [r3, #8]
}
 8005e86:	bf00      	nop
 8005e88:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e92:	bf00      	nop
 8005e94:	51eb851f 	.word	0x51eb851f

08005e98 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005e98:	b084      	sub	sp, #16
 8005e9a:	b580      	push	{r7, lr}
 8005e9c:	b084      	sub	sp, #16
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	6078      	str	r0, [r7, #4]
 8005ea2:	f107 001c 	add.w	r0, r7, #28
 8005ea6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d122      	bne.n	8005ef6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	68db      	ldr	r3, [r3, #12]
 8005ec0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005ec4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ec8:	687a      	ldr	r2, [r7, #4]
 8005eca:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	68db      	ldr	r3, [r3, #12]
 8005ed0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005ed8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	d105      	bne.n	8005eea <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	68db      	ldr	r3, [r3, #12]
 8005ee2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f000 faa2 	bl	8006434 <USB_CoreReset>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	73fb      	strb	r3, [r7, #15]
 8005ef4:	e01a      	b.n	8005f2c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	68db      	ldr	r3, [r3, #12]
 8005efa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 fa96 	bl	8006434 <USB_CoreReset>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005f0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d106      	bne.n	8005f20 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f16:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	639a      	str	r2, [r3, #56]	; 0x38
 8005f1e:	e005      	b.n	8005f2c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f24:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f2e:	2b01      	cmp	r3, #1
 8005f30:	d10b      	bne.n	8005f4a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	689b      	ldr	r3, [r3, #8]
 8005f36:	f043 0206 	orr.w	r2, r3, #6
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	f043 0220 	orr.w	r2, r3, #32
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005f4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3710      	adds	r7, #16
 8005f50:	46bd      	mov	sp, r7
 8005f52:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f56:	b004      	add	sp, #16
 8005f58:	4770      	bx	lr

08005f5a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f5a:	b480      	push	{r7}
 8005f5c:	b083      	sub	sp, #12
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	f023 0201 	bic.w	r2, r3, #1
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005f6e:	2300      	movs	r3, #0
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	370c      	adds	r7, #12
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr

08005f7c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b084      	sub	sp, #16
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
 8005f84:	460b      	mov	r3, r1
 8005f86:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	68db      	ldr	r3, [r3, #12]
 8005f90:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005f98:	78fb      	ldrb	r3, [r7, #3]
 8005f9a:	2b01      	cmp	r3, #1
 8005f9c:	d115      	bne.n	8005fca <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	68db      	ldr	r3, [r3, #12]
 8005fa2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005faa:	2001      	movs	r0, #1
 8005fac:	f7fb fc84 	bl	80018b8 <HAL_Delay>
      ms++;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	3301      	adds	r3, #1
 8005fb4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f000 fa2e 	bl	8006418 <USB_GetMode>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d01e      	beq.n	8006000 <USB_SetCurrentMode+0x84>
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2b31      	cmp	r3, #49	; 0x31
 8005fc6:	d9f0      	bls.n	8005faa <USB_SetCurrentMode+0x2e>
 8005fc8:	e01a      	b.n	8006000 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005fca:	78fb      	ldrb	r3, [r7, #3]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d115      	bne.n	8005ffc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	68db      	ldr	r3, [r3, #12]
 8005fd4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005fdc:	2001      	movs	r0, #1
 8005fde:	f7fb fc6b 	bl	80018b8 <HAL_Delay>
      ms++;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	3301      	adds	r3, #1
 8005fe6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f000 fa15 	bl	8006418 <USB_GetMode>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d005      	beq.n	8006000 <USB_SetCurrentMode+0x84>
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2b31      	cmp	r3, #49	; 0x31
 8005ff8:	d9f0      	bls.n	8005fdc <USB_SetCurrentMode+0x60>
 8005ffa:	e001      	b.n	8006000 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	e005      	b.n	800600c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2b32      	cmp	r3, #50	; 0x32
 8006004:	d101      	bne.n	800600a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	e000      	b.n	800600c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800600a:	2300      	movs	r3, #0
}
 800600c:	4618      	mov	r0, r3
 800600e:	3710      	adds	r7, #16
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}

08006014 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006014:	b084      	sub	sp, #16
 8006016:	b580      	push	{r7, lr}
 8006018:	b086      	sub	sp, #24
 800601a:	af00      	add	r7, sp, #0
 800601c:	6078      	str	r0, [r7, #4]
 800601e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006022:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006026:	2300      	movs	r3, #0
 8006028:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800602e:	2300      	movs	r3, #0
 8006030:	613b      	str	r3, [r7, #16]
 8006032:	e009      	b.n	8006048 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006034:	687a      	ldr	r2, [r7, #4]
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	3340      	adds	r3, #64	; 0x40
 800603a:	009b      	lsls	r3, r3, #2
 800603c:	4413      	add	r3, r2
 800603e:	2200      	movs	r2, #0
 8006040:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	3301      	adds	r3, #1
 8006046:	613b      	str	r3, [r7, #16]
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	2b0e      	cmp	r3, #14
 800604c:	d9f2      	bls.n	8006034 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800604e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006050:	2b00      	cmp	r3, #0
 8006052:	d11c      	bne.n	800608e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	68fa      	ldr	r2, [r7, #12]
 800605e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006062:	f043 0302 	orr.w	r3, r3, #2
 8006066:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800606c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006078:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006084:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	639a      	str	r2, [r3, #56]	; 0x38
 800608c:	e00b      	b.n	80060a6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006092:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800609e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80060ac:	461a      	mov	r2, r3
 80060ae:	2300      	movs	r3, #0
 80060b0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060b8:	4619      	mov	r1, r3
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060c0:	461a      	mov	r2, r3
 80060c2:	680b      	ldr	r3, [r1, #0]
 80060c4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80060c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d10c      	bne.n	80060e6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80060cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d104      	bne.n	80060dc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80060d2:	2100      	movs	r1, #0
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f000 f965 	bl	80063a4 <USB_SetDevSpeed>
 80060da:	e008      	b.n	80060ee <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80060dc:	2101      	movs	r1, #1
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f000 f960 	bl	80063a4 <USB_SetDevSpeed>
 80060e4:	e003      	b.n	80060ee <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80060e6:	2103      	movs	r1, #3
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f000 f95b 	bl	80063a4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80060ee:	2110      	movs	r1, #16
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f000 f8f3 	bl	80062dc <USB_FlushTxFifo>
 80060f6:	4603      	mov	r3, r0
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d001      	beq.n	8006100 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80060fc:	2301      	movs	r3, #1
 80060fe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f000 f91f 	bl	8006344 <USB_FlushRxFifo>
 8006106:	4603      	mov	r3, r0
 8006108:	2b00      	cmp	r3, #0
 800610a:	d001      	beq.n	8006110 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800610c:	2301      	movs	r3, #1
 800610e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006116:	461a      	mov	r2, r3
 8006118:	2300      	movs	r3, #0
 800611a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006122:	461a      	mov	r2, r3
 8006124:	2300      	movs	r3, #0
 8006126:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800612e:	461a      	mov	r2, r3
 8006130:	2300      	movs	r3, #0
 8006132:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006134:	2300      	movs	r3, #0
 8006136:	613b      	str	r3, [r7, #16]
 8006138:	e043      	b.n	80061c2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	015a      	lsls	r2, r3, #5
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	4413      	add	r3, r2
 8006142:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800614c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006150:	d118      	bne.n	8006184 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d10a      	bne.n	800616e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	015a      	lsls	r2, r3, #5
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	4413      	add	r3, r2
 8006160:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006164:	461a      	mov	r2, r3
 8006166:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800616a:	6013      	str	r3, [r2, #0]
 800616c:	e013      	b.n	8006196 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	015a      	lsls	r2, r3, #5
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	4413      	add	r3, r2
 8006176:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800617a:	461a      	mov	r2, r3
 800617c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006180:	6013      	str	r3, [r2, #0]
 8006182:	e008      	b.n	8006196 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	015a      	lsls	r2, r3, #5
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	4413      	add	r3, r2
 800618c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006190:	461a      	mov	r2, r3
 8006192:	2300      	movs	r3, #0
 8006194:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	015a      	lsls	r2, r3, #5
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	4413      	add	r3, r2
 800619e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061a2:	461a      	mov	r2, r3
 80061a4:	2300      	movs	r3, #0
 80061a6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	015a      	lsls	r2, r3, #5
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	4413      	add	r3, r2
 80061b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061b4:	461a      	mov	r2, r3
 80061b6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80061ba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	3301      	adds	r3, #1
 80061c0:	613b      	str	r3, [r7, #16]
 80061c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c4:	693a      	ldr	r2, [r7, #16]
 80061c6:	429a      	cmp	r2, r3
 80061c8:	d3b7      	bcc.n	800613a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80061ca:	2300      	movs	r3, #0
 80061cc:	613b      	str	r3, [r7, #16]
 80061ce:	e043      	b.n	8006258 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	015a      	lsls	r2, r3, #5
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	4413      	add	r3, r2
 80061d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061e6:	d118      	bne.n	800621a <USB_DevInit+0x206>
    {
      if (i == 0U)
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d10a      	bne.n	8006204 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	015a      	lsls	r2, r3, #5
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	4413      	add	r3, r2
 80061f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061fa:	461a      	mov	r2, r3
 80061fc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006200:	6013      	str	r3, [r2, #0]
 8006202:	e013      	b.n	800622c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	015a      	lsls	r2, r3, #5
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	4413      	add	r3, r2
 800620c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006210:	461a      	mov	r2, r3
 8006212:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006216:	6013      	str	r3, [r2, #0]
 8006218:	e008      	b.n	800622c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	015a      	lsls	r2, r3, #5
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	4413      	add	r3, r2
 8006222:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006226:	461a      	mov	r2, r3
 8006228:	2300      	movs	r3, #0
 800622a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	015a      	lsls	r2, r3, #5
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	4413      	add	r3, r2
 8006234:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006238:	461a      	mov	r2, r3
 800623a:	2300      	movs	r3, #0
 800623c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	015a      	lsls	r2, r3, #5
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	4413      	add	r3, r2
 8006246:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800624a:	461a      	mov	r2, r3
 800624c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006250:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	3301      	adds	r3, #1
 8006256:	613b      	str	r3, [r7, #16]
 8006258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800625a:	693a      	ldr	r2, [r7, #16]
 800625c:	429a      	cmp	r2, r3
 800625e:	d3b7      	bcc.n	80061d0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006266:	691b      	ldr	r3, [r3, #16]
 8006268:	68fa      	ldr	r2, [r7, #12]
 800626a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800626e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006272:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2200      	movs	r2, #0
 8006278:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006280:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006284:	2b00      	cmp	r3, #0
 8006286:	d105      	bne.n	8006294 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	699b      	ldr	r3, [r3, #24]
 800628c:	f043 0210 	orr.w	r2, r3, #16
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	699a      	ldr	r2, [r3, #24]
 8006298:	4b0f      	ldr	r3, [pc, #60]	; (80062d8 <USB_DevInit+0x2c4>)
 800629a:	4313      	orrs	r3, r2
 800629c:	687a      	ldr	r2, [r7, #4]
 800629e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80062a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d005      	beq.n	80062b2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	699b      	ldr	r3, [r3, #24]
 80062aa:	f043 0208 	orr.w	r2, r3, #8
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80062b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d107      	bne.n	80062c8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	699b      	ldr	r3, [r3, #24]
 80062bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80062c0:	f043 0304 	orr.w	r3, r3, #4
 80062c4:	687a      	ldr	r2, [r7, #4]
 80062c6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80062c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3718      	adds	r7, #24
 80062ce:	46bd      	mov	sp, r7
 80062d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80062d4:	b004      	add	sp, #16
 80062d6:	4770      	bx	lr
 80062d8:	803c3800 	.word	0x803c3800

080062dc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80062dc:	b480      	push	{r7}
 80062de:	b085      	sub	sp, #20
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80062e6:	2300      	movs	r3, #0
 80062e8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	3301      	adds	r3, #1
 80062ee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	4a13      	ldr	r2, [pc, #76]	; (8006340 <USB_FlushTxFifo+0x64>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d901      	bls.n	80062fc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80062f8:	2303      	movs	r3, #3
 80062fa:	e01b      	b.n	8006334 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	691b      	ldr	r3, [r3, #16]
 8006300:	2b00      	cmp	r3, #0
 8006302:	daf2      	bge.n	80062ea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006304:	2300      	movs	r3, #0
 8006306:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	019b      	lsls	r3, r3, #6
 800630c:	f043 0220 	orr.w	r2, r3, #32
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	3301      	adds	r3, #1
 8006318:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	4a08      	ldr	r2, [pc, #32]	; (8006340 <USB_FlushTxFifo+0x64>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d901      	bls.n	8006326 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006322:	2303      	movs	r3, #3
 8006324:	e006      	b.n	8006334 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	691b      	ldr	r3, [r3, #16]
 800632a:	f003 0320 	and.w	r3, r3, #32
 800632e:	2b20      	cmp	r3, #32
 8006330:	d0f0      	beq.n	8006314 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006332:	2300      	movs	r3, #0
}
 8006334:	4618      	mov	r0, r3
 8006336:	3714      	adds	r7, #20
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr
 8006340:	00030d40 	.word	0x00030d40

08006344 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006344:	b480      	push	{r7}
 8006346:	b085      	sub	sp, #20
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800634c:	2300      	movs	r3, #0
 800634e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	3301      	adds	r3, #1
 8006354:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	4a11      	ldr	r2, [pc, #68]	; (80063a0 <USB_FlushRxFifo+0x5c>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d901      	bls.n	8006362 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800635e:	2303      	movs	r3, #3
 8006360:	e018      	b.n	8006394 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	691b      	ldr	r3, [r3, #16]
 8006366:	2b00      	cmp	r3, #0
 8006368:	daf2      	bge.n	8006350 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800636a:	2300      	movs	r3, #0
 800636c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2210      	movs	r2, #16
 8006372:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	3301      	adds	r3, #1
 8006378:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	4a08      	ldr	r2, [pc, #32]	; (80063a0 <USB_FlushRxFifo+0x5c>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d901      	bls.n	8006386 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006382:	2303      	movs	r3, #3
 8006384:	e006      	b.n	8006394 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	691b      	ldr	r3, [r3, #16]
 800638a:	f003 0310 	and.w	r3, r3, #16
 800638e:	2b10      	cmp	r3, #16
 8006390:	d0f0      	beq.n	8006374 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006392:	2300      	movs	r3, #0
}
 8006394:	4618      	mov	r0, r3
 8006396:	3714      	adds	r7, #20
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr
 80063a0:	00030d40 	.word	0x00030d40

080063a4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b085      	sub	sp, #20
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	460b      	mov	r3, r1
 80063ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	78fb      	ldrb	r3, [r7, #3]
 80063be:	68f9      	ldr	r1, [r7, #12]
 80063c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80063c4:	4313      	orrs	r3, r2
 80063c6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80063c8:	2300      	movs	r3, #0
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3714      	adds	r7, #20
 80063ce:	46bd      	mov	sp, r7
 80063d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d4:	4770      	bx	lr

080063d6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80063d6:	b480      	push	{r7}
 80063d8:	b085      	sub	sp, #20
 80063da:	af00      	add	r7, sp, #0
 80063dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	68fa      	ldr	r2, [r7, #12]
 80063ec:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80063f0:	f023 0303 	bic.w	r3, r3, #3
 80063f4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	68fa      	ldr	r2, [r7, #12]
 8006400:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006404:	f043 0302 	orr.w	r3, r3, #2
 8006408:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800640a:	2300      	movs	r3, #0
}
 800640c:	4618      	mov	r0, r3
 800640e:	3714      	adds	r7, #20
 8006410:	46bd      	mov	sp, r7
 8006412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006416:	4770      	bx	lr

08006418 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006418:	b480      	push	{r7}
 800641a:	b083      	sub	sp, #12
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	695b      	ldr	r3, [r3, #20]
 8006424:	f003 0301 	and.w	r3, r3, #1
}
 8006428:	4618      	mov	r0, r3
 800642a:	370c      	adds	r7, #12
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr

08006434 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006434:	b480      	push	{r7}
 8006436:	b085      	sub	sp, #20
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800643c:	2300      	movs	r3, #0
 800643e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	3301      	adds	r3, #1
 8006444:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	4a13      	ldr	r2, [pc, #76]	; (8006498 <USB_CoreReset+0x64>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d901      	bls.n	8006452 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800644e:	2303      	movs	r3, #3
 8006450:	e01b      	b.n	800648a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	691b      	ldr	r3, [r3, #16]
 8006456:	2b00      	cmp	r3, #0
 8006458:	daf2      	bge.n	8006440 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800645a:	2300      	movs	r3, #0
 800645c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	691b      	ldr	r3, [r3, #16]
 8006462:	f043 0201 	orr.w	r2, r3, #1
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	3301      	adds	r3, #1
 800646e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	4a09      	ldr	r2, [pc, #36]	; (8006498 <USB_CoreReset+0x64>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d901      	bls.n	800647c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006478:	2303      	movs	r3, #3
 800647a:	e006      	b.n	800648a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	691b      	ldr	r3, [r3, #16]
 8006480:	f003 0301 	and.w	r3, r3, #1
 8006484:	2b01      	cmp	r3, #1
 8006486:	d0f0      	beq.n	800646a <USB_CoreReset+0x36>

  return HAL_OK;
 8006488:	2300      	movs	r3, #0
}
 800648a:	4618      	mov	r0, r3
 800648c:	3714      	adds	r7, #20
 800648e:	46bd      	mov	sp, r7
 8006490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006494:	4770      	bx	lr
 8006496:	bf00      	nop
 8006498:	00030d40 	.word	0x00030d40

0800649c <__errno>:
 800649c:	4b01      	ldr	r3, [pc, #4]	; (80064a4 <__errno+0x8>)
 800649e:	6818      	ldr	r0, [r3, #0]
 80064a0:	4770      	bx	lr
 80064a2:	bf00      	nop
 80064a4:	200011a0 	.word	0x200011a0

080064a8 <__libc_init_array>:
 80064a8:	b570      	push	{r4, r5, r6, lr}
 80064aa:	4d0d      	ldr	r5, [pc, #52]	; (80064e0 <__libc_init_array+0x38>)
 80064ac:	4c0d      	ldr	r4, [pc, #52]	; (80064e4 <__libc_init_array+0x3c>)
 80064ae:	1b64      	subs	r4, r4, r5
 80064b0:	10a4      	asrs	r4, r4, #2
 80064b2:	2600      	movs	r6, #0
 80064b4:	42a6      	cmp	r6, r4
 80064b6:	d109      	bne.n	80064cc <__libc_init_array+0x24>
 80064b8:	4d0b      	ldr	r5, [pc, #44]	; (80064e8 <__libc_init_array+0x40>)
 80064ba:	4c0c      	ldr	r4, [pc, #48]	; (80064ec <__libc_init_array+0x44>)
 80064bc:	f000 ffae 	bl	800741c <_init>
 80064c0:	1b64      	subs	r4, r4, r5
 80064c2:	10a4      	asrs	r4, r4, #2
 80064c4:	2600      	movs	r6, #0
 80064c6:	42a6      	cmp	r6, r4
 80064c8:	d105      	bne.n	80064d6 <__libc_init_array+0x2e>
 80064ca:	bd70      	pop	{r4, r5, r6, pc}
 80064cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80064d0:	4798      	blx	r3
 80064d2:	3601      	adds	r6, #1
 80064d4:	e7ee      	b.n	80064b4 <__libc_init_array+0xc>
 80064d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80064da:	4798      	blx	r3
 80064dc:	3601      	adds	r6, #1
 80064de:	e7f2      	b.n	80064c6 <__libc_init_array+0x1e>
 80064e0:	080074fc 	.word	0x080074fc
 80064e4:	080074fc 	.word	0x080074fc
 80064e8:	080074fc 	.word	0x080074fc
 80064ec:	08007500 	.word	0x08007500

080064f0 <memset>:
 80064f0:	4402      	add	r2, r0
 80064f2:	4603      	mov	r3, r0
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d100      	bne.n	80064fa <memset+0xa>
 80064f8:	4770      	bx	lr
 80064fa:	f803 1b01 	strb.w	r1, [r3], #1
 80064fe:	e7f9      	b.n	80064f4 <memset+0x4>

08006500 <iprintf>:
 8006500:	b40f      	push	{r0, r1, r2, r3}
 8006502:	4b0a      	ldr	r3, [pc, #40]	; (800652c <iprintf+0x2c>)
 8006504:	b513      	push	{r0, r1, r4, lr}
 8006506:	681c      	ldr	r4, [r3, #0]
 8006508:	b124      	cbz	r4, 8006514 <iprintf+0x14>
 800650a:	69a3      	ldr	r3, [r4, #24]
 800650c:	b913      	cbnz	r3, 8006514 <iprintf+0x14>
 800650e:	4620      	mov	r0, r4
 8006510:	f000 f866 	bl	80065e0 <__sinit>
 8006514:	ab05      	add	r3, sp, #20
 8006516:	9a04      	ldr	r2, [sp, #16]
 8006518:	68a1      	ldr	r1, [r4, #8]
 800651a:	9301      	str	r3, [sp, #4]
 800651c:	4620      	mov	r0, r4
 800651e:	f000 f9bd 	bl	800689c <_vfiprintf_r>
 8006522:	b002      	add	sp, #8
 8006524:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006528:	b004      	add	sp, #16
 800652a:	4770      	bx	lr
 800652c:	200011a0 	.word	0x200011a0

08006530 <std>:
 8006530:	2300      	movs	r3, #0
 8006532:	b510      	push	{r4, lr}
 8006534:	4604      	mov	r4, r0
 8006536:	e9c0 3300 	strd	r3, r3, [r0]
 800653a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800653e:	6083      	str	r3, [r0, #8]
 8006540:	8181      	strh	r1, [r0, #12]
 8006542:	6643      	str	r3, [r0, #100]	; 0x64
 8006544:	81c2      	strh	r2, [r0, #14]
 8006546:	6183      	str	r3, [r0, #24]
 8006548:	4619      	mov	r1, r3
 800654a:	2208      	movs	r2, #8
 800654c:	305c      	adds	r0, #92	; 0x5c
 800654e:	f7ff ffcf 	bl	80064f0 <memset>
 8006552:	4b05      	ldr	r3, [pc, #20]	; (8006568 <std+0x38>)
 8006554:	6263      	str	r3, [r4, #36]	; 0x24
 8006556:	4b05      	ldr	r3, [pc, #20]	; (800656c <std+0x3c>)
 8006558:	62a3      	str	r3, [r4, #40]	; 0x28
 800655a:	4b05      	ldr	r3, [pc, #20]	; (8006570 <std+0x40>)
 800655c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800655e:	4b05      	ldr	r3, [pc, #20]	; (8006574 <std+0x44>)
 8006560:	6224      	str	r4, [r4, #32]
 8006562:	6323      	str	r3, [r4, #48]	; 0x30
 8006564:	bd10      	pop	{r4, pc}
 8006566:	bf00      	nop
 8006568:	08006e45 	.word	0x08006e45
 800656c:	08006e67 	.word	0x08006e67
 8006570:	08006e9f 	.word	0x08006e9f
 8006574:	08006ec3 	.word	0x08006ec3

08006578 <_cleanup_r>:
 8006578:	4901      	ldr	r1, [pc, #4]	; (8006580 <_cleanup_r+0x8>)
 800657a:	f000 b8af 	b.w	80066dc <_fwalk_reent>
 800657e:	bf00      	nop
 8006580:	0800719d 	.word	0x0800719d

08006584 <__sfmoreglue>:
 8006584:	b570      	push	{r4, r5, r6, lr}
 8006586:	2268      	movs	r2, #104	; 0x68
 8006588:	1e4d      	subs	r5, r1, #1
 800658a:	4355      	muls	r5, r2
 800658c:	460e      	mov	r6, r1
 800658e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006592:	f000 f8e5 	bl	8006760 <_malloc_r>
 8006596:	4604      	mov	r4, r0
 8006598:	b140      	cbz	r0, 80065ac <__sfmoreglue+0x28>
 800659a:	2100      	movs	r1, #0
 800659c:	e9c0 1600 	strd	r1, r6, [r0]
 80065a0:	300c      	adds	r0, #12
 80065a2:	60a0      	str	r0, [r4, #8]
 80065a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80065a8:	f7ff ffa2 	bl	80064f0 <memset>
 80065ac:	4620      	mov	r0, r4
 80065ae:	bd70      	pop	{r4, r5, r6, pc}

080065b0 <__sfp_lock_acquire>:
 80065b0:	4801      	ldr	r0, [pc, #4]	; (80065b8 <__sfp_lock_acquire+0x8>)
 80065b2:	f000 b8b3 	b.w	800671c <__retarget_lock_acquire_recursive>
 80065b6:	bf00      	nop
 80065b8:	20002aad 	.word	0x20002aad

080065bc <__sfp_lock_release>:
 80065bc:	4801      	ldr	r0, [pc, #4]	; (80065c4 <__sfp_lock_release+0x8>)
 80065be:	f000 b8ae 	b.w	800671e <__retarget_lock_release_recursive>
 80065c2:	bf00      	nop
 80065c4:	20002aad 	.word	0x20002aad

080065c8 <__sinit_lock_acquire>:
 80065c8:	4801      	ldr	r0, [pc, #4]	; (80065d0 <__sinit_lock_acquire+0x8>)
 80065ca:	f000 b8a7 	b.w	800671c <__retarget_lock_acquire_recursive>
 80065ce:	bf00      	nop
 80065d0:	20002aae 	.word	0x20002aae

080065d4 <__sinit_lock_release>:
 80065d4:	4801      	ldr	r0, [pc, #4]	; (80065dc <__sinit_lock_release+0x8>)
 80065d6:	f000 b8a2 	b.w	800671e <__retarget_lock_release_recursive>
 80065da:	bf00      	nop
 80065dc:	20002aae 	.word	0x20002aae

080065e0 <__sinit>:
 80065e0:	b510      	push	{r4, lr}
 80065e2:	4604      	mov	r4, r0
 80065e4:	f7ff fff0 	bl	80065c8 <__sinit_lock_acquire>
 80065e8:	69a3      	ldr	r3, [r4, #24]
 80065ea:	b11b      	cbz	r3, 80065f4 <__sinit+0x14>
 80065ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065f0:	f7ff bff0 	b.w	80065d4 <__sinit_lock_release>
 80065f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80065f8:	6523      	str	r3, [r4, #80]	; 0x50
 80065fa:	4b13      	ldr	r3, [pc, #76]	; (8006648 <__sinit+0x68>)
 80065fc:	4a13      	ldr	r2, [pc, #76]	; (800664c <__sinit+0x6c>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	62a2      	str	r2, [r4, #40]	; 0x28
 8006602:	42a3      	cmp	r3, r4
 8006604:	bf04      	itt	eq
 8006606:	2301      	moveq	r3, #1
 8006608:	61a3      	streq	r3, [r4, #24]
 800660a:	4620      	mov	r0, r4
 800660c:	f000 f820 	bl	8006650 <__sfp>
 8006610:	6060      	str	r0, [r4, #4]
 8006612:	4620      	mov	r0, r4
 8006614:	f000 f81c 	bl	8006650 <__sfp>
 8006618:	60a0      	str	r0, [r4, #8]
 800661a:	4620      	mov	r0, r4
 800661c:	f000 f818 	bl	8006650 <__sfp>
 8006620:	2200      	movs	r2, #0
 8006622:	60e0      	str	r0, [r4, #12]
 8006624:	2104      	movs	r1, #4
 8006626:	6860      	ldr	r0, [r4, #4]
 8006628:	f7ff ff82 	bl	8006530 <std>
 800662c:	68a0      	ldr	r0, [r4, #8]
 800662e:	2201      	movs	r2, #1
 8006630:	2109      	movs	r1, #9
 8006632:	f7ff ff7d 	bl	8006530 <std>
 8006636:	68e0      	ldr	r0, [r4, #12]
 8006638:	2202      	movs	r2, #2
 800663a:	2112      	movs	r1, #18
 800663c:	f7ff ff78 	bl	8006530 <std>
 8006640:	2301      	movs	r3, #1
 8006642:	61a3      	str	r3, [r4, #24]
 8006644:	e7d2      	b.n	80065ec <__sinit+0xc>
 8006646:	bf00      	nop
 8006648:	0800745c 	.word	0x0800745c
 800664c:	08006579 	.word	0x08006579

08006650 <__sfp>:
 8006650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006652:	4607      	mov	r7, r0
 8006654:	f7ff ffac 	bl	80065b0 <__sfp_lock_acquire>
 8006658:	4b1e      	ldr	r3, [pc, #120]	; (80066d4 <__sfp+0x84>)
 800665a:	681e      	ldr	r6, [r3, #0]
 800665c:	69b3      	ldr	r3, [r6, #24]
 800665e:	b913      	cbnz	r3, 8006666 <__sfp+0x16>
 8006660:	4630      	mov	r0, r6
 8006662:	f7ff ffbd 	bl	80065e0 <__sinit>
 8006666:	3648      	adds	r6, #72	; 0x48
 8006668:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800666c:	3b01      	subs	r3, #1
 800666e:	d503      	bpl.n	8006678 <__sfp+0x28>
 8006670:	6833      	ldr	r3, [r6, #0]
 8006672:	b30b      	cbz	r3, 80066b8 <__sfp+0x68>
 8006674:	6836      	ldr	r6, [r6, #0]
 8006676:	e7f7      	b.n	8006668 <__sfp+0x18>
 8006678:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800667c:	b9d5      	cbnz	r5, 80066b4 <__sfp+0x64>
 800667e:	4b16      	ldr	r3, [pc, #88]	; (80066d8 <__sfp+0x88>)
 8006680:	60e3      	str	r3, [r4, #12]
 8006682:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006686:	6665      	str	r5, [r4, #100]	; 0x64
 8006688:	f000 f847 	bl	800671a <__retarget_lock_init_recursive>
 800668c:	f7ff ff96 	bl	80065bc <__sfp_lock_release>
 8006690:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006694:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006698:	6025      	str	r5, [r4, #0]
 800669a:	61a5      	str	r5, [r4, #24]
 800669c:	2208      	movs	r2, #8
 800669e:	4629      	mov	r1, r5
 80066a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80066a4:	f7ff ff24 	bl	80064f0 <memset>
 80066a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80066ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80066b0:	4620      	mov	r0, r4
 80066b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066b4:	3468      	adds	r4, #104	; 0x68
 80066b6:	e7d9      	b.n	800666c <__sfp+0x1c>
 80066b8:	2104      	movs	r1, #4
 80066ba:	4638      	mov	r0, r7
 80066bc:	f7ff ff62 	bl	8006584 <__sfmoreglue>
 80066c0:	4604      	mov	r4, r0
 80066c2:	6030      	str	r0, [r6, #0]
 80066c4:	2800      	cmp	r0, #0
 80066c6:	d1d5      	bne.n	8006674 <__sfp+0x24>
 80066c8:	f7ff ff78 	bl	80065bc <__sfp_lock_release>
 80066cc:	230c      	movs	r3, #12
 80066ce:	603b      	str	r3, [r7, #0]
 80066d0:	e7ee      	b.n	80066b0 <__sfp+0x60>
 80066d2:	bf00      	nop
 80066d4:	0800745c 	.word	0x0800745c
 80066d8:	ffff0001 	.word	0xffff0001

080066dc <_fwalk_reent>:
 80066dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066e0:	4606      	mov	r6, r0
 80066e2:	4688      	mov	r8, r1
 80066e4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80066e8:	2700      	movs	r7, #0
 80066ea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80066ee:	f1b9 0901 	subs.w	r9, r9, #1
 80066f2:	d505      	bpl.n	8006700 <_fwalk_reent+0x24>
 80066f4:	6824      	ldr	r4, [r4, #0]
 80066f6:	2c00      	cmp	r4, #0
 80066f8:	d1f7      	bne.n	80066ea <_fwalk_reent+0xe>
 80066fa:	4638      	mov	r0, r7
 80066fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006700:	89ab      	ldrh	r3, [r5, #12]
 8006702:	2b01      	cmp	r3, #1
 8006704:	d907      	bls.n	8006716 <_fwalk_reent+0x3a>
 8006706:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800670a:	3301      	adds	r3, #1
 800670c:	d003      	beq.n	8006716 <_fwalk_reent+0x3a>
 800670e:	4629      	mov	r1, r5
 8006710:	4630      	mov	r0, r6
 8006712:	47c0      	blx	r8
 8006714:	4307      	orrs	r7, r0
 8006716:	3568      	adds	r5, #104	; 0x68
 8006718:	e7e9      	b.n	80066ee <_fwalk_reent+0x12>

0800671a <__retarget_lock_init_recursive>:
 800671a:	4770      	bx	lr

0800671c <__retarget_lock_acquire_recursive>:
 800671c:	4770      	bx	lr

0800671e <__retarget_lock_release_recursive>:
 800671e:	4770      	bx	lr

08006720 <sbrk_aligned>:
 8006720:	b570      	push	{r4, r5, r6, lr}
 8006722:	4e0e      	ldr	r6, [pc, #56]	; (800675c <sbrk_aligned+0x3c>)
 8006724:	460c      	mov	r4, r1
 8006726:	6831      	ldr	r1, [r6, #0]
 8006728:	4605      	mov	r5, r0
 800672a:	b911      	cbnz	r1, 8006732 <sbrk_aligned+0x12>
 800672c:	f000 fb7a 	bl	8006e24 <_sbrk_r>
 8006730:	6030      	str	r0, [r6, #0]
 8006732:	4621      	mov	r1, r4
 8006734:	4628      	mov	r0, r5
 8006736:	f000 fb75 	bl	8006e24 <_sbrk_r>
 800673a:	1c43      	adds	r3, r0, #1
 800673c:	d00a      	beq.n	8006754 <sbrk_aligned+0x34>
 800673e:	1cc4      	adds	r4, r0, #3
 8006740:	f024 0403 	bic.w	r4, r4, #3
 8006744:	42a0      	cmp	r0, r4
 8006746:	d007      	beq.n	8006758 <sbrk_aligned+0x38>
 8006748:	1a21      	subs	r1, r4, r0
 800674a:	4628      	mov	r0, r5
 800674c:	f000 fb6a 	bl	8006e24 <_sbrk_r>
 8006750:	3001      	adds	r0, #1
 8006752:	d101      	bne.n	8006758 <sbrk_aligned+0x38>
 8006754:	f04f 34ff 	mov.w	r4, #4294967295
 8006758:	4620      	mov	r0, r4
 800675a:	bd70      	pop	{r4, r5, r6, pc}
 800675c:	20002ab4 	.word	0x20002ab4

08006760 <_malloc_r>:
 8006760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006764:	1ccd      	adds	r5, r1, #3
 8006766:	f025 0503 	bic.w	r5, r5, #3
 800676a:	3508      	adds	r5, #8
 800676c:	2d0c      	cmp	r5, #12
 800676e:	bf38      	it	cc
 8006770:	250c      	movcc	r5, #12
 8006772:	2d00      	cmp	r5, #0
 8006774:	4607      	mov	r7, r0
 8006776:	db01      	blt.n	800677c <_malloc_r+0x1c>
 8006778:	42a9      	cmp	r1, r5
 800677a:	d905      	bls.n	8006788 <_malloc_r+0x28>
 800677c:	230c      	movs	r3, #12
 800677e:	603b      	str	r3, [r7, #0]
 8006780:	2600      	movs	r6, #0
 8006782:	4630      	mov	r0, r6
 8006784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006788:	4e2e      	ldr	r6, [pc, #184]	; (8006844 <_malloc_r+0xe4>)
 800678a:	f000 fdbb 	bl	8007304 <__malloc_lock>
 800678e:	6833      	ldr	r3, [r6, #0]
 8006790:	461c      	mov	r4, r3
 8006792:	bb34      	cbnz	r4, 80067e2 <_malloc_r+0x82>
 8006794:	4629      	mov	r1, r5
 8006796:	4638      	mov	r0, r7
 8006798:	f7ff ffc2 	bl	8006720 <sbrk_aligned>
 800679c:	1c43      	adds	r3, r0, #1
 800679e:	4604      	mov	r4, r0
 80067a0:	d14d      	bne.n	800683e <_malloc_r+0xde>
 80067a2:	6834      	ldr	r4, [r6, #0]
 80067a4:	4626      	mov	r6, r4
 80067a6:	2e00      	cmp	r6, #0
 80067a8:	d140      	bne.n	800682c <_malloc_r+0xcc>
 80067aa:	6823      	ldr	r3, [r4, #0]
 80067ac:	4631      	mov	r1, r6
 80067ae:	4638      	mov	r0, r7
 80067b0:	eb04 0803 	add.w	r8, r4, r3
 80067b4:	f000 fb36 	bl	8006e24 <_sbrk_r>
 80067b8:	4580      	cmp	r8, r0
 80067ba:	d13a      	bne.n	8006832 <_malloc_r+0xd2>
 80067bc:	6821      	ldr	r1, [r4, #0]
 80067be:	3503      	adds	r5, #3
 80067c0:	1a6d      	subs	r5, r5, r1
 80067c2:	f025 0503 	bic.w	r5, r5, #3
 80067c6:	3508      	adds	r5, #8
 80067c8:	2d0c      	cmp	r5, #12
 80067ca:	bf38      	it	cc
 80067cc:	250c      	movcc	r5, #12
 80067ce:	4629      	mov	r1, r5
 80067d0:	4638      	mov	r0, r7
 80067d2:	f7ff ffa5 	bl	8006720 <sbrk_aligned>
 80067d6:	3001      	adds	r0, #1
 80067d8:	d02b      	beq.n	8006832 <_malloc_r+0xd2>
 80067da:	6823      	ldr	r3, [r4, #0]
 80067dc:	442b      	add	r3, r5
 80067de:	6023      	str	r3, [r4, #0]
 80067e0:	e00e      	b.n	8006800 <_malloc_r+0xa0>
 80067e2:	6822      	ldr	r2, [r4, #0]
 80067e4:	1b52      	subs	r2, r2, r5
 80067e6:	d41e      	bmi.n	8006826 <_malloc_r+0xc6>
 80067e8:	2a0b      	cmp	r2, #11
 80067ea:	d916      	bls.n	800681a <_malloc_r+0xba>
 80067ec:	1961      	adds	r1, r4, r5
 80067ee:	42a3      	cmp	r3, r4
 80067f0:	6025      	str	r5, [r4, #0]
 80067f2:	bf18      	it	ne
 80067f4:	6059      	strne	r1, [r3, #4]
 80067f6:	6863      	ldr	r3, [r4, #4]
 80067f8:	bf08      	it	eq
 80067fa:	6031      	streq	r1, [r6, #0]
 80067fc:	5162      	str	r2, [r4, r5]
 80067fe:	604b      	str	r3, [r1, #4]
 8006800:	4638      	mov	r0, r7
 8006802:	f104 060b 	add.w	r6, r4, #11
 8006806:	f000 fd83 	bl	8007310 <__malloc_unlock>
 800680a:	f026 0607 	bic.w	r6, r6, #7
 800680e:	1d23      	adds	r3, r4, #4
 8006810:	1af2      	subs	r2, r6, r3
 8006812:	d0b6      	beq.n	8006782 <_malloc_r+0x22>
 8006814:	1b9b      	subs	r3, r3, r6
 8006816:	50a3      	str	r3, [r4, r2]
 8006818:	e7b3      	b.n	8006782 <_malloc_r+0x22>
 800681a:	6862      	ldr	r2, [r4, #4]
 800681c:	42a3      	cmp	r3, r4
 800681e:	bf0c      	ite	eq
 8006820:	6032      	streq	r2, [r6, #0]
 8006822:	605a      	strne	r2, [r3, #4]
 8006824:	e7ec      	b.n	8006800 <_malloc_r+0xa0>
 8006826:	4623      	mov	r3, r4
 8006828:	6864      	ldr	r4, [r4, #4]
 800682a:	e7b2      	b.n	8006792 <_malloc_r+0x32>
 800682c:	4634      	mov	r4, r6
 800682e:	6876      	ldr	r6, [r6, #4]
 8006830:	e7b9      	b.n	80067a6 <_malloc_r+0x46>
 8006832:	230c      	movs	r3, #12
 8006834:	603b      	str	r3, [r7, #0]
 8006836:	4638      	mov	r0, r7
 8006838:	f000 fd6a 	bl	8007310 <__malloc_unlock>
 800683c:	e7a1      	b.n	8006782 <_malloc_r+0x22>
 800683e:	6025      	str	r5, [r4, #0]
 8006840:	e7de      	b.n	8006800 <_malloc_r+0xa0>
 8006842:	bf00      	nop
 8006844:	20002ab0 	.word	0x20002ab0

08006848 <__sfputc_r>:
 8006848:	6893      	ldr	r3, [r2, #8]
 800684a:	3b01      	subs	r3, #1
 800684c:	2b00      	cmp	r3, #0
 800684e:	b410      	push	{r4}
 8006850:	6093      	str	r3, [r2, #8]
 8006852:	da08      	bge.n	8006866 <__sfputc_r+0x1e>
 8006854:	6994      	ldr	r4, [r2, #24]
 8006856:	42a3      	cmp	r3, r4
 8006858:	db01      	blt.n	800685e <__sfputc_r+0x16>
 800685a:	290a      	cmp	r1, #10
 800685c:	d103      	bne.n	8006866 <__sfputc_r+0x1e>
 800685e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006862:	f000 bb33 	b.w	8006ecc <__swbuf_r>
 8006866:	6813      	ldr	r3, [r2, #0]
 8006868:	1c58      	adds	r0, r3, #1
 800686a:	6010      	str	r0, [r2, #0]
 800686c:	7019      	strb	r1, [r3, #0]
 800686e:	4608      	mov	r0, r1
 8006870:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006874:	4770      	bx	lr

08006876 <__sfputs_r>:
 8006876:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006878:	4606      	mov	r6, r0
 800687a:	460f      	mov	r7, r1
 800687c:	4614      	mov	r4, r2
 800687e:	18d5      	adds	r5, r2, r3
 8006880:	42ac      	cmp	r4, r5
 8006882:	d101      	bne.n	8006888 <__sfputs_r+0x12>
 8006884:	2000      	movs	r0, #0
 8006886:	e007      	b.n	8006898 <__sfputs_r+0x22>
 8006888:	f814 1b01 	ldrb.w	r1, [r4], #1
 800688c:	463a      	mov	r2, r7
 800688e:	4630      	mov	r0, r6
 8006890:	f7ff ffda 	bl	8006848 <__sfputc_r>
 8006894:	1c43      	adds	r3, r0, #1
 8006896:	d1f3      	bne.n	8006880 <__sfputs_r+0xa>
 8006898:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800689c <_vfiprintf_r>:
 800689c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068a0:	460d      	mov	r5, r1
 80068a2:	b09d      	sub	sp, #116	; 0x74
 80068a4:	4614      	mov	r4, r2
 80068a6:	4698      	mov	r8, r3
 80068a8:	4606      	mov	r6, r0
 80068aa:	b118      	cbz	r0, 80068b4 <_vfiprintf_r+0x18>
 80068ac:	6983      	ldr	r3, [r0, #24]
 80068ae:	b90b      	cbnz	r3, 80068b4 <_vfiprintf_r+0x18>
 80068b0:	f7ff fe96 	bl	80065e0 <__sinit>
 80068b4:	4b89      	ldr	r3, [pc, #548]	; (8006adc <_vfiprintf_r+0x240>)
 80068b6:	429d      	cmp	r5, r3
 80068b8:	d11b      	bne.n	80068f2 <_vfiprintf_r+0x56>
 80068ba:	6875      	ldr	r5, [r6, #4]
 80068bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80068be:	07d9      	lsls	r1, r3, #31
 80068c0:	d405      	bmi.n	80068ce <_vfiprintf_r+0x32>
 80068c2:	89ab      	ldrh	r3, [r5, #12]
 80068c4:	059a      	lsls	r2, r3, #22
 80068c6:	d402      	bmi.n	80068ce <_vfiprintf_r+0x32>
 80068c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80068ca:	f7ff ff27 	bl	800671c <__retarget_lock_acquire_recursive>
 80068ce:	89ab      	ldrh	r3, [r5, #12]
 80068d0:	071b      	lsls	r3, r3, #28
 80068d2:	d501      	bpl.n	80068d8 <_vfiprintf_r+0x3c>
 80068d4:	692b      	ldr	r3, [r5, #16]
 80068d6:	b9eb      	cbnz	r3, 8006914 <_vfiprintf_r+0x78>
 80068d8:	4629      	mov	r1, r5
 80068da:	4630      	mov	r0, r6
 80068dc:	f000 fb5a 	bl	8006f94 <__swsetup_r>
 80068e0:	b1c0      	cbz	r0, 8006914 <_vfiprintf_r+0x78>
 80068e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80068e4:	07dc      	lsls	r4, r3, #31
 80068e6:	d50e      	bpl.n	8006906 <_vfiprintf_r+0x6a>
 80068e8:	f04f 30ff 	mov.w	r0, #4294967295
 80068ec:	b01d      	add	sp, #116	; 0x74
 80068ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068f2:	4b7b      	ldr	r3, [pc, #492]	; (8006ae0 <_vfiprintf_r+0x244>)
 80068f4:	429d      	cmp	r5, r3
 80068f6:	d101      	bne.n	80068fc <_vfiprintf_r+0x60>
 80068f8:	68b5      	ldr	r5, [r6, #8]
 80068fa:	e7df      	b.n	80068bc <_vfiprintf_r+0x20>
 80068fc:	4b79      	ldr	r3, [pc, #484]	; (8006ae4 <_vfiprintf_r+0x248>)
 80068fe:	429d      	cmp	r5, r3
 8006900:	bf08      	it	eq
 8006902:	68f5      	ldreq	r5, [r6, #12]
 8006904:	e7da      	b.n	80068bc <_vfiprintf_r+0x20>
 8006906:	89ab      	ldrh	r3, [r5, #12]
 8006908:	0598      	lsls	r0, r3, #22
 800690a:	d4ed      	bmi.n	80068e8 <_vfiprintf_r+0x4c>
 800690c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800690e:	f7ff ff06 	bl	800671e <__retarget_lock_release_recursive>
 8006912:	e7e9      	b.n	80068e8 <_vfiprintf_r+0x4c>
 8006914:	2300      	movs	r3, #0
 8006916:	9309      	str	r3, [sp, #36]	; 0x24
 8006918:	2320      	movs	r3, #32
 800691a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800691e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006922:	2330      	movs	r3, #48	; 0x30
 8006924:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006ae8 <_vfiprintf_r+0x24c>
 8006928:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800692c:	f04f 0901 	mov.w	r9, #1
 8006930:	4623      	mov	r3, r4
 8006932:	469a      	mov	sl, r3
 8006934:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006938:	b10a      	cbz	r2, 800693e <_vfiprintf_r+0xa2>
 800693a:	2a25      	cmp	r2, #37	; 0x25
 800693c:	d1f9      	bne.n	8006932 <_vfiprintf_r+0x96>
 800693e:	ebba 0b04 	subs.w	fp, sl, r4
 8006942:	d00b      	beq.n	800695c <_vfiprintf_r+0xc0>
 8006944:	465b      	mov	r3, fp
 8006946:	4622      	mov	r2, r4
 8006948:	4629      	mov	r1, r5
 800694a:	4630      	mov	r0, r6
 800694c:	f7ff ff93 	bl	8006876 <__sfputs_r>
 8006950:	3001      	adds	r0, #1
 8006952:	f000 80aa 	beq.w	8006aaa <_vfiprintf_r+0x20e>
 8006956:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006958:	445a      	add	r2, fp
 800695a:	9209      	str	r2, [sp, #36]	; 0x24
 800695c:	f89a 3000 	ldrb.w	r3, [sl]
 8006960:	2b00      	cmp	r3, #0
 8006962:	f000 80a2 	beq.w	8006aaa <_vfiprintf_r+0x20e>
 8006966:	2300      	movs	r3, #0
 8006968:	f04f 32ff 	mov.w	r2, #4294967295
 800696c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006970:	f10a 0a01 	add.w	sl, sl, #1
 8006974:	9304      	str	r3, [sp, #16]
 8006976:	9307      	str	r3, [sp, #28]
 8006978:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800697c:	931a      	str	r3, [sp, #104]	; 0x68
 800697e:	4654      	mov	r4, sl
 8006980:	2205      	movs	r2, #5
 8006982:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006986:	4858      	ldr	r0, [pc, #352]	; (8006ae8 <_vfiprintf_r+0x24c>)
 8006988:	f7f9 fc32 	bl	80001f0 <memchr>
 800698c:	9a04      	ldr	r2, [sp, #16]
 800698e:	b9d8      	cbnz	r0, 80069c8 <_vfiprintf_r+0x12c>
 8006990:	06d1      	lsls	r1, r2, #27
 8006992:	bf44      	itt	mi
 8006994:	2320      	movmi	r3, #32
 8006996:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800699a:	0713      	lsls	r3, r2, #28
 800699c:	bf44      	itt	mi
 800699e:	232b      	movmi	r3, #43	; 0x2b
 80069a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80069a4:	f89a 3000 	ldrb.w	r3, [sl]
 80069a8:	2b2a      	cmp	r3, #42	; 0x2a
 80069aa:	d015      	beq.n	80069d8 <_vfiprintf_r+0x13c>
 80069ac:	9a07      	ldr	r2, [sp, #28]
 80069ae:	4654      	mov	r4, sl
 80069b0:	2000      	movs	r0, #0
 80069b2:	f04f 0c0a 	mov.w	ip, #10
 80069b6:	4621      	mov	r1, r4
 80069b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80069bc:	3b30      	subs	r3, #48	; 0x30
 80069be:	2b09      	cmp	r3, #9
 80069c0:	d94e      	bls.n	8006a60 <_vfiprintf_r+0x1c4>
 80069c2:	b1b0      	cbz	r0, 80069f2 <_vfiprintf_r+0x156>
 80069c4:	9207      	str	r2, [sp, #28]
 80069c6:	e014      	b.n	80069f2 <_vfiprintf_r+0x156>
 80069c8:	eba0 0308 	sub.w	r3, r0, r8
 80069cc:	fa09 f303 	lsl.w	r3, r9, r3
 80069d0:	4313      	orrs	r3, r2
 80069d2:	9304      	str	r3, [sp, #16]
 80069d4:	46a2      	mov	sl, r4
 80069d6:	e7d2      	b.n	800697e <_vfiprintf_r+0xe2>
 80069d8:	9b03      	ldr	r3, [sp, #12]
 80069da:	1d19      	adds	r1, r3, #4
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	9103      	str	r1, [sp, #12]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	bfbb      	ittet	lt
 80069e4:	425b      	neglt	r3, r3
 80069e6:	f042 0202 	orrlt.w	r2, r2, #2
 80069ea:	9307      	strge	r3, [sp, #28]
 80069ec:	9307      	strlt	r3, [sp, #28]
 80069ee:	bfb8      	it	lt
 80069f0:	9204      	strlt	r2, [sp, #16]
 80069f2:	7823      	ldrb	r3, [r4, #0]
 80069f4:	2b2e      	cmp	r3, #46	; 0x2e
 80069f6:	d10c      	bne.n	8006a12 <_vfiprintf_r+0x176>
 80069f8:	7863      	ldrb	r3, [r4, #1]
 80069fa:	2b2a      	cmp	r3, #42	; 0x2a
 80069fc:	d135      	bne.n	8006a6a <_vfiprintf_r+0x1ce>
 80069fe:	9b03      	ldr	r3, [sp, #12]
 8006a00:	1d1a      	adds	r2, r3, #4
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	9203      	str	r2, [sp, #12]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	bfb8      	it	lt
 8006a0a:	f04f 33ff 	movlt.w	r3, #4294967295
 8006a0e:	3402      	adds	r4, #2
 8006a10:	9305      	str	r3, [sp, #20]
 8006a12:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006af8 <_vfiprintf_r+0x25c>
 8006a16:	7821      	ldrb	r1, [r4, #0]
 8006a18:	2203      	movs	r2, #3
 8006a1a:	4650      	mov	r0, sl
 8006a1c:	f7f9 fbe8 	bl	80001f0 <memchr>
 8006a20:	b140      	cbz	r0, 8006a34 <_vfiprintf_r+0x198>
 8006a22:	2340      	movs	r3, #64	; 0x40
 8006a24:	eba0 000a 	sub.w	r0, r0, sl
 8006a28:	fa03 f000 	lsl.w	r0, r3, r0
 8006a2c:	9b04      	ldr	r3, [sp, #16]
 8006a2e:	4303      	orrs	r3, r0
 8006a30:	3401      	adds	r4, #1
 8006a32:	9304      	str	r3, [sp, #16]
 8006a34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a38:	482c      	ldr	r0, [pc, #176]	; (8006aec <_vfiprintf_r+0x250>)
 8006a3a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006a3e:	2206      	movs	r2, #6
 8006a40:	f7f9 fbd6 	bl	80001f0 <memchr>
 8006a44:	2800      	cmp	r0, #0
 8006a46:	d03f      	beq.n	8006ac8 <_vfiprintf_r+0x22c>
 8006a48:	4b29      	ldr	r3, [pc, #164]	; (8006af0 <_vfiprintf_r+0x254>)
 8006a4a:	bb1b      	cbnz	r3, 8006a94 <_vfiprintf_r+0x1f8>
 8006a4c:	9b03      	ldr	r3, [sp, #12]
 8006a4e:	3307      	adds	r3, #7
 8006a50:	f023 0307 	bic.w	r3, r3, #7
 8006a54:	3308      	adds	r3, #8
 8006a56:	9303      	str	r3, [sp, #12]
 8006a58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a5a:	443b      	add	r3, r7
 8006a5c:	9309      	str	r3, [sp, #36]	; 0x24
 8006a5e:	e767      	b.n	8006930 <_vfiprintf_r+0x94>
 8006a60:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a64:	460c      	mov	r4, r1
 8006a66:	2001      	movs	r0, #1
 8006a68:	e7a5      	b.n	80069b6 <_vfiprintf_r+0x11a>
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	3401      	adds	r4, #1
 8006a6e:	9305      	str	r3, [sp, #20]
 8006a70:	4619      	mov	r1, r3
 8006a72:	f04f 0c0a 	mov.w	ip, #10
 8006a76:	4620      	mov	r0, r4
 8006a78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a7c:	3a30      	subs	r2, #48	; 0x30
 8006a7e:	2a09      	cmp	r2, #9
 8006a80:	d903      	bls.n	8006a8a <_vfiprintf_r+0x1ee>
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d0c5      	beq.n	8006a12 <_vfiprintf_r+0x176>
 8006a86:	9105      	str	r1, [sp, #20]
 8006a88:	e7c3      	b.n	8006a12 <_vfiprintf_r+0x176>
 8006a8a:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a8e:	4604      	mov	r4, r0
 8006a90:	2301      	movs	r3, #1
 8006a92:	e7f0      	b.n	8006a76 <_vfiprintf_r+0x1da>
 8006a94:	ab03      	add	r3, sp, #12
 8006a96:	9300      	str	r3, [sp, #0]
 8006a98:	462a      	mov	r2, r5
 8006a9a:	4b16      	ldr	r3, [pc, #88]	; (8006af4 <_vfiprintf_r+0x258>)
 8006a9c:	a904      	add	r1, sp, #16
 8006a9e:	4630      	mov	r0, r6
 8006aa0:	f3af 8000 	nop.w
 8006aa4:	4607      	mov	r7, r0
 8006aa6:	1c78      	adds	r0, r7, #1
 8006aa8:	d1d6      	bne.n	8006a58 <_vfiprintf_r+0x1bc>
 8006aaa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006aac:	07d9      	lsls	r1, r3, #31
 8006aae:	d405      	bmi.n	8006abc <_vfiprintf_r+0x220>
 8006ab0:	89ab      	ldrh	r3, [r5, #12]
 8006ab2:	059a      	lsls	r2, r3, #22
 8006ab4:	d402      	bmi.n	8006abc <_vfiprintf_r+0x220>
 8006ab6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006ab8:	f7ff fe31 	bl	800671e <__retarget_lock_release_recursive>
 8006abc:	89ab      	ldrh	r3, [r5, #12]
 8006abe:	065b      	lsls	r3, r3, #25
 8006ac0:	f53f af12 	bmi.w	80068e8 <_vfiprintf_r+0x4c>
 8006ac4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ac6:	e711      	b.n	80068ec <_vfiprintf_r+0x50>
 8006ac8:	ab03      	add	r3, sp, #12
 8006aca:	9300      	str	r3, [sp, #0]
 8006acc:	462a      	mov	r2, r5
 8006ace:	4b09      	ldr	r3, [pc, #36]	; (8006af4 <_vfiprintf_r+0x258>)
 8006ad0:	a904      	add	r1, sp, #16
 8006ad2:	4630      	mov	r0, r6
 8006ad4:	f000 f880 	bl	8006bd8 <_printf_i>
 8006ad8:	e7e4      	b.n	8006aa4 <_vfiprintf_r+0x208>
 8006ada:	bf00      	nop
 8006adc:	08007480 	.word	0x08007480
 8006ae0:	080074a0 	.word	0x080074a0
 8006ae4:	08007460 	.word	0x08007460
 8006ae8:	080074c0 	.word	0x080074c0
 8006aec:	080074ca 	.word	0x080074ca
 8006af0:	00000000 	.word	0x00000000
 8006af4:	08006877 	.word	0x08006877
 8006af8:	080074c6 	.word	0x080074c6

08006afc <_printf_common>:
 8006afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b00:	4616      	mov	r6, r2
 8006b02:	4699      	mov	r9, r3
 8006b04:	688a      	ldr	r2, [r1, #8]
 8006b06:	690b      	ldr	r3, [r1, #16]
 8006b08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	bfb8      	it	lt
 8006b10:	4613      	movlt	r3, r2
 8006b12:	6033      	str	r3, [r6, #0]
 8006b14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006b18:	4607      	mov	r7, r0
 8006b1a:	460c      	mov	r4, r1
 8006b1c:	b10a      	cbz	r2, 8006b22 <_printf_common+0x26>
 8006b1e:	3301      	adds	r3, #1
 8006b20:	6033      	str	r3, [r6, #0]
 8006b22:	6823      	ldr	r3, [r4, #0]
 8006b24:	0699      	lsls	r1, r3, #26
 8006b26:	bf42      	ittt	mi
 8006b28:	6833      	ldrmi	r3, [r6, #0]
 8006b2a:	3302      	addmi	r3, #2
 8006b2c:	6033      	strmi	r3, [r6, #0]
 8006b2e:	6825      	ldr	r5, [r4, #0]
 8006b30:	f015 0506 	ands.w	r5, r5, #6
 8006b34:	d106      	bne.n	8006b44 <_printf_common+0x48>
 8006b36:	f104 0a19 	add.w	sl, r4, #25
 8006b3a:	68e3      	ldr	r3, [r4, #12]
 8006b3c:	6832      	ldr	r2, [r6, #0]
 8006b3e:	1a9b      	subs	r3, r3, r2
 8006b40:	42ab      	cmp	r3, r5
 8006b42:	dc26      	bgt.n	8006b92 <_printf_common+0x96>
 8006b44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006b48:	1e13      	subs	r3, r2, #0
 8006b4a:	6822      	ldr	r2, [r4, #0]
 8006b4c:	bf18      	it	ne
 8006b4e:	2301      	movne	r3, #1
 8006b50:	0692      	lsls	r2, r2, #26
 8006b52:	d42b      	bmi.n	8006bac <_printf_common+0xb0>
 8006b54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b58:	4649      	mov	r1, r9
 8006b5a:	4638      	mov	r0, r7
 8006b5c:	47c0      	blx	r8
 8006b5e:	3001      	adds	r0, #1
 8006b60:	d01e      	beq.n	8006ba0 <_printf_common+0xa4>
 8006b62:	6823      	ldr	r3, [r4, #0]
 8006b64:	68e5      	ldr	r5, [r4, #12]
 8006b66:	6832      	ldr	r2, [r6, #0]
 8006b68:	f003 0306 	and.w	r3, r3, #6
 8006b6c:	2b04      	cmp	r3, #4
 8006b6e:	bf08      	it	eq
 8006b70:	1aad      	subeq	r5, r5, r2
 8006b72:	68a3      	ldr	r3, [r4, #8]
 8006b74:	6922      	ldr	r2, [r4, #16]
 8006b76:	bf0c      	ite	eq
 8006b78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b7c:	2500      	movne	r5, #0
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	bfc4      	itt	gt
 8006b82:	1a9b      	subgt	r3, r3, r2
 8006b84:	18ed      	addgt	r5, r5, r3
 8006b86:	2600      	movs	r6, #0
 8006b88:	341a      	adds	r4, #26
 8006b8a:	42b5      	cmp	r5, r6
 8006b8c:	d11a      	bne.n	8006bc4 <_printf_common+0xc8>
 8006b8e:	2000      	movs	r0, #0
 8006b90:	e008      	b.n	8006ba4 <_printf_common+0xa8>
 8006b92:	2301      	movs	r3, #1
 8006b94:	4652      	mov	r2, sl
 8006b96:	4649      	mov	r1, r9
 8006b98:	4638      	mov	r0, r7
 8006b9a:	47c0      	blx	r8
 8006b9c:	3001      	adds	r0, #1
 8006b9e:	d103      	bne.n	8006ba8 <_printf_common+0xac>
 8006ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ba8:	3501      	adds	r5, #1
 8006baa:	e7c6      	b.n	8006b3a <_printf_common+0x3e>
 8006bac:	18e1      	adds	r1, r4, r3
 8006bae:	1c5a      	adds	r2, r3, #1
 8006bb0:	2030      	movs	r0, #48	; 0x30
 8006bb2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006bb6:	4422      	add	r2, r4
 8006bb8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006bbc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006bc0:	3302      	adds	r3, #2
 8006bc2:	e7c7      	b.n	8006b54 <_printf_common+0x58>
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	4622      	mov	r2, r4
 8006bc8:	4649      	mov	r1, r9
 8006bca:	4638      	mov	r0, r7
 8006bcc:	47c0      	blx	r8
 8006bce:	3001      	adds	r0, #1
 8006bd0:	d0e6      	beq.n	8006ba0 <_printf_common+0xa4>
 8006bd2:	3601      	adds	r6, #1
 8006bd4:	e7d9      	b.n	8006b8a <_printf_common+0x8e>
	...

08006bd8 <_printf_i>:
 8006bd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006bdc:	7e0f      	ldrb	r7, [r1, #24]
 8006bde:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006be0:	2f78      	cmp	r7, #120	; 0x78
 8006be2:	4691      	mov	r9, r2
 8006be4:	4680      	mov	r8, r0
 8006be6:	460c      	mov	r4, r1
 8006be8:	469a      	mov	sl, r3
 8006bea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006bee:	d807      	bhi.n	8006c00 <_printf_i+0x28>
 8006bf0:	2f62      	cmp	r7, #98	; 0x62
 8006bf2:	d80a      	bhi.n	8006c0a <_printf_i+0x32>
 8006bf4:	2f00      	cmp	r7, #0
 8006bf6:	f000 80d8 	beq.w	8006daa <_printf_i+0x1d2>
 8006bfa:	2f58      	cmp	r7, #88	; 0x58
 8006bfc:	f000 80a3 	beq.w	8006d46 <_printf_i+0x16e>
 8006c00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006c08:	e03a      	b.n	8006c80 <_printf_i+0xa8>
 8006c0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006c0e:	2b15      	cmp	r3, #21
 8006c10:	d8f6      	bhi.n	8006c00 <_printf_i+0x28>
 8006c12:	a101      	add	r1, pc, #4	; (adr r1, 8006c18 <_printf_i+0x40>)
 8006c14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006c18:	08006c71 	.word	0x08006c71
 8006c1c:	08006c85 	.word	0x08006c85
 8006c20:	08006c01 	.word	0x08006c01
 8006c24:	08006c01 	.word	0x08006c01
 8006c28:	08006c01 	.word	0x08006c01
 8006c2c:	08006c01 	.word	0x08006c01
 8006c30:	08006c85 	.word	0x08006c85
 8006c34:	08006c01 	.word	0x08006c01
 8006c38:	08006c01 	.word	0x08006c01
 8006c3c:	08006c01 	.word	0x08006c01
 8006c40:	08006c01 	.word	0x08006c01
 8006c44:	08006d91 	.word	0x08006d91
 8006c48:	08006cb5 	.word	0x08006cb5
 8006c4c:	08006d73 	.word	0x08006d73
 8006c50:	08006c01 	.word	0x08006c01
 8006c54:	08006c01 	.word	0x08006c01
 8006c58:	08006db3 	.word	0x08006db3
 8006c5c:	08006c01 	.word	0x08006c01
 8006c60:	08006cb5 	.word	0x08006cb5
 8006c64:	08006c01 	.word	0x08006c01
 8006c68:	08006c01 	.word	0x08006c01
 8006c6c:	08006d7b 	.word	0x08006d7b
 8006c70:	682b      	ldr	r3, [r5, #0]
 8006c72:	1d1a      	adds	r2, r3, #4
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	602a      	str	r2, [r5, #0]
 8006c78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c80:	2301      	movs	r3, #1
 8006c82:	e0a3      	b.n	8006dcc <_printf_i+0x1f4>
 8006c84:	6820      	ldr	r0, [r4, #0]
 8006c86:	6829      	ldr	r1, [r5, #0]
 8006c88:	0606      	lsls	r6, r0, #24
 8006c8a:	f101 0304 	add.w	r3, r1, #4
 8006c8e:	d50a      	bpl.n	8006ca6 <_printf_i+0xce>
 8006c90:	680e      	ldr	r6, [r1, #0]
 8006c92:	602b      	str	r3, [r5, #0]
 8006c94:	2e00      	cmp	r6, #0
 8006c96:	da03      	bge.n	8006ca0 <_printf_i+0xc8>
 8006c98:	232d      	movs	r3, #45	; 0x2d
 8006c9a:	4276      	negs	r6, r6
 8006c9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ca0:	485e      	ldr	r0, [pc, #376]	; (8006e1c <_printf_i+0x244>)
 8006ca2:	230a      	movs	r3, #10
 8006ca4:	e019      	b.n	8006cda <_printf_i+0x102>
 8006ca6:	680e      	ldr	r6, [r1, #0]
 8006ca8:	602b      	str	r3, [r5, #0]
 8006caa:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006cae:	bf18      	it	ne
 8006cb0:	b236      	sxthne	r6, r6
 8006cb2:	e7ef      	b.n	8006c94 <_printf_i+0xbc>
 8006cb4:	682b      	ldr	r3, [r5, #0]
 8006cb6:	6820      	ldr	r0, [r4, #0]
 8006cb8:	1d19      	adds	r1, r3, #4
 8006cba:	6029      	str	r1, [r5, #0]
 8006cbc:	0601      	lsls	r1, r0, #24
 8006cbe:	d501      	bpl.n	8006cc4 <_printf_i+0xec>
 8006cc0:	681e      	ldr	r6, [r3, #0]
 8006cc2:	e002      	b.n	8006cca <_printf_i+0xf2>
 8006cc4:	0646      	lsls	r6, r0, #25
 8006cc6:	d5fb      	bpl.n	8006cc0 <_printf_i+0xe8>
 8006cc8:	881e      	ldrh	r6, [r3, #0]
 8006cca:	4854      	ldr	r0, [pc, #336]	; (8006e1c <_printf_i+0x244>)
 8006ccc:	2f6f      	cmp	r7, #111	; 0x6f
 8006cce:	bf0c      	ite	eq
 8006cd0:	2308      	moveq	r3, #8
 8006cd2:	230a      	movne	r3, #10
 8006cd4:	2100      	movs	r1, #0
 8006cd6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006cda:	6865      	ldr	r5, [r4, #4]
 8006cdc:	60a5      	str	r5, [r4, #8]
 8006cde:	2d00      	cmp	r5, #0
 8006ce0:	bfa2      	ittt	ge
 8006ce2:	6821      	ldrge	r1, [r4, #0]
 8006ce4:	f021 0104 	bicge.w	r1, r1, #4
 8006ce8:	6021      	strge	r1, [r4, #0]
 8006cea:	b90e      	cbnz	r6, 8006cf0 <_printf_i+0x118>
 8006cec:	2d00      	cmp	r5, #0
 8006cee:	d04d      	beq.n	8006d8c <_printf_i+0x1b4>
 8006cf0:	4615      	mov	r5, r2
 8006cf2:	fbb6 f1f3 	udiv	r1, r6, r3
 8006cf6:	fb03 6711 	mls	r7, r3, r1, r6
 8006cfa:	5dc7      	ldrb	r7, [r0, r7]
 8006cfc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006d00:	4637      	mov	r7, r6
 8006d02:	42bb      	cmp	r3, r7
 8006d04:	460e      	mov	r6, r1
 8006d06:	d9f4      	bls.n	8006cf2 <_printf_i+0x11a>
 8006d08:	2b08      	cmp	r3, #8
 8006d0a:	d10b      	bne.n	8006d24 <_printf_i+0x14c>
 8006d0c:	6823      	ldr	r3, [r4, #0]
 8006d0e:	07de      	lsls	r6, r3, #31
 8006d10:	d508      	bpl.n	8006d24 <_printf_i+0x14c>
 8006d12:	6923      	ldr	r3, [r4, #16]
 8006d14:	6861      	ldr	r1, [r4, #4]
 8006d16:	4299      	cmp	r1, r3
 8006d18:	bfde      	ittt	le
 8006d1a:	2330      	movle	r3, #48	; 0x30
 8006d1c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006d20:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006d24:	1b52      	subs	r2, r2, r5
 8006d26:	6122      	str	r2, [r4, #16]
 8006d28:	f8cd a000 	str.w	sl, [sp]
 8006d2c:	464b      	mov	r3, r9
 8006d2e:	aa03      	add	r2, sp, #12
 8006d30:	4621      	mov	r1, r4
 8006d32:	4640      	mov	r0, r8
 8006d34:	f7ff fee2 	bl	8006afc <_printf_common>
 8006d38:	3001      	adds	r0, #1
 8006d3a:	d14c      	bne.n	8006dd6 <_printf_i+0x1fe>
 8006d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d40:	b004      	add	sp, #16
 8006d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d46:	4835      	ldr	r0, [pc, #212]	; (8006e1c <_printf_i+0x244>)
 8006d48:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006d4c:	6829      	ldr	r1, [r5, #0]
 8006d4e:	6823      	ldr	r3, [r4, #0]
 8006d50:	f851 6b04 	ldr.w	r6, [r1], #4
 8006d54:	6029      	str	r1, [r5, #0]
 8006d56:	061d      	lsls	r5, r3, #24
 8006d58:	d514      	bpl.n	8006d84 <_printf_i+0x1ac>
 8006d5a:	07df      	lsls	r7, r3, #31
 8006d5c:	bf44      	itt	mi
 8006d5e:	f043 0320 	orrmi.w	r3, r3, #32
 8006d62:	6023      	strmi	r3, [r4, #0]
 8006d64:	b91e      	cbnz	r6, 8006d6e <_printf_i+0x196>
 8006d66:	6823      	ldr	r3, [r4, #0]
 8006d68:	f023 0320 	bic.w	r3, r3, #32
 8006d6c:	6023      	str	r3, [r4, #0]
 8006d6e:	2310      	movs	r3, #16
 8006d70:	e7b0      	b.n	8006cd4 <_printf_i+0xfc>
 8006d72:	6823      	ldr	r3, [r4, #0]
 8006d74:	f043 0320 	orr.w	r3, r3, #32
 8006d78:	6023      	str	r3, [r4, #0]
 8006d7a:	2378      	movs	r3, #120	; 0x78
 8006d7c:	4828      	ldr	r0, [pc, #160]	; (8006e20 <_printf_i+0x248>)
 8006d7e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006d82:	e7e3      	b.n	8006d4c <_printf_i+0x174>
 8006d84:	0659      	lsls	r1, r3, #25
 8006d86:	bf48      	it	mi
 8006d88:	b2b6      	uxthmi	r6, r6
 8006d8a:	e7e6      	b.n	8006d5a <_printf_i+0x182>
 8006d8c:	4615      	mov	r5, r2
 8006d8e:	e7bb      	b.n	8006d08 <_printf_i+0x130>
 8006d90:	682b      	ldr	r3, [r5, #0]
 8006d92:	6826      	ldr	r6, [r4, #0]
 8006d94:	6961      	ldr	r1, [r4, #20]
 8006d96:	1d18      	adds	r0, r3, #4
 8006d98:	6028      	str	r0, [r5, #0]
 8006d9a:	0635      	lsls	r5, r6, #24
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	d501      	bpl.n	8006da4 <_printf_i+0x1cc>
 8006da0:	6019      	str	r1, [r3, #0]
 8006da2:	e002      	b.n	8006daa <_printf_i+0x1d2>
 8006da4:	0670      	lsls	r0, r6, #25
 8006da6:	d5fb      	bpl.n	8006da0 <_printf_i+0x1c8>
 8006da8:	8019      	strh	r1, [r3, #0]
 8006daa:	2300      	movs	r3, #0
 8006dac:	6123      	str	r3, [r4, #16]
 8006dae:	4615      	mov	r5, r2
 8006db0:	e7ba      	b.n	8006d28 <_printf_i+0x150>
 8006db2:	682b      	ldr	r3, [r5, #0]
 8006db4:	1d1a      	adds	r2, r3, #4
 8006db6:	602a      	str	r2, [r5, #0]
 8006db8:	681d      	ldr	r5, [r3, #0]
 8006dba:	6862      	ldr	r2, [r4, #4]
 8006dbc:	2100      	movs	r1, #0
 8006dbe:	4628      	mov	r0, r5
 8006dc0:	f7f9 fa16 	bl	80001f0 <memchr>
 8006dc4:	b108      	cbz	r0, 8006dca <_printf_i+0x1f2>
 8006dc6:	1b40      	subs	r0, r0, r5
 8006dc8:	6060      	str	r0, [r4, #4]
 8006dca:	6863      	ldr	r3, [r4, #4]
 8006dcc:	6123      	str	r3, [r4, #16]
 8006dce:	2300      	movs	r3, #0
 8006dd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006dd4:	e7a8      	b.n	8006d28 <_printf_i+0x150>
 8006dd6:	6923      	ldr	r3, [r4, #16]
 8006dd8:	462a      	mov	r2, r5
 8006dda:	4649      	mov	r1, r9
 8006ddc:	4640      	mov	r0, r8
 8006dde:	47d0      	blx	sl
 8006de0:	3001      	adds	r0, #1
 8006de2:	d0ab      	beq.n	8006d3c <_printf_i+0x164>
 8006de4:	6823      	ldr	r3, [r4, #0]
 8006de6:	079b      	lsls	r3, r3, #30
 8006de8:	d413      	bmi.n	8006e12 <_printf_i+0x23a>
 8006dea:	68e0      	ldr	r0, [r4, #12]
 8006dec:	9b03      	ldr	r3, [sp, #12]
 8006dee:	4298      	cmp	r0, r3
 8006df0:	bfb8      	it	lt
 8006df2:	4618      	movlt	r0, r3
 8006df4:	e7a4      	b.n	8006d40 <_printf_i+0x168>
 8006df6:	2301      	movs	r3, #1
 8006df8:	4632      	mov	r2, r6
 8006dfa:	4649      	mov	r1, r9
 8006dfc:	4640      	mov	r0, r8
 8006dfe:	47d0      	blx	sl
 8006e00:	3001      	adds	r0, #1
 8006e02:	d09b      	beq.n	8006d3c <_printf_i+0x164>
 8006e04:	3501      	adds	r5, #1
 8006e06:	68e3      	ldr	r3, [r4, #12]
 8006e08:	9903      	ldr	r1, [sp, #12]
 8006e0a:	1a5b      	subs	r3, r3, r1
 8006e0c:	42ab      	cmp	r3, r5
 8006e0e:	dcf2      	bgt.n	8006df6 <_printf_i+0x21e>
 8006e10:	e7eb      	b.n	8006dea <_printf_i+0x212>
 8006e12:	2500      	movs	r5, #0
 8006e14:	f104 0619 	add.w	r6, r4, #25
 8006e18:	e7f5      	b.n	8006e06 <_printf_i+0x22e>
 8006e1a:	bf00      	nop
 8006e1c:	080074d1 	.word	0x080074d1
 8006e20:	080074e2 	.word	0x080074e2

08006e24 <_sbrk_r>:
 8006e24:	b538      	push	{r3, r4, r5, lr}
 8006e26:	4d06      	ldr	r5, [pc, #24]	; (8006e40 <_sbrk_r+0x1c>)
 8006e28:	2300      	movs	r3, #0
 8006e2a:	4604      	mov	r4, r0
 8006e2c:	4608      	mov	r0, r1
 8006e2e:	602b      	str	r3, [r5, #0]
 8006e30:	f7fa fc5e 	bl	80016f0 <_sbrk>
 8006e34:	1c43      	adds	r3, r0, #1
 8006e36:	d102      	bne.n	8006e3e <_sbrk_r+0x1a>
 8006e38:	682b      	ldr	r3, [r5, #0]
 8006e3a:	b103      	cbz	r3, 8006e3e <_sbrk_r+0x1a>
 8006e3c:	6023      	str	r3, [r4, #0]
 8006e3e:	bd38      	pop	{r3, r4, r5, pc}
 8006e40:	20002ab8 	.word	0x20002ab8

08006e44 <__sread>:
 8006e44:	b510      	push	{r4, lr}
 8006e46:	460c      	mov	r4, r1
 8006e48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e4c:	f000 fab2 	bl	80073b4 <_read_r>
 8006e50:	2800      	cmp	r0, #0
 8006e52:	bfab      	itete	ge
 8006e54:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006e56:	89a3      	ldrhlt	r3, [r4, #12]
 8006e58:	181b      	addge	r3, r3, r0
 8006e5a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006e5e:	bfac      	ite	ge
 8006e60:	6563      	strge	r3, [r4, #84]	; 0x54
 8006e62:	81a3      	strhlt	r3, [r4, #12]
 8006e64:	bd10      	pop	{r4, pc}

08006e66 <__swrite>:
 8006e66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e6a:	461f      	mov	r7, r3
 8006e6c:	898b      	ldrh	r3, [r1, #12]
 8006e6e:	05db      	lsls	r3, r3, #23
 8006e70:	4605      	mov	r5, r0
 8006e72:	460c      	mov	r4, r1
 8006e74:	4616      	mov	r6, r2
 8006e76:	d505      	bpl.n	8006e84 <__swrite+0x1e>
 8006e78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e7c:	2302      	movs	r3, #2
 8006e7e:	2200      	movs	r2, #0
 8006e80:	f000 f9c8 	bl	8007214 <_lseek_r>
 8006e84:	89a3      	ldrh	r3, [r4, #12]
 8006e86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e8e:	81a3      	strh	r3, [r4, #12]
 8006e90:	4632      	mov	r2, r6
 8006e92:	463b      	mov	r3, r7
 8006e94:	4628      	mov	r0, r5
 8006e96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e9a:	f000 b869 	b.w	8006f70 <_write_r>

08006e9e <__sseek>:
 8006e9e:	b510      	push	{r4, lr}
 8006ea0:	460c      	mov	r4, r1
 8006ea2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ea6:	f000 f9b5 	bl	8007214 <_lseek_r>
 8006eaa:	1c43      	adds	r3, r0, #1
 8006eac:	89a3      	ldrh	r3, [r4, #12]
 8006eae:	bf15      	itete	ne
 8006eb0:	6560      	strne	r0, [r4, #84]	; 0x54
 8006eb2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006eb6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006eba:	81a3      	strheq	r3, [r4, #12]
 8006ebc:	bf18      	it	ne
 8006ebe:	81a3      	strhne	r3, [r4, #12]
 8006ec0:	bd10      	pop	{r4, pc}

08006ec2 <__sclose>:
 8006ec2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ec6:	f000 b8d3 	b.w	8007070 <_close_r>
	...

08006ecc <__swbuf_r>:
 8006ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ece:	460e      	mov	r6, r1
 8006ed0:	4614      	mov	r4, r2
 8006ed2:	4605      	mov	r5, r0
 8006ed4:	b118      	cbz	r0, 8006ede <__swbuf_r+0x12>
 8006ed6:	6983      	ldr	r3, [r0, #24]
 8006ed8:	b90b      	cbnz	r3, 8006ede <__swbuf_r+0x12>
 8006eda:	f7ff fb81 	bl	80065e0 <__sinit>
 8006ede:	4b21      	ldr	r3, [pc, #132]	; (8006f64 <__swbuf_r+0x98>)
 8006ee0:	429c      	cmp	r4, r3
 8006ee2:	d12b      	bne.n	8006f3c <__swbuf_r+0x70>
 8006ee4:	686c      	ldr	r4, [r5, #4]
 8006ee6:	69a3      	ldr	r3, [r4, #24]
 8006ee8:	60a3      	str	r3, [r4, #8]
 8006eea:	89a3      	ldrh	r3, [r4, #12]
 8006eec:	071a      	lsls	r2, r3, #28
 8006eee:	d52f      	bpl.n	8006f50 <__swbuf_r+0x84>
 8006ef0:	6923      	ldr	r3, [r4, #16]
 8006ef2:	b36b      	cbz	r3, 8006f50 <__swbuf_r+0x84>
 8006ef4:	6923      	ldr	r3, [r4, #16]
 8006ef6:	6820      	ldr	r0, [r4, #0]
 8006ef8:	1ac0      	subs	r0, r0, r3
 8006efa:	6963      	ldr	r3, [r4, #20]
 8006efc:	b2f6      	uxtb	r6, r6
 8006efe:	4283      	cmp	r3, r0
 8006f00:	4637      	mov	r7, r6
 8006f02:	dc04      	bgt.n	8006f0e <__swbuf_r+0x42>
 8006f04:	4621      	mov	r1, r4
 8006f06:	4628      	mov	r0, r5
 8006f08:	f000 f948 	bl	800719c <_fflush_r>
 8006f0c:	bb30      	cbnz	r0, 8006f5c <__swbuf_r+0x90>
 8006f0e:	68a3      	ldr	r3, [r4, #8]
 8006f10:	3b01      	subs	r3, #1
 8006f12:	60a3      	str	r3, [r4, #8]
 8006f14:	6823      	ldr	r3, [r4, #0]
 8006f16:	1c5a      	adds	r2, r3, #1
 8006f18:	6022      	str	r2, [r4, #0]
 8006f1a:	701e      	strb	r6, [r3, #0]
 8006f1c:	6963      	ldr	r3, [r4, #20]
 8006f1e:	3001      	adds	r0, #1
 8006f20:	4283      	cmp	r3, r0
 8006f22:	d004      	beq.n	8006f2e <__swbuf_r+0x62>
 8006f24:	89a3      	ldrh	r3, [r4, #12]
 8006f26:	07db      	lsls	r3, r3, #31
 8006f28:	d506      	bpl.n	8006f38 <__swbuf_r+0x6c>
 8006f2a:	2e0a      	cmp	r6, #10
 8006f2c:	d104      	bne.n	8006f38 <__swbuf_r+0x6c>
 8006f2e:	4621      	mov	r1, r4
 8006f30:	4628      	mov	r0, r5
 8006f32:	f000 f933 	bl	800719c <_fflush_r>
 8006f36:	b988      	cbnz	r0, 8006f5c <__swbuf_r+0x90>
 8006f38:	4638      	mov	r0, r7
 8006f3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f3c:	4b0a      	ldr	r3, [pc, #40]	; (8006f68 <__swbuf_r+0x9c>)
 8006f3e:	429c      	cmp	r4, r3
 8006f40:	d101      	bne.n	8006f46 <__swbuf_r+0x7a>
 8006f42:	68ac      	ldr	r4, [r5, #8]
 8006f44:	e7cf      	b.n	8006ee6 <__swbuf_r+0x1a>
 8006f46:	4b09      	ldr	r3, [pc, #36]	; (8006f6c <__swbuf_r+0xa0>)
 8006f48:	429c      	cmp	r4, r3
 8006f4a:	bf08      	it	eq
 8006f4c:	68ec      	ldreq	r4, [r5, #12]
 8006f4e:	e7ca      	b.n	8006ee6 <__swbuf_r+0x1a>
 8006f50:	4621      	mov	r1, r4
 8006f52:	4628      	mov	r0, r5
 8006f54:	f000 f81e 	bl	8006f94 <__swsetup_r>
 8006f58:	2800      	cmp	r0, #0
 8006f5a:	d0cb      	beq.n	8006ef4 <__swbuf_r+0x28>
 8006f5c:	f04f 37ff 	mov.w	r7, #4294967295
 8006f60:	e7ea      	b.n	8006f38 <__swbuf_r+0x6c>
 8006f62:	bf00      	nop
 8006f64:	08007480 	.word	0x08007480
 8006f68:	080074a0 	.word	0x080074a0
 8006f6c:	08007460 	.word	0x08007460

08006f70 <_write_r>:
 8006f70:	b538      	push	{r3, r4, r5, lr}
 8006f72:	4d07      	ldr	r5, [pc, #28]	; (8006f90 <_write_r+0x20>)
 8006f74:	4604      	mov	r4, r0
 8006f76:	4608      	mov	r0, r1
 8006f78:	4611      	mov	r1, r2
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	602a      	str	r2, [r5, #0]
 8006f7e:	461a      	mov	r2, r3
 8006f80:	f7f9 fb08 	bl	8000594 <_write>
 8006f84:	1c43      	adds	r3, r0, #1
 8006f86:	d102      	bne.n	8006f8e <_write_r+0x1e>
 8006f88:	682b      	ldr	r3, [r5, #0]
 8006f8a:	b103      	cbz	r3, 8006f8e <_write_r+0x1e>
 8006f8c:	6023      	str	r3, [r4, #0]
 8006f8e:	bd38      	pop	{r3, r4, r5, pc}
 8006f90:	20002ab8 	.word	0x20002ab8

08006f94 <__swsetup_r>:
 8006f94:	4b32      	ldr	r3, [pc, #200]	; (8007060 <__swsetup_r+0xcc>)
 8006f96:	b570      	push	{r4, r5, r6, lr}
 8006f98:	681d      	ldr	r5, [r3, #0]
 8006f9a:	4606      	mov	r6, r0
 8006f9c:	460c      	mov	r4, r1
 8006f9e:	b125      	cbz	r5, 8006faa <__swsetup_r+0x16>
 8006fa0:	69ab      	ldr	r3, [r5, #24]
 8006fa2:	b913      	cbnz	r3, 8006faa <__swsetup_r+0x16>
 8006fa4:	4628      	mov	r0, r5
 8006fa6:	f7ff fb1b 	bl	80065e0 <__sinit>
 8006faa:	4b2e      	ldr	r3, [pc, #184]	; (8007064 <__swsetup_r+0xd0>)
 8006fac:	429c      	cmp	r4, r3
 8006fae:	d10f      	bne.n	8006fd0 <__swsetup_r+0x3c>
 8006fb0:	686c      	ldr	r4, [r5, #4]
 8006fb2:	89a3      	ldrh	r3, [r4, #12]
 8006fb4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006fb8:	0719      	lsls	r1, r3, #28
 8006fba:	d42c      	bmi.n	8007016 <__swsetup_r+0x82>
 8006fbc:	06dd      	lsls	r5, r3, #27
 8006fbe:	d411      	bmi.n	8006fe4 <__swsetup_r+0x50>
 8006fc0:	2309      	movs	r3, #9
 8006fc2:	6033      	str	r3, [r6, #0]
 8006fc4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006fc8:	81a3      	strh	r3, [r4, #12]
 8006fca:	f04f 30ff 	mov.w	r0, #4294967295
 8006fce:	e03e      	b.n	800704e <__swsetup_r+0xba>
 8006fd0:	4b25      	ldr	r3, [pc, #148]	; (8007068 <__swsetup_r+0xd4>)
 8006fd2:	429c      	cmp	r4, r3
 8006fd4:	d101      	bne.n	8006fda <__swsetup_r+0x46>
 8006fd6:	68ac      	ldr	r4, [r5, #8]
 8006fd8:	e7eb      	b.n	8006fb2 <__swsetup_r+0x1e>
 8006fda:	4b24      	ldr	r3, [pc, #144]	; (800706c <__swsetup_r+0xd8>)
 8006fdc:	429c      	cmp	r4, r3
 8006fde:	bf08      	it	eq
 8006fe0:	68ec      	ldreq	r4, [r5, #12]
 8006fe2:	e7e6      	b.n	8006fb2 <__swsetup_r+0x1e>
 8006fe4:	0758      	lsls	r0, r3, #29
 8006fe6:	d512      	bpl.n	800700e <__swsetup_r+0x7a>
 8006fe8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006fea:	b141      	cbz	r1, 8006ffe <__swsetup_r+0x6a>
 8006fec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ff0:	4299      	cmp	r1, r3
 8006ff2:	d002      	beq.n	8006ffa <__swsetup_r+0x66>
 8006ff4:	4630      	mov	r0, r6
 8006ff6:	f000 f991 	bl	800731c <_free_r>
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	6363      	str	r3, [r4, #52]	; 0x34
 8006ffe:	89a3      	ldrh	r3, [r4, #12]
 8007000:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007004:	81a3      	strh	r3, [r4, #12]
 8007006:	2300      	movs	r3, #0
 8007008:	6063      	str	r3, [r4, #4]
 800700a:	6923      	ldr	r3, [r4, #16]
 800700c:	6023      	str	r3, [r4, #0]
 800700e:	89a3      	ldrh	r3, [r4, #12]
 8007010:	f043 0308 	orr.w	r3, r3, #8
 8007014:	81a3      	strh	r3, [r4, #12]
 8007016:	6923      	ldr	r3, [r4, #16]
 8007018:	b94b      	cbnz	r3, 800702e <__swsetup_r+0x9a>
 800701a:	89a3      	ldrh	r3, [r4, #12]
 800701c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007020:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007024:	d003      	beq.n	800702e <__swsetup_r+0x9a>
 8007026:	4621      	mov	r1, r4
 8007028:	4630      	mov	r0, r6
 800702a:	f000 f92b 	bl	8007284 <__smakebuf_r>
 800702e:	89a0      	ldrh	r0, [r4, #12]
 8007030:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007034:	f010 0301 	ands.w	r3, r0, #1
 8007038:	d00a      	beq.n	8007050 <__swsetup_r+0xbc>
 800703a:	2300      	movs	r3, #0
 800703c:	60a3      	str	r3, [r4, #8]
 800703e:	6963      	ldr	r3, [r4, #20]
 8007040:	425b      	negs	r3, r3
 8007042:	61a3      	str	r3, [r4, #24]
 8007044:	6923      	ldr	r3, [r4, #16]
 8007046:	b943      	cbnz	r3, 800705a <__swsetup_r+0xc6>
 8007048:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800704c:	d1ba      	bne.n	8006fc4 <__swsetup_r+0x30>
 800704e:	bd70      	pop	{r4, r5, r6, pc}
 8007050:	0781      	lsls	r1, r0, #30
 8007052:	bf58      	it	pl
 8007054:	6963      	ldrpl	r3, [r4, #20]
 8007056:	60a3      	str	r3, [r4, #8]
 8007058:	e7f4      	b.n	8007044 <__swsetup_r+0xb0>
 800705a:	2000      	movs	r0, #0
 800705c:	e7f7      	b.n	800704e <__swsetup_r+0xba>
 800705e:	bf00      	nop
 8007060:	200011a0 	.word	0x200011a0
 8007064:	08007480 	.word	0x08007480
 8007068:	080074a0 	.word	0x080074a0
 800706c:	08007460 	.word	0x08007460

08007070 <_close_r>:
 8007070:	b538      	push	{r3, r4, r5, lr}
 8007072:	4d06      	ldr	r5, [pc, #24]	; (800708c <_close_r+0x1c>)
 8007074:	2300      	movs	r3, #0
 8007076:	4604      	mov	r4, r0
 8007078:	4608      	mov	r0, r1
 800707a:	602b      	str	r3, [r5, #0]
 800707c:	f7fa fb04 	bl	8001688 <_close>
 8007080:	1c43      	adds	r3, r0, #1
 8007082:	d102      	bne.n	800708a <_close_r+0x1a>
 8007084:	682b      	ldr	r3, [r5, #0]
 8007086:	b103      	cbz	r3, 800708a <_close_r+0x1a>
 8007088:	6023      	str	r3, [r4, #0]
 800708a:	bd38      	pop	{r3, r4, r5, pc}
 800708c:	20002ab8 	.word	0x20002ab8

08007090 <__sflush_r>:
 8007090:	898a      	ldrh	r2, [r1, #12]
 8007092:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007096:	4605      	mov	r5, r0
 8007098:	0710      	lsls	r0, r2, #28
 800709a:	460c      	mov	r4, r1
 800709c:	d458      	bmi.n	8007150 <__sflush_r+0xc0>
 800709e:	684b      	ldr	r3, [r1, #4]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	dc05      	bgt.n	80070b0 <__sflush_r+0x20>
 80070a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	dc02      	bgt.n	80070b0 <__sflush_r+0x20>
 80070aa:	2000      	movs	r0, #0
 80070ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80070b2:	2e00      	cmp	r6, #0
 80070b4:	d0f9      	beq.n	80070aa <__sflush_r+0x1a>
 80070b6:	2300      	movs	r3, #0
 80070b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80070bc:	682f      	ldr	r7, [r5, #0]
 80070be:	602b      	str	r3, [r5, #0]
 80070c0:	d032      	beq.n	8007128 <__sflush_r+0x98>
 80070c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80070c4:	89a3      	ldrh	r3, [r4, #12]
 80070c6:	075a      	lsls	r2, r3, #29
 80070c8:	d505      	bpl.n	80070d6 <__sflush_r+0x46>
 80070ca:	6863      	ldr	r3, [r4, #4]
 80070cc:	1ac0      	subs	r0, r0, r3
 80070ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80070d0:	b10b      	cbz	r3, 80070d6 <__sflush_r+0x46>
 80070d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80070d4:	1ac0      	subs	r0, r0, r3
 80070d6:	2300      	movs	r3, #0
 80070d8:	4602      	mov	r2, r0
 80070da:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80070dc:	6a21      	ldr	r1, [r4, #32]
 80070de:	4628      	mov	r0, r5
 80070e0:	47b0      	blx	r6
 80070e2:	1c43      	adds	r3, r0, #1
 80070e4:	89a3      	ldrh	r3, [r4, #12]
 80070e6:	d106      	bne.n	80070f6 <__sflush_r+0x66>
 80070e8:	6829      	ldr	r1, [r5, #0]
 80070ea:	291d      	cmp	r1, #29
 80070ec:	d82c      	bhi.n	8007148 <__sflush_r+0xb8>
 80070ee:	4a2a      	ldr	r2, [pc, #168]	; (8007198 <__sflush_r+0x108>)
 80070f0:	40ca      	lsrs	r2, r1
 80070f2:	07d6      	lsls	r6, r2, #31
 80070f4:	d528      	bpl.n	8007148 <__sflush_r+0xb8>
 80070f6:	2200      	movs	r2, #0
 80070f8:	6062      	str	r2, [r4, #4]
 80070fa:	04d9      	lsls	r1, r3, #19
 80070fc:	6922      	ldr	r2, [r4, #16]
 80070fe:	6022      	str	r2, [r4, #0]
 8007100:	d504      	bpl.n	800710c <__sflush_r+0x7c>
 8007102:	1c42      	adds	r2, r0, #1
 8007104:	d101      	bne.n	800710a <__sflush_r+0x7a>
 8007106:	682b      	ldr	r3, [r5, #0]
 8007108:	b903      	cbnz	r3, 800710c <__sflush_r+0x7c>
 800710a:	6560      	str	r0, [r4, #84]	; 0x54
 800710c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800710e:	602f      	str	r7, [r5, #0]
 8007110:	2900      	cmp	r1, #0
 8007112:	d0ca      	beq.n	80070aa <__sflush_r+0x1a>
 8007114:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007118:	4299      	cmp	r1, r3
 800711a:	d002      	beq.n	8007122 <__sflush_r+0x92>
 800711c:	4628      	mov	r0, r5
 800711e:	f000 f8fd 	bl	800731c <_free_r>
 8007122:	2000      	movs	r0, #0
 8007124:	6360      	str	r0, [r4, #52]	; 0x34
 8007126:	e7c1      	b.n	80070ac <__sflush_r+0x1c>
 8007128:	6a21      	ldr	r1, [r4, #32]
 800712a:	2301      	movs	r3, #1
 800712c:	4628      	mov	r0, r5
 800712e:	47b0      	blx	r6
 8007130:	1c41      	adds	r1, r0, #1
 8007132:	d1c7      	bne.n	80070c4 <__sflush_r+0x34>
 8007134:	682b      	ldr	r3, [r5, #0]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d0c4      	beq.n	80070c4 <__sflush_r+0x34>
 800713a:	2b1d      	cmp	r3, #29
 800713c:	d001      	beq.n	8007142 <__sflush_r+0xb2>
 800713e:	2b16      	cmp	r3, #22
 8007140:	d101      	bne.n	8007146 <__sflush_r+0xb6>
 8007142:	602f      	str	r7, [r5, #0]
 8007144:	e7b1      	b.n	80070aa <__sflush_r+0x1a>
 8007146:	89a3      	ldrh	r3, [r4, #12]
 8007148:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800714c:	81a3      	strh	r3, [r4, #12]
 800714e:	e7ad      	b.n	80070ac <__sflush_r+0x1c>
 8007150:	690f      	ldr	r7, [r1, #16]
 8007152:	2f00      	cmp	r7, #0
 8007154:	d0a9      	beq.n	80070aa <__sflush_r+0x1a>
 8007156:	0793      	lsls	r3, r2, #30
 8007158:	680e      	ldr	r6, [r1, #0]
 800715a:	bf08      	it	eq
 800715c:	694b      	ldreq	r3, [r1, #20]
 800715e:	600f      	str	r7, [r1, #0]
 8007160:	bf18      	it	ne
 8007162:	2300      	movne	r3, #0
 8007164:	eba6 0807 	sub.w	r8, r6, r7
 8007168:	608b      	str	r3, [r1, #8]
 800716a:	f1b8 0f00 	cmp.w	r8, #0
 800716e:	dd9c      	ble.n	80070aa <__sflush_r+0x1a>
 8007170:	6a21      	ldr	r1, [r4, #32]
 8007172:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007174:	4643      	mov	r3, r8
 8007176:	463a      	mov	r2, r7
 8007178:	4628      	mov	r0, r5
 800717a:	47b0      	blx	r6
 800717c:	2800      	cmp	r0, #0
 800717e:	dc06      	bgt.n	800718e <__sflush_r+0xfe>
 8007180:	89a3      	ldrh	r3, [r4, #12]
 8007182:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007186:	81a3      	strh	r3, [r4, #12]
 8007188:	f04f 30ff 	mov.w	r0, #4294967295
 800718c:	e78e      	b.n	80070ac <__sflush_r+0x1c>
 800718e:	4407      	add	r7, r0
 8007190:	eba8 0800 	sub.w	r8, r8, r0
 8007194:	e7e9      	b.n	800716a <__sflush_r+0xda>
 8007196:	bf00      	nop
 8007198:	20400001 	.word	0x20400001

0800719c <_fflush_r>:
 800719c:	b538      	push	{r3, r4, r5, lr}
 800719e:	690b      	ldr	r3, [r1, #16]
 80071a0:	4605      	mov	r5, r0
 80071a2:	460c      	mov	r4, r1
 80071a4:	b913      	cbnz	r3, 80071ac <_fflush_r+0x10>
 80071a6:	2500      	movs	r5, #0
 80071a8:	4628      	mov	r0, r5
 80071aa:	bd38      	pop	{r3, r4, r5, pc}
 80071ac:	b118      	cbz	r0, 80071b6 <_fflush_r+0x1a>
 80071ae:	6983      	ldr	r3, [r0, #24]
 80071b0:	b90b      	cbnz	r3, 80071b6 <_fflush_r+0x1a>
 80071b2:	f7ff fa15 	bl	80065e0 <__sinit>
 80071b6:	4b14      	ldr	r3, [pc, #80]	; (8007208 <_fflush_r+0x6c>)
 80071b8:	429c      	cmp	r4, r3
 80071ba:	d11b      	bne.n	80071f4 <_fflush_r+0x58>
 80071bc:	686c      	ldr	r4, [r5, #4]
 80071be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d0ef      	beq.n	80071a6 <_fflush_r+0xa>
 80071c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80071c8:	07d0      	lsls	r0, r2, #31
 80071ca:	d404      	bmi.n	80071d6 <_fflush_r+0x3a>
 80071cc:	0599      	lsls	r1, r3, #22
 80071ce:	d402      	bmi.n	80071d6 <_fflush_r+0x3a>
 80071d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80071d2:	f7ff faa3 	bl	800671c <__retarget_lock_acquire_recursive>
 80071d6:	4628      	mov	r0, r5
 80071d8:	4621      	mov	r1, r4
 80071da:	f7ff ff59 	bl	8007090 <__sflush_r>
 80071de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80071e0:	07da      	lsls	r2, r3, #31
 80071e2:	4605      	mov	r5, r0
 80071e4:	d4e0      	bmi.n	80071a8 <_fflush_r+0xc>
 80071e6:	89a3      	ldrh	r3, [r4, #12]
 80071e8:	059b      	lsls	r3, r3, #22
 80071ea:	d4dd      	bmi.n	80071a8 <_fflush_r+0xc>
 80071ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80071ee:	f7ff fa96 	bl	800671e <__retarget_lock_release_recursive>
 80071f2:	e7d9      	b.n	80071a8 <_fflush_r+0xc>
 80071f4:	4b05      	ldr	r3, [pc, #20]	; (800720c <_fflush_r+0x70>)
 80071f6:	429c      	cmp	r4, r3
 80071f8:	d101      	bne.n	80071fe <_fflush_r+0x62>
 80071fa:	68ac      	ldr	r4, [r5, #8]
 80071fc:	e7df      	b.n	80071be <_fflush_r+0x22>
 80071fe:	4b04      	ldr	r3, [pc, #16]	; (8007210 <_fflush_r+0x74>)
 8007200:	429c      	cmp	r4, r3
 8007202:	bf08      	it	eq
 8007204:	68ec      	ldreq	r4, [r5, #12]
 8007206:	e7da      	b.n	80071be <_fflush_r+0x22>
 8007208:	08007480 	.word	0x08007480
 800720c:	080074a0 	.word	0x080074a0
 8007210:	08007460 	.word	0x08007460

08007214 <_lseek_r>:
 8007214:	b538      	push	{r3, r4, r5, lr}
 8007216:	4d07      	ldr	r5, [pc, #28]	; (8007234 <_lseek_r+0x20>)
 8007218:	4604      	mov	r4, r0
 800721a:	4608      	mov	r0, r1
 800721c:	4611      	mov	r1, r2
 800721e:	2200      	movs	r2, #0
 8007220:	602a      	str	r2, [r5, #0]
 8007222:	461a      	mov	r2, r3
 8007224:	f7fa fa57 	bl	80016d6 <_lseek>
 8007228:	1c43      	adds	r3, r0, #1
 800722a:	d102      	bne.n	8007232 <_lseek_r+0x1e>
 800722c:	682b      	ldr	r3, [r5, #0]
 800722e:	b103      	cbz	r3, 8007232 <_lseek_r+0x1e>
 8007230:	6023      	str	r3, [r4, #0]
 8007232:	bd38      	pop	{r3, r4, r5, pc}
 8007234:	20002ab8 	.word	0x20002ab8

08007238 <__swhatbuf_r>:
 8007238:	b570      	push	{r4, r5, r6, lr}
 800723a:	460e      	mov	r6, r1
 800723c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007240:	2900      	cmp	r1, #0
 8007242:	b096      	sub	sp, #88	; 0x58
 8007244:	4614      	mov	r4, r2
 8007246:	461d      	mov	r5, r3
 8007248:	da08      	bge.n	800725c <__swhatbuf_r+0x24>
 800724a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800724e:	2200      	movs	r2, #0
 8007250:	602a      	str	r2, [r5, #0]
 8007252:	061a      	lsls	r2, r3, #24
 8007254:	d410      	bmi.n	8007278 <__swhatbuf_r+0x40>
 8007256:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800725a:	e00e      	b.n	800727a <__swhatbuf_r+0x42>
 800725c:	466a      	mov	r2, sp
 800725e:	f000 f8bb 	bl	80073d8 <_fstat_r>
 8007262:	2800      	cmp	r0, #0
 8007264:	dbf1      	blt.n	800724a <__swhatbuf_r+0x12>
 8007266:	9a01      	ldr	r2, [sp, #4]
 8007268:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800726c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007270:	425a      	negs	r2, r3
 8007272:	415a      	adcs	r2, r3
 8007274:	602a      	str	r2, [r5, #0]
 8007276:	e7ee      	b.n	8007256 <__swhatbuf_r+0x1e>
 8007278:	2340      	movs	r3, #64	; 0x40
 800727a:	2000      	movs	r0, #0
 800727c:	6023      	str	r3, [r4, #0]
 800727e:	b016      	add	sp, #88	; 0x58
 8007280:	bd70      	pop	{r4, r5, r6, pc}
	...

08007284 <__smakebuf_r>:
 8007284:	898b      	ldrh	r3, [r1, #12]
 8007286:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007288:	079d      	lsls	r5, r3, #30
 800728a:	4606      	mov	r6, r0
 800728c:	460c      	mov	r4, r1
 800728e:	d507      	bpl.n	80072a0 <__smakebuf_r+0x1c>
 8007290:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007294:	6023      	str	r3, [r4, #0]
 8007296:	6123      	str	r3, [r4, #16]
 8007298:	2301      	movs	r3, #1
 800729a:	6163      	str	r3, [r4, #20]
 800729c:	b002      	add	sp, #8
 800729e:	bd70      	pop	{r4, r5, r6, pc}
 80072a0:	ab01      	add	r3, sp, #4
 80072a2:	466a      	mov	r2, sp
 80072a4:	f7ff ffc8 	bl	8007238 <__swhatbuf_r>
 80072a8:	9900      	ldr	r1, [sp, #0]
 80072aa:	4605      	mov	r5, r0
 80072ac:	4630      	mov	r0, r6
 80072ae:	f7ff fa57 	bl	8006760 <_malloc_r>
 80072b2:	b948      	cbnz	r0, 80072c8 <__smakebuf_r+0x44>
 80072b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80072b8:	059a      	lsls	r2, r3, #22
 80072ba:	d4ef      	bmi.n	800729c <__smakebuf_r+0x18>
 80072bc:	f023 0303 	bic.w	r3, r3, #3
 80072c0:	f043 0302 	orr.w	r3, r3, #2
 80072c4:	81a3      	strh	r3, [r4, #12]
 80072c6:	e7e3      	b.n	8007290 <__smakebuf_r+0xc>
 80072c8:	4b0d      	ldr	r3, [pc, #52]	; (8007300 <__smakebuf_r+0x7c>)
 80072ca:	62b3      	str	r3, [r6, #40]	; 0x28
 80072cc:	89a3      	ldrh	r3, [r4, #12]
 80072ce:	6020      	str	r0, [r4, #0]
 80072d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072d4:	81a3      	strh	r3, [r4, #12]
 80072d6:	9b00      	ldr	r3, [sp, #0]
 80072d8:	6163      	str	r3, [r4, #20]
 80072da:	9b01      	ldr	r3, [sp, #4]
 80072dc:	6120      	str	r0, [r4, #16]
 80072de:	b15b      	cbz	r3, 80072f8 <__smakebuf_r+0x74>
 80072e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80072e4:	4630      	mov	r0, r6
 80072e6:	f000 f889 	bl	80073fc <_isatty_r>
 80072ea:	b128      	cbz	r0, 80072f8 <__smakebuf_r+0x74>
 80072ec:	89a3      	ldrh	r3, [r4, #12]
 80072ee:	f023 0303 	bic.w	r3, r3, #3
 80072f2:	f043 0301 	orr.w	r3, r3, #1
 80072f6:	81a3      	strh	r3, [r4, #12]
 80072f8:	89a0      	ldrh	r0, [r4, #12]
 80072fa:	4305      	orrs	r5, r0
 80072fc:	81a5      	strh	r5, [r4, #12]
 80072fe:	e7cd      	b.n	800729c <__smakebuf_r+0x18>
 8007300:	08006579 	.word	0x08006579

08007304 <__malloc_lock>:
 8007304:	4801      	ldr	r0, [pc, #4]	; (800730c <__malloc_lock+0x8>)
 8007306:	f7ff ba09 	b.w	800671c <__retarget_lock_acquire_recursive>
 800730a:	bf00      	nop
 800730c:	20002aac 	.word	0x20002aac

08007310 <__malloc_unlock>:
 8007310:	4801      	ldr	r0, [pc, #4]	; (8007318 <__malloc_unlock+0x8>)
 8007312:	f7ff ba04 	b.w	800671e <__retarget_lock_release_recursive>
 8007316:	bf00      	nop
 8007318:	20002aac 	.word	0x20002aac

0800731c <_free_r>:
 800731c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800731e:	2900      	cmp	r1, #0
 8007320:	d044      	beq.n	80073ac <_free_r+0x90>
 8007322:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007326:	9001      	str	r0, [sp, #4]
 8007328:	2b00      	cmp	r3, #0
 800732a:	f1a1 0404 	sub.w	r4, r1, #4
 800732e:	bfb8      	it	lt
 8007330:	18e4      	addlt	r4, r4, r3
 8007332:	f7ff ffe7 	bl	8007304 <__malloc_lock>
 8007336:	4a1e      	ldr	r2, [pc, #120]	; (80073b0 <_free_r+0x94>)
 8007338:	9801      	ldr	r0, [sp, #4]
 800733a:	6813      	ldr	r3, [r2, #0]
 800733c:	b933      	cbnz	r3, 800734c <_free_r+0x30>
 800733e:	6063      	str	r3, [r4, #4]
 8007340:	6014      	str	r4, [r2, #0]
 8007342:	b003      	add	sp, #12
 8007344:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007348:	f7ff bfe2 	b.w	8007310 <__malloc_unlock>
 800734c:	42a3      	cmp	r3, r4
 800734e:	d908      	bls.n	8007362 <_free_r+0x46>
 8007350:	6825      	ldr	r5, [r4, #0]
 8007352:	1961      	adds	r1, r4, r5
 8007354:	428b      	cmp	r3, r1
 8007356:	bf01      	itttt	eq
 8007358:	6819      	ldreq	r1, [r3, #0]
 800735a:	685b      	ldreq	r3, [r3, #4]
 800735c:	1949      	addeq	r1, r1, r5
 800735e:	6021      	streq	r1, [r4, #0]
 8007360:	e7ed      	b.n	800733e <_free_r+0x22>
 8007362:	461a      	mov	r2, r3
 8007364:	685b      	ldr	r3, [r3, #4]
 8007366:	b10b      	cbz	r3, 800736c <_free_r+0x50>
 8007368:	42a3      	cmp	r3, r4
 800736a:	d9fa      	bls.n	8007362 <_free_r+0x46>
 800736c:	6811      	ldr	r1, [r2, #0]
 800736e:	1855      	adds	r5, r2, r1
 8007370:	42a5      	cmp	r5, r4
 8007372:	d10b      	bne.n	800738c <_free_r+0x70>
 8007374:	6824      	ldr	r4, [r4, #0]
 8007376:	4421      	add	r1, r4
 8007378:	1854      	adds	r4, r2, r1
 800737a:	42a3      	cmp	r3, r4
 800737c:	6011      	str	r1, [r2, #0]
 800737e:	d1e0      	bne.n	8007342 <_free_r+0x26>
 8007380:	681c      	ldr	r4, [r3, #0]
 8007382:	685b      	ldr	r3, [r3, #4]
 8007384:	6053      	str	r3, [r2, #4]
 8007386:	4421      	add	r1, r4
 8007388:	6011      	str	r1, [r2, #0]
 800738a:	e7da      	b.n	8007342 <_free_r+0x26>
 800738c:	d902      	bls.n	8007394 <_free_r+0x78>
 800738e:	230c      	movs	r3, #12
 8007390:	6003      	str	r3, [r0, #0]
 8007392:	e7d6      	b.n	8007342 <_free_r+0x26>
 8007394:	6825      	ldr	r5, [r4, #0]
 8007396:	1961      	adds	r1, r4, r5
 8007398:	428b      	cmp	r3, r1
 800739a:	bf04      	itt	eq
 800739c:	6819      	ldreq	r1, [r3, #0]
 800739e:	685b      	ldreq	r3, [r3, #4]
 80073a0:	6063      	str	r3, [r4, #4]
 80073a2:	bf04      	itt	eq
 80073a4:	1949      	addeq	r1, r1, r5
 80073a6:	6021      	streq	r1, [r4, #0]
 80073a8:	6054      	str	r4, [r2, #4]
 80073aa:	e7ca      	b.n	8007342 <_free_r+0x26>
 80073ac:	b003      	add	sp, #12
 80073ae:	bd30      	pop	{r4, r5, pc}
 80073b0:	20002ab0 	.word	0x20002ab0

080073b4 <_read_r>:
 80073b4:	b538      	push	{r3, r4, r5, lr}
 80073b6:	4d07      	ldr	r5, [pc, #28]	; (80073d4 <_read_r+0x20>)
 80073b8:	4604      	mov	r4, r0
 80073ba:	4608      	mov	r0, r1
 80073bc:	4611      	mov	r1, r2
 80073be:	2200      	movs	r2, #0
 80073c0:	602a      	str	r2, [r5, #0]
 80073c2:	461a      	mov	r2, r3
 80073c4:	f7f9 f8fc 	bl	80005c0 <_read>
 80073c8:	1c43      	adds	r3, r0, #1
 80073ca:	d102      	bne.n	80073d2 <_read_r+0x1e>
 80073cc:	682b      	ldr	r3, [r5, #0]
 80073ce:	b103      	cbz	r3, 80073d2 <_read_r+0x1e>
 80073d0:	6023      	str	r3, [r4, #0]
 80073d2:	bd38      	pop	{r3, r4, r5, pc}
 80073d4:	20002ab8 	.word	0x20002ab8

080073d8 <_fstat_r>:
 80073d8:	b538      	push	{r3, r4, r5, lr}
 80073da:	4d07      	ldr	r5, [pc, #28]	; (80073f8 <_fstat_r+0x20>)
 80073dc:	2300      	movs	r3, #0
 80073de:	4604      	mov	r4, r0
 80073e0:	4608      	mov	r0, r1
 80073e2:	4611      	mov	r1, r2
 80073e4:	602b      	str	r3, [r5, #0]
 80073e6:	f7fa f95b 	bl	80016a0 <_fstat>
 80073ea:	1c43      	adds	r3, r0, #1
 80073ec:	d102      	bne.n	80073f4 <_fstat_r+0x1c>
 80073ee:	682b      	ldr	r3, [r5, #0]
 80073f0:	b103      	cbz	r3, 80073f4 <_fstat_r+0x1c>
 80073f2:	6023      	str	r3, [r4, #0]
 80073f4:	bd38      	pop	{r3, r4, r5, pc}
 80073f6:	bf00      	nop
 80073f8:	20002ab8 	.word	0x20002ab8

080073fc <_isatty_r>:
 80073fc:	b538      	push	{r3, r4, r5, lr}
 80073fe:	4d06      	ldr	r5, [pc, #24]	; (8007418 <_isatty_r+0x1c>)
 8007400:	2300      	movs	r3, #0
 8007402:	4604      	mov	r4, r0
 8007404:	4608      	mov	r0, r1
 8007406:	602b      	str	r3, [r5, #0]
 8007408:	f7fa f95a 	bl	80016c0 <_isatty>
 800740c:	1c43      	adds	r3, r0, #1
 800740e:	d102      	bne.n	8007416 <_isatty_r+0x1a>
 8007410:	682b      	ldr	r3, [r5, #0]
 8007412:	b103      	cbz	r3, 8007416 <_isatty_r+0x1a>
 8007414:	6023      	str	r3, [r4, #0]
 8007416:	bd38      	pop	{r3, r4, r5, pc}
 8007418:	20002ab8 	.word	0x20002ab8

0800741c <_init>:
 800741c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800741e:	bf00      	nop
 8007420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007422:	bc08      	pop	{r3}
 8007424:	469e      	mov	lr, r3
 8007426:	4770      	bx	lr

08007428 <_fini>:
 8007428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800742a:	bf00      	nop
 800742c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800742e:	bc08      	pop	{r3}
 8007430:	469e      	mov	lr, r3
 8007432:	4770      	bx	lr
